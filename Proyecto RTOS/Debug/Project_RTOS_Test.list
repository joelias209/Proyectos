
Project_RTOS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000904  08012990  08012990  00022990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013294  08013294  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08013294  08013294  00023294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801329c  0801329c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801329c  0801329c  0002329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080132a0  080132a0  000232a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  080132a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ab28  20000204  080134a8  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001ad2c  080134a8  0003ad2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bb03  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005080  00000000  00000000  0005bd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da8  00000000  00000000  00060db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc8  00000000  00000000  00062b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002937a  00000000  00000000  00064728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000243b1  00000000  00000000  0008daa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f198e  00000000  00000000  000b1e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a37e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f1c  00000000  00000000  001a3834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012974 	.word	0x08012974

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	08012974 	.word	0x08012974

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001ac74 	.word	0x2001ac74

080002a4 <strcmp>:
 80002a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002ac:	2a01      	cmp	r2, #1
 80002ae:	bf28      	it	cs
 80002b0:	429a      	cmpcs	r2, r3
 80002b2:	d0f7      	beq.n	80002a4 <strcmp>
 80002b4:	1ad0      	subs	r0, r2, r3
 80002b6:	4770      	bx	lr

080002b8 <strlen>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002be:	2a00      	cmp	r2, #0
 80002c0:	d1fb      	bne.n	80002ba <strlen+0x2>
 80002c2:	1a18      	subs	r0, r3, r0
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2f>:
 8000c98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca0:	bf24      	itt	cs
 8000ca2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ca6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000caa:	d90d      	bls.n	8000cc8 <__aeabi_d2f+0x30>
 8000cac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc0:	bf08      	it	eq
 8000cc2:	f020 0001 	biceq.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ccc:	d121      	bne.n	8000d12 <__aeabi_d2f+0x7a>
 8000cce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cd2:	bfbc      	itt	lt
 8000cd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cd8:	4770      	bxlt	lr
 8000cda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ce2:	f1c2 0218 	rsb	r2, r2, #24
 8000ce6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cee:	fa20 f002 	lsr.w	r0, r0, r2
 8000cf2:	bf18      	it	ne
 8000cf4:	f040 0001 	orrne.w	r0, r0, #1
 8000cf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d04:	ea40 000c 	orr.w	r0, r0, ip
 8000d08:	fa23 f302 	lsr.w	r3, r3, r2
 8000d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d10:	e7cc      	b.n	8000cac <__aeabi_d2f+0x14>
 8000d12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d16:	d107      	bne.n	8000d28 <__aeabi_d2f+0x90>
 8000d18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d1c:	bf1e      	ittt	ne
 8000d1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d26:	4770      	bxne	lr
 8000d28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b96e 	b.w	800102c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f806 	bl	8000d68 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__udivmoddi4>:
 8000d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d6c:	9d08      	ldr	r5, [sp, #32]
 8000d6e:	4604      	mov	r4, r0
 8000d70:	468c      	mov	ip, r1
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8083 	bne.w	8000e7e <__udivmoddi4+0x116>
 8000d78:	428a      	cmp	r2, r1
 8000d7a:	4617      	mov	r7, r2
 8000d7c:	d947      	bls.n	8000e0e <__udivmoddi4+0xa6>
 8000d7e:	fab2 f282 	clz	r2, r2
 8000d82:	b142      	cbz	r2, 8000d96 <__udivmoddi4+0x2e>
 8000d84:	f1c2 0020 	rsb	r0, r2, #32
 8000d88:	fa24 f000 	lsr.w	r0, r4, r0
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	4097      	lsls	r7, r2
 8000d90:	ea40 0c01 	orr.w	ip, r0, r1
 8000d94:	4094      	lsls	r4, r2
 8000d96:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d9a:	0c23      	lsrs	r3, r4, #16
 8000d9c:	fbbc f6f8 	udiv	r6, ip, r8
 8000da0:	fa1f fe87 	uxth.w	lr, r7
 8000da4:	fb08 c116 	mls	r1, r8, r6, ip
 8000da8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dac:	fb06 f10e 	mul.w	r1, r6, lr
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d909      	bls.n	8000dc8 <__udivmoddi4+0x60>
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 8119 	bcs.w	8000ff0 <__udivmoddi4+0x288>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 8116 	bls.w	8000ff0 <__udivmoddi4+0x288>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	443b      	add	r3, r7
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x8c>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de6:	f080 8105 	bcs.w	8000ff4 <__udivmoddi4+0x28c>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f240 8102 	bls.w	8000ff4 <__udivmoddi4+0x28c>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df8:	eba4 040e 	sub.w	r4, r4, lr
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa0>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	b902      	cbnz	r2, 8000e12 <__udivmoddi4+0xaa>
 8000e10:	deff      	udf	#255	; 0xff
 8000e12:	fab2 f282 	clz	r2, r2
 8000e16:	2a00      	cmp	r2, #0
 8000e18:	d150      	bne.n	8000ebc <__udivmoddi4+0x154>
 8000e1a:	1bcb      	subs	r3, r1, r7
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	fa1f f887 	uxth.w	r8, r7
 8000e24:	2601      	movs	r6, #1
 8000e26:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e2a:	0c21      	lsrs	r1, r4, #16
 8000e2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb08 f30c 	mul.w	r3, r8, ip
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0xe4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0xe2>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	f200 80e9 	bhi.w	800101c <__udivmoddi4+0x2b4>
 8000e4a:	4684      	mov	ip, r0
 8000e4c:	1ac9      	subs	r1, r1, r3
 8000e4e:	b2a3      	uxth	r3, r4
 8000e50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e54:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e5c:	fb08 f800 	mul.w	r8, r8, r0
 8000e60:	45a0      	cmp	r8, r4
 8000e62:	d907      	bls.n	8000e74 <__udivmoddi4+0x10c>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x10a>
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	f200 80d9 	bhi.w	8001024 <__udivmoddi4+0x2bc>
 8000e72:	4618      	mov	r0, r3
 8000e74:	eba4 0408 	sub.w	r4, r4, r8
 8000e78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e7c:	e7bf      	b.n	8000dfe <__udivmoddi4+0x96>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d909      	bls.n	8000e96 <__udivmoddi4+0x12e>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	f000 80b1 	beq.w	8000fea <__udivmoddi4+0x282>
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	fab3 f683 	clz	r6, r3
 8000e9a:	2e00      	cmp	r6, #0
 8000e9c:	d14a      	bne.n	8000f34 <__udivmoddi4+0x1cc>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0x140>
 8000ea2:	4282      	cmp	r2, r0
 8000ea4:	f200 80b8 	bhi.w	8001018 <__udivmoddi4+0x2b0>
 8000ea8:	1a84      	subs	r4, r0, r2
 8000eaa:	eb61 0103 	sbc.w	r1, r1, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	468c      	mov	ip, r1
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d0a8      	beq.n	8000e08 <__udivmoddi4+0xa0>
 8000eb6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eba:	e7a5      	b.n	8000e08 <__udivmoddi4+0xa0>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec4:	4097      	lsls	r7, r2
 8000ec6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ece:	40d9      	lsrs	r1, r3
 8000ed0:	4330      	orrs	r0, r6
 8000ed2:	0c03      	lsrs	r3, r0, #16
 8000ed4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed8:	fa1f f887 	uxth.w	r8, r7
 8000edc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ee0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee4:	fb06 f108 	mul.w	r1, r6, r8
 8000ee8:	4299      	cmp	r1, r3
 8000eea:	fa04 f402 	lsl.w	r4, r4, r2
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x19c>
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef6:	f080 808d 	bcs.w	8001014 <__udivmoddi4+0x2ac>
 8000efa:	4299      	cmp	r1, r3
 8000efc:	f240 808a 	bls.w	8001014 <__udivmoddi4+0x2ac>
 8000f00:	3e02      	subs	r6, #2
 8000f02:	443b      	add	r3, r7
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b281      	uxth	r1, r0
 8000f08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f14:	fb00 f308 	mul.w	r3, r0, r8
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	d907      	bls.n	8000f2c <__udivmoddi4+0x1c4>
 8000f1c:	1879      	adds	r1, r7, r1
 8000f1e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f22:	d273      	bcs.n	800100c <__udivmoddi4+0x2a4>
 8000f24:	428b      	cmp	r3, r1
 8000f26:	d971      	bls.n	800100c <__udivmoddi4+0x2a4>
 8000f28:	3802      	subs	r0, #2
 8000f2a:	4439      	add	r1, r7
 8000f2c:	1acb      	subs	r3, r1, r3
 8000f2e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f32:	e778      	b.n	8000e26 <__udivmoddi4+0xbe>
 8000f34:	f1c6 0c20 	rsb	ip, r6, #32
 8000f38:	fa03 f406 	lsl.w	r4, r3, r6
 8000f3c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f40:	431c      	orrs	r4, r3
 8000f42:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f46:	fa01 f306 	lsl.w	r3, r1, r6
 8000f4a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f52:	431f      	orrs	r7, r3
 8000f54:	0c3b      	lsrs	r3, r7, #16
 8000f56:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5a:	fa1f f884 	uxth.w	r8, r4
 8000f5e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f62:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f66:	fb09 fa08 	mul.w	sl, r9, r8
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f70:	fa00 f306 	lsl.w	r3, r0, r6
 8000f74:	d908      	bls.n	8000f88 <__udivmoddi4+0x220>
 8000f76:	1861      	adds	r1, r4, r1
 8000f78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f7c:	d248      	bcs.n	8001010 <__udivmoddi4+0x2a8>
 8000f7e:	458a      	cmp	sl, r1
 8000f80:	d946      	bls.n	8001010 <__udivmoddi4+0x2a8>
 8000f82:	f1a9 0902 	sub.w	r9, r9, #2
 8000f86:	4421      	add	r1, r4
 8000f88:	eba1 010a 	sub.w	r1, r1, sl
 8000f8c:	b2bf      	uxth	r7, r7
 8000f8e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f92:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f96:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f9a:	fb00 f808 	mul.w	r8, r0, r8
 8000f9e:	45b8      	cmp	r8, r7
 8000fa0:	d907      	bls.n	8000fb2 <__udivmoddi4+0x24a>
 8000fa2:	19e7      	adds	r7, r4, r7
 8000fa4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa8:	d22e      	bcs.n	8001008 <__udivmoddi4+0x2a0>
 8000faa:	45b8      	cmp	r8, r7
 8000fac:	d92c      	bls.n	8001008 <__udivmoddi4+0x2a0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	4427      	add	r7, r4
 8000fb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb6:	eba7 0708 	sub.w	r7, r7, r8
 8000fba:	fba0 8902 	umull	r8, r9, r0, r2
 8000fbe:	454f      	cmp	r7, r9
 8000fc0:	46c6      	mov	lr, r8
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	d31a      	bcc.n	8000ffc <__udivmoddi4+0x294>
 8000fc6:	d017      	beq.n	8000ff8 <__udivmoddi4+0x290>
 8000fc8:	b15d      	cbz	r5, 8000fe2 <__udivmoddi4+0x27a>
 8000fca:	ebb3 020e 	subs.w	r2, r3, lr
 8000fce:	eb67 0701 	sbc.w	r7, r7, r1
 8000fd2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd6:	40f2      	lsrs	r2, r6
 8000fd8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fdc:	40f7      	lsrs	r7, r6
 8000fde:	e9c5 2700 	strd	r2, r7, [r5]
 8000fe2:	2600      	movs	r6, #0
 8000fe4:	4631      	mov	r1, r6
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	462e      	mov	r6, r5
 8000fec:	4628      	mov	r0, r5
 8000fee:	e70b      	b.n	8000e08 <__udivmoddi4+0xa0>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	e6e9      	b.n	8000dc8 <__udivmoddi4+0x60>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6fd      	b.n	8000df4 <__udivmoddi4+0x8c>
 8000ff8:	4543      	cmp	r3, r8
 8000ffa:	d2e5      	bcs.n	8000fc8 <__udivmoddi4+0x260>
 8000ffc:	ebb8 0e02 	subs.w	lr, r8, r2
 8001000:	eb69 0104 	sbc.w	r1, r9, r4
 8001004:	3801      	subs	r0, #1
 8001006:	e7df      	b.n	8000fc8 <__udivmoddi4+0x260>
 8001008:	4608      	mov	r0, r1
 800100a:	e7d2      	b.n	8000fb2 <__udivmoddi4+0x24a>
 800100c:	4660      	mov	r0, ip
 800100e:	e78d      	b.n	8000f2c <__udivmoddi4+0x1c4>
 8001010:	4681      	mov	r9, r0
 8001012:	e7b9      	b.n	8000f88 <__udivmoddi4+0x220>
 8001014:	4666      	mov	r6, ip
 8001016:	e775      	b.n	8000f04 <__udivmoddi4+0x19c>
 8001018:	4630      	mov	r0, r6
 800101a:	e74a      	b.n	8000eb2 <__udivmoddi4+0x14a>
 800101c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001020:	4439      	add	r1, r7
 8001022:	e713      	b.n	8000e4c <__udivmoddi4+0xe4>
 8001024:	3802      	subs	r0, #2
 8001026:	443c      	add	r4, r7
 8001028:	e724      	b.n	8000e74 <__udivmoddi4+0x10c>
 800102a:	bf00      	nop

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <vprint_LCD>:
static void data_to_main_plus(char *msg_menu, char *msg_menu_2, cadena_lcd_t *msg);
void change_display_state(char *msg_menu, char *msg_menu_2, cadena_lcd_t *msg, state_t display);

// Tarea para imprimir en LCD
void vprint_LCD(void* parameters)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	cadena_lcd_t *msg;

	while(1)
	{
		// Leemos los datos recibidos en la queue
		xQueueReceive(q_print_lcd, &msg, portMAX_DELAY);
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <vprint_LCD+0x7c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f107 010c 	add.w	r1, r7, #12
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	4618      	mov	r0, r3
 8001046:	f009 f8dd 	bl	800a204 <xQueueReceive>

		// Averoguamos que función se está solicitando
		if(msg->function == LCD_CLEAR)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	7cdb      	ldrb	r3, [r3, #19]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d102      	bne.n	8001058 <vprint_LCD+0x28>
		{
			// Limpiar pantalla
			lcd_display_clear();
 8001052:	f001 fa83 	bl	800255c <lcd_display_clear>
 8001056:	e020      	b.n	800109a <vprint_LCD+0x6a>
		}else if(msg->function == LCD_POSITION)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	7cdb      	ldrb	r3, [r3, #19]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d108      	bne.n	8001072 <vprint_LCD+0x42>
		{
			// Posicionar el cursor
			lcd_set_cursor(msg->fila, msg->columna);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	7c5a      	ldrb	r2, [r3, #17]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	7c9b      	ldrb	r3, [r3, #18]
 8001068:	4619      	mov	r1, r3
 800106a:	4610      	mov	r0, r2
 800106c:	f001 fa94 	bl	8002598 <lcd_set_cursor>
 8001070:	e013      	b.n	800109a <vprint_LCD+0x6a>
		}else if(msg->function == LCD_WRITE)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	7cdb      	ldrb	r3, [r3, #19]
 8001076:	2b02      	cmp	r3, #2
 8001078:	d10c      	bne.n	8001094 <vprint_LCD+0x64>
		{
			// Escribir en el LCD
			lcd_set_cursor(msg->fila, msg->columna);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	7c5a      	ldrb	r2, [r3, #17]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	7c9b      	ldrb	r3, [r3, #18]
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f001 fa87 	bl	8002598 <lcd_set_cursor>
			lcd_print_string(msg->msg);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fa6f 	bl	8002570 <lcd_print_string>
 8001092:	e002      	b.n	800109a <vprint_LCD+0x6a>
		}else
		{
			// Función errónea
			lcd_print_string("Error");
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <vprint_LCD+0x80>)
 8001096:	f001 fa6b 	bl	8002570 <lcd_print_string>
		}

		// Entregamos el semaforo, permitiendo un nuevo envío de datos a la queue
		xSemaphoreGive(sema_lcd);
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <vprint_LCD+0x84>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2300      	movs	r3, #0
 80010a0:	2200      	movs	r2, #0
 80010a2:	2100      	movs	r1, #0
 80010a4:	f008 fe1a 	bl	8009cdc <xQueueGenericSend>
		xQueueReceive(q_print_lcd, &msg, portMAX_DELAY);
 80010a8:	e7c6      	b.n	8001038 <vprint_LCD+0x8>
 80010aa:	bf00      	nop
 80010ac:	2001aa48 	.word	0x2001aa48
 80010b0:	08012990 	.word	0x08012990
 80010b4:	2001ab48 	.word	0x2001ab48

080010b8 <vuart_deco>:
	}
}

// Tarea para decodificar los datos recibidos en el puerto UART
void vuart_deco(void* parameters)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// Espera una notificación
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2000      	movs	r0, #0
 80010ce:	f00a fd0f 	bl	800baf0 <xTaskGenericNotifyWait>

		// Process the user data(command) stored in input data queue
		process_command();
 80010d2:	f000 fb59 	bl	8001788 <process_command>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010d6:	e7f3      	b.n	80010c0 <vuart_deco+0x8>

080010d8 <vuart_out>:
	}
}

// Tarea para transmitir por el puerto UART
void vuart_out(void* parameters)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	char *msg_uart;

	while(1)
	{
		// Leemos los datos recibidos en la queue y los enviamos por el puerto UART
		xQueueReceive(q_print_uart, &msg_uart, portMAX_DELAY);
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <vuart_out+0x38>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f107 010c 	add.w	r1, r7, #12
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	4618      	mov	r0, r3
 80010ee:	f009 f889 	bl	800a204 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg_uart, strlen((char*)msg_uart), HAL_MAX_DELAY);
 80010f2:	68fc      	ldr	r4, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f8de 	bl	80002b8 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	4621      	mov	r1, r4
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <vuart_out+0x3c>)
 8001108:	f007 fe29 	bl	8008d5e <HAL_UART_Transmit>
		xQueueReceive(q_print_uart, &msg_uart, portMAX_DELAY);
 800110c:	e7e8      	b.n	80010e0 <vuart_out+0x8>
 800110e:	bf00      	nop
 8001110:	2001aa50 	.word	0x2001aa50
 8001114:	2001ab70 	.word	0x2001ab70

08001118 <vall_menus_handler>:
	}
}

void vall_menus_handler(void* parameters)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b09d      	sub	sp, #116	; 0x74
 800111c:	af02      	add	r7, sp, #8
 800111e:	6078      	str	r0, [r7, #4]
	char *msg_welcome = "Bienvenido";
 8001120:	4b9f      	ldr	r3, [pc, #636]	; (80013a0 <vall_menus_handler+0x288>)
 8001122:	667b      	str	r3, [r7, #100]	; 0x64
	char *msg_menu = "o Mostrar data";
 8001124:	4b9f      	ldr	r3, [pc, #636]	; (80013a4 <vall_menus_handler+0x28c>)
 8001126:	663b      	str	r3, [r7, #96]	; 0x60
	char *msg_menu_2 = "  Configuracion";
 8001128:	4b9f      	ldr	r3, [pc, #636]	; (80013a8 <vall_menus_handler+0x290>)
 800112a:	65fb      	str	r3, [r7, #92]	; 0x5c
	char *msg_menu_3 = "  Mostrar data";
 800112c:	4b9f      	ldr	r3, [pc, #636]	; (80013ac <vall_menus_handler+0x294>)
 800112e:	65bb      	str	r3, [r7, #88]	; 0x58
	char *msg_menu_4 = "o Configuracion";
 8001130:	4b9f      	ldr	r3, [pc, #636]	; (80013b0 <vall_menus_handler+0x298>)
 8001132:	657b      	str	r3, [r7, #84]	; 0x54

	char *msg_conf = "o AGM";
 8001134:	4b9f      	ldr	r3, [pc, #636]	; (80013b4 <vall_menus_handler+0x29c>)
 8001136:	653b      	str	r3, [r7, #80]	; 0x50
	char *msg_conf_2 = "  ADC - PWM";
 8001138:	4b9f      	ldr	r3, [pc, #636]	; (80013b8 <vall_menus_handler+0x2a0>)
 800113a:	64fb      	str	r3, [r7, #76]	; 0x4c
	char *msg_conf_3 = "  AGM";
 800113c:	4b9f      	ldr	r3, [pc, #636]	; (80013bc <vall_menus_handler+0x2a4>)
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
	char *msg_conf_4 = "o ADC - PWM";
 8001140:	4b9f      	ldr	r3, [pc, #636]	; (80013c0 <vall_menus_handler+0x2a8>)
 8001142:	647b      	str	r3, [r7, #68]	; 0x44

	char *msg_conf_agm_adc = "o Activar";
 8001144:	4b9f      	ldr	r3, [pc, #636]	; (80013c4 <vall_menus_handler+0x2ac>)
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
	char *msg_conf_agm_adc_2 = "  Desactivar";
 8001148:	4b9f      	ldr	r3, [pc, #636]	; (80013c8 <vall_menus_handler+0x2b0>)
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
	char *msg_conf_agm_adc_3 = "  Activar";
 800114c:	4b9f      	ldr	r3, [pc, #636]	; (80013cc <vall_menus_handler+0x2b4>)
 800114e:	63bb      	str	r3, [r7, #56]	; 0x38
	char *msg_conf_agm_adc_4 = "o Desactivar";
 8001150:	4b9f      	ldr	r3, [pc, #636]	; (80013d0 <vall_menus_handler+0x2b8>)
 8001152:	637b      	str	r3, [r7, #52]	; 0x34

	char *msg_conf_agm_act = "AGM activado";
 8001154:	4b9f      	ldr	r3, [pc, #636]	; (80013d4 <vall_menus_handler+0x2bc>)
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
	char *msg_conf_agm_des = "AGM desactivado";
 8001158:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <vall_menus_handler+0x2c0>)
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c

	char *msg_conf_adc_act = "ADC activado";
 800115c:	4b9f      	ldr	r3, [pc, #636]	; (80013dc <vall_menus_handler+0x2c4>)
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
	char *msg_conf_adc_des = "ADC desactivado";
 8001160:	4b9f      	ldr	r3, [pc, #636]	; (80013e0 <vall_menus_handler+0x2c8>)
 8001162:	627b      	str	r3, [r7, #36]	; 0x24

	cadena_lcd_t msg_lcd;
	cadena_lcd_t *msg = &msg_lcd;
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	623b      	str	r3, [r7, #32]
	uint32_t cmd_addr;

	Mag_Init();
 800116a:	f000 fc1b 	bl	80019a4 <Mag_Init>
	Gyro_Init();
 800116e:	f000 fbcf 	bl	8001910 <Gyro_Init>
	Acel_Init();
 8001172:	f000 fb97 	bl	80018a4 <Acel_Init>

	// Imprimimos las pantallas iniciales al encender el micro
	send_to_lcd(1, 1, LCD_WRITE, msg_welcome, msg);
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800117c:	2202      	movs	r2, #2
 800117e:	2101      	movs	r1, #1
 8001180:	2001      	movs	r0, #1
 8001182:	f000 fa9d 	bl	80016c0 <send_to_lcd>

	vTaskDelay(pdMS_TO_TICKS(3000));
 8001186:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800118a:	f009 fe6b 	bl	800ae64 <vTaskDelay>

	send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2300      	movs	r3, #0
 8001194:	2201      	movs	r2, #1
 8001196:	2100      	movs	r1, #0
 8001198:	2000      	movs	r0, #0
 800119a:	f000 fa91 	bl	80016c0 <send_to_lcd>
	send_to_lcd(1, 1, LCD_WRITE, msg_menu, msg);
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011a4:	2202      	movs	r2, #2
 80011a6:	2101      	movs	r1, #1
 80011a8:	2001      	movs	r0, #1
 80011aa:	f000 fa89 	bl	80016c0 <send_to_lcd>
	send_to_lcd(2, 1, LCD_WRITE, msg_menu_2, msg);
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b4:	2202      	movs	r2, #2
 80011b6:	2101      	movs	r1, #1
 80011b8:	2002      	movs	r0, #2
 80011ba:	f000 fa81 	bl	80016c0 <send_to_lcd>

	while(1)
	{
		// Esperamos una notificación por presionar un botón
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	f04f 32ff 	mov.w	r2, #4294967295
 80011c6:	9200      	str	r2, [sp, #0]
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2000      	movs	r0, #0
 80011ce:	f00a fc8f 	bl	800baf0 <xTaskGenericNotifyWait>

		// Averiguamos en que pantalla estamos
		if(display_state == Menu_1)
 80011d2:	4b84      	ldr	r3, [pc, #528]	; (80013e4 <vall_menus_handler+0x2cc>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d125      	bne.n	8001226 <vall_menus_handler+0x10e>
		{
			// Averiguamos que botón fue presionado, luego imprimimos la pantalla correspondiente
			// y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_DOWN)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d106      	bne.n	80011ee <vall_menus_handler+0xd6>
			{
				change_display_state(msg_menu_3, msg_menu_4, msg, Menu_2);
 80011e0:	2301      	movs	r3, #1
 80011e2:	6a3a      	ldr	r2, [r7, #32]
 80011e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80011e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80011e8:	f001 f8e8 	bl	80023bc <change_display_state>
 80011ec:	e7e7      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == ENTER)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d1e4      	bne.n	80011be <vall_menus_handler+0xa6>
			{
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2300      	movs	r3, #0
 80011fa:	2201      	movs	r2, #1
 80011fc:	2100      	movs	r1, #0
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 fa5e 	bl	80016c0 <send_to_lcd>
				// Inicializa el timer AGM_ADC_timer
				xTimerStart(AGM_ADC_timer, portMAX_DELAY);
 8001204:	4b78      	ldr	r3, [pc, #480]	; (80013e8 <vall_menus_handler+0x2d0>)
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	f009 ff74 	bl	800b0f4 <xTaskGetTickCount>
 800120c:	4602      	mov	r2, r0
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2300      	movs	r3, #0
 8001216:	2101      	movs	r1, #1
 8001218:	4620      	mov	r0, r4
 800121a:	f00a ff0d 	bl	800c038 <xTimerGenericCommand>
				display_state = Data_1;
 800121e:	4b71      	ldr	r3, [pc, #452]	; (80013e4 <vall_menus_handler+0x2cc>)
 8001220:	2202      	movs	r2, #2
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e7cb      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == Menu_2)
 8001226:	4b6f      	ldr	r3, [pc, #444]	; (80013e4 <vall_menus_handler+0x2cc>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d113      	bne.n	8001256 <vall_menus_handler+0x13e>
		{
			// Averiguamos que botón fue presionado, luego imprimimos la pantalla correspondiente
			// y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_UP)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d106      	bne.n	8001242 <vall_menus_handler+0x12a>
			{
				change_display_state(msg_menu, msg_menu_2, msg, Menu_1);
 8001234:	2300      	movs	r3, #0
 8001236:	6a3a      	ldr	r2, [r7, #32]
 8001238:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800123a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800123c:	f001 f8be 	bl	80023bc <change_display_state>
 8001240:	e7bd      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == ENTER)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	2b03      	cmp	r3, #3
 8001246:	d1ba      	bne.n	80011be <vall_menus_handler+0xa6>
			{
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 8001248:	2307      	movs	r3, #7
 800124a:	6a3a      	ldr	r2, [r7, #32]
 800124c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800124e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001250:	f001 f8b4 	bl	80023bc <change_display_state>
 8001254:	e7b3      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == Configuration_1)
 8001256:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <vall_menus_handler+0x2cc>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b07      	cmp	r3, #7
 800125c:	d11d      	bne.n	800129a <vall_menus_handler+0x182>
		{
			// Averiguamos que botón fue presionado, luego imprimimos la pantalla correspondiente
			// y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_DOWN)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d106      	bne.n	8001272 <vall_menus_handler+0x15a>
			{
				change_display_state(msg_conf_3, msg_conf_4, msg, Configuration_2);
 8001264:	2308      	movs	r3, #8
 8001266:	6a3a      	ldr	r2, [r7, #32]
 8001268:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800126a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800126c:	f001 f8a6 	bl	80023bc <change_display_state>
 8001270:	e7a5      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == ENTER)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	2b03      	cmp	r3, #3
 8001276:	d106      	bne.n	8001286 <vall_menus_handler+0x16e>
			{
				change_display_state(msg_conf_agm_adc, msg_conf_agm_adc_2, msg, AGM_1);
 8001278:	2309      	movs	r3, #9
 800127a:	6a3a      	ldr	r2, [r7, #32]
 800127c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800127e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001280:	f001 f89c 	bl	80023bc <change_display_state>
 8001284:	e79b      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == BACK)
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d198      	bne.n	80011be <vall_menus_handler+0xa6>
			{
				change_display_state(msg_menu, msg_menu_2, msg, Menu_1);
 800128c:	2300      	movs	r3, #0
 800128e:	6a3a      	ldr	r2, [r7, #32]
 8001290:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001292:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001294:	f001 f892 	bl	80023bc <change_display_state>
 8001298:	e791      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == Configuration_2)
 800129a:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <vall_menus_handler+0x2cc>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d11e      	bne.n	80012e0 <vall_menus_handler+0x1c8>
		{
			if(cmd_addr == BUTTON_UP)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d106      	bne.n	80012b6 <vall_menus_handler+0x19e>
			{
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 80012a8:	2307      	movs	r3, #7
 80012aa:	6a3a      	ldr	r2, [r7, #32]
 80012ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80012ae:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80012b0:	f001 f884 	bl	80023bc <change_display_state>
 80012b4:	e783      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == ENTER)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d106      	bne.n	80012ca <vall_menus_handler+0x1b2>
			{
				change_display_state(msg_conf_agm_adc, msg_conf_agm_adc_2, msg, ADC_1);
 80012bc:	230b      	movs	r3, #11
 80012be:	6a3a      	ldr	r2, [r7, #32]
 80012c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80012c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012c4:	f001 f87a 	bl	80023bc <change_display_state>
 80012c8:	e779      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == BACK)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	f47f af76 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				change_display_state(msg_menu, msg_menu_2, msg, Menu_1);
 80012d2:	2300      	movs	r3, #0
 80012d4:	6a3a      	ldr	r2, [r7, #32]
 80012d6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80012d8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80012da:	f001 f86f 	bl	80023bc <change_display_state>
 80012de:	e76e      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == Data_1)
 80012e0:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <vall_menus_handler+0x2cc>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d134      	bne.n	8001352 <vall_menus_handler+0x23a>
		{
			// Preguntamos si los sensores están activados o desactivados
			if((state_adc_pwm == RESET) && (state_agm == RESET))
 80012e8:	4b40      	ldr	r3, [pc, #256]	; (80013ec <vall_menus_handler+0x2d4>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10d      	bne.n	800130c <vall_menus_handler+0x1f4>
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <vall_menus_handler+0x2d8>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d109      	bne.n	800130c <vall_menus_handler+0x1f4>
			{
				// Ambos sensores están desactivados, solo hay una pantalla
				// Si se presiona el botón BACK
				if(cmd_addr == BACK)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	f040 81d4 	bne.w	80016a8 <vall_menus_handler+0x590>
				{
					// Retorno a main_handler
					data_to_main_plus(msg_menu, msg_menu_2, msg);
 8001300:	6a3a      	ldr	r2, [r7, #32]
 8001302:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001304:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001306:	f000 fd4f 	bl	8001da8 <data_to_main_plus>
				if(cmd_addr == BACK)
 800130a:	e1cd      	b.n	80016a8 <vall_menus_handler+0x590>
				}
			}else if((state_adc_pwm == SET) && (state_agm == RESET))
 800130c:	4b37      	ldr	r3, [pc, #220]	; (80013ec <vall_menus_handler+0x2d4>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10d      	bne.n	8001330 <vall_menus_handler+0x218>
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <vall_menus_handler+0x2d8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <vall_menus_handler+0x218>
			{
				// ADC: activado, AGM: desactivado, solo hay una pantalla
				// Si se presiona el botón BACK
				if(cmd_addr == BACK)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b04      	cmp	r3, #4
 8001320:	f040 81c2 	bne.w	80016a8 <vall_menus_handler+0x590>
				{
					// Retorno a main_handler
					data_to_main_plus(msg_menu, msg_menu_2, msg);
 8001324:	6a3a      	ldr	r2, [r7, #32]
 8001326:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001328:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800132a:	f000 fd3d 	bl	8001da8 <data_to_main_plus>
				if(cmd_addr == BACK)
 800132e:	e1bb      	b.n	80016a8 <vall_menus_handler+0x590>
				}
			}else
			{
				// AGM: activado, hay 5 pantallas
				// Averiguamos que botón fue presionado y actualizamos el estado de la pantalla
				if(cmd_addr == BUTTON_DOWN)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d103      	bne.n	800133e <vall_menus_handler+0x226>
					display_state = Data_2;
 8001336:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <vall_menus_handler+0x2cc>)
 8001338:	2203      	movs	r2, #3
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e73f      	b.n	80011be <vall_menus_handler+0xa6>
				else if(cmd_addr == BACK)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b04      	cmp	r3, #4
 8001342:	f47f af3c 	bne.w	80011be <vall_menus_handler+0xa6>
				{
					// Retorno a main_handler
					data_to_main_plus(msg_menu, msg_menu_2, msg);
 8001346:	6a3a      	ldr	r2, [r7, #32]
 8001348:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800134a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800134c:	f000 fd2c 	bl	8001da8 <data_to_main_plus>
 8001350:	e735      	b.n	80011be <vall_menus_handler+0xa6>
				}
			}
		}else if(display_state == Data_2)
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <vall_menus_handler+0x2cc>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d117      	bne.n	800138a <vall_menus_handler+0x272>
		{
			// Averiguamos que botón fue presionado y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_UP)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d103      	bne.n	8001368 <vall_menus_handler+0x250>
				display_state = Data_1;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <vall_menus_handler+0x2cc>)
 8001362:	2202      	movs	r2, #2
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e72a      	b.n	80011be <vall_menus_handler+0xa6>
			else if(cmd_addr == BUTTON_DOWN)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d103      	bne.n	8001376 <vall_menus_handler+0x25e>
				display_state = Data_3;
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <vall_menus_handler+0x2cc>)
 8001370:	2204      	movs	r2, #4
 8001372:	701a      	strb	r2, [r3, #0]
 8001374:	e723      	b.n	80011be <vall_menus_handler+0xa6>
			else if(cmd_addr == BACK)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	2b04      	cmp	r3, #4
 800137a:	f47f af20 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				// Retorno a main_handler
				data_to_main_plus(msg_menu, msg_menu_2, msg);
 800137e:	6a3a      	ldr	r2, [r7, #32]
 8001380:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001382:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001384:	f000 fd10 	bl	8001da8 <data_to_main_plus>
 8001388:	e719      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == Data_3)
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <vall_menus_handler+0x2cc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b04      	cmp	r3, #4
 8001390:	d141      	bne.n	8001416 <vall_menus_handler+0x2fe>
		{
			// Averiguamos que botón fue presionado y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_UP)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d12d      	bne.n	80013f4 <vall_menus_handler+0x2dc>
				display_state = Data_2;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <vall_menus_handler+0x2cc>)
 800139a:	2203      	movs	r2, #3
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e70e      	b.n	80011be <vall_menus_handler+0xa6>
 80013a0:	08012998 	.word	0x08012998
 80013a4:	080129a4 	.word	0x080129a4
 80013a8:	080129b4 	.word	0x080129b4
 80013ac:	080129c4 	.word	0x080129c4
 80013b0:	080129d4 	.word	0x080129d4
 80013b4:	080129e4 	.word	0x080129e4
 80013b8:	080129ec 	.word	0x080129ec
 80013bc:	080129f8 	.word	0x080129f8
 80013c0:	08012a00 	.word	0x08012a00
 80013c4:	08012a0c 	.word	0x08012a0c
 80013c8:	08012a18 	.word	0x08012a18
 80013cc:	08012a28 	.word	0x08012a28
 80013d0:	08012a34 	.word	0x08012a34
 80013d4:	08012a44 	.word	0x08012a44
 80013d8:	08012a54 	.word	0x08012a54
 80013dc:	08012a64 	.word	0x08012a64
 80013e0:	08012a74 	.word	0x08012a74
 80013e4:	200002e1 	.word	0x200002e1
 80013e8:	2001aaf4 	.word	0x2001aaf4
 80013ec:	200002e0 	.word	0x200002e0
 80013f0:	200002df 	.word	0x200002df
			else if(cmd_addr == BUTTON_DOWN)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d103      	bne.n	8001402 <vall_menus_handler+0x2ea>
				display_state = Data_4;
 80013fa:	4bac      	ldr	r3, [pc, #688]	; (80016ac <vall_menus_handler+0x594>)
 80013fc:	2205      	movs	r2, #5
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e6dd      	b.n	80011be <vall_menus_handler+0xa6>
			else if(cmd_addr == BACK)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2b04      	cmp	r3, #4
 8001406:	f47f aeda 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				// Retorno a main_handler
				data_to_main_plus(msg_menu, msg_menu_2, msg);
 800140a:	6a3a      	ldr	r2, [r7, #32]
 800140c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800140e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001410:	f000 fcca 	bl	8001da8 <data_to_main_plus>
 8001414:	e6d3      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == Data_4)
 8001416:	4ba5      	ldr	r3, [pc, #660]	; (80016ac <vall_menus_handler+0x594>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b05      	cmp	r3, #5
 800141c:	d117      	bne.n	800144e <vall_menus_handler+0x336>
		{
			// Averiguamos que botón fue presionado y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_UP)
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d103      	bne.n	800142c <vall_menus_handler+0x314>
				display_state = Data_3;
 8001424:	4ba1      	ldr	r3, [pc, #644]	; (80016ac <vall_menus_handler+0x594>)
 8001426:	2204      	movs	r2, #4
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	e6c8      	b.n	80011be <vall_menus_handler+0xa6>
			else if(cmd_addr == BUTTON_DOWN)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d103      	bne.n	800143a <vall_menus_handler+0x322>
				display_state = Data_5;
 8001432:	4b9e      	ldr	r3, [pc, #632]	; (80016ac <vall_menus_handler+0x594>)
 8001434:	2206      	movs	r2, #6
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e6c1      	b.n	80011be <vall_menus_handler+0xa6>
			else if(cmd_addr == BACK)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b04      	cmp	r3, #4
 800143e:	f47f aebe 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				// Retorno a main_handler
				data_to_main_plus(msg_menu, msg_menu_2, msg);
 8001442:	6a3a      	ldr	r2, [r7, #32]
 8001444:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001446:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001448:	f000 fcae 	bl	8001da8 <data_to_main_plus>
 800144c:	e6b7      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == Data_5)
 800144e:	4b97      	ldr	r3, [pc, #604]	; (80016ac <vall_menus_handler+0x594>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b06      	cmp	r3, #6
 8001454:	d110      	bne.n	8001478 <vall_menus_handler+0x360>
		{
			// Averiguamos que botón fue presionado y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_UP)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d103      	bne.n	8001464 <vall_menus_handler+0x34c>
				display_state = Data_4;
 800145c:	4b93      	ldr	r3, [pc, #588]	; (80016ac <vall_menus_handler+0x594>)
 800145e:	2205      	movs	r2, #5
 8001460:	701a      	strb	r2, [r3, #0]
 8001462:	e6ac      	b.n	80011be <vall_menus_handler+0xa6>
			else if(cmd_addr == BACK)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b04      	cmp	r3, #4
 8001468:	f47f aea9 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				// Retorno a main_handler
				data_to_main_plus(msg_menu, msg_menu_2, msg);
 800146c:	6a3a      	ldr	r2, [r7, #32]
 800146e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001470:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001472:	f000 fc99 	bl	8001da8 <data_to_main_plus>
 8001476:	e6a2      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == AGM_1)
 8001478:	4b8c      	ldr	r3, [pc, #560]	; (80016ac <vall_menus_handler+0x594>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b09      	cmp	r3, #9
 800147e:	d139      	bne.n	80014f4 <vall_menus_handler+0x3dc>
		{
			// Averiguamos que botón fue presionado, luego imprimimos la pantalla correspondiente
			// y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_DOWN)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d106      	bne.n	8001494 <vall_menus_handler+0x37c>
			{
				change_display_state(msg_conf_agm_adc_3, msg_conf_agm_adc_4, msg, AGM_2);
 8001486:	230a      	movs	r3, #10
 8001488:	6a3a      	ldr	r2, [r7, #32]
 800148a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800148c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800148e:	f000 ff95 	bl	80023bc <change_display_state>
 8001492:	e694      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == ENTER)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d121      	bne.n	80014de <vall_menus_handler+0x3c6>
			{
				// Desactivamos los botones mientras mostramos el mensaje de activado
				desactivar_botones();
 800149a:	f000 fca7 	bl	8001dec <desactivar_botones>
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2201      	movs	r2, #1
 80014a6:	2100      	movs	r1, #0
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f909 	bl	80016c0 <send_to_lcd>
				send_to_lcd(1, 1, LCD_WRITE, msg_conf_agm_act, msg);
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b4:	2202      	movs	r2, #2
 80014b6:	2101      	movs	r1, #1
 80014b8:	2001      	movs	r0, #1
 80014ba:	f000 f901 	bl	80016c0 <send_to_lcd>
				// Actualizamos el estado AGM a activado
				state_agm = SET;
 80014be:	4b7c      	ldr	r3, [pc, #496]	; (80016b0 <vall_menus_handler+0x598>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
				// Delay de 2s
				vTaskDelay(pdMS_TO_TICKS(2000));
 80014c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c8:	f009 fccc 	bl	800ae64 <vTaskDelay>
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 80014cc:	2307      	movs	r3, #7
 80014ce:	6a3a      	ldr	r2, [r7, #32]
 80014d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80014d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80014d4:	f000 ff72 	bl	80023bc <change_display_state>
				// Volvemos a activar los botones
				activar_botones();
 80014d8:	f000 fc98 	bl	8001e0c <activar_botones>
 80014dc:	e66f      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == BACK)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	f47f ae6c 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 80014e6:	2307      	movs	r3, #7
 80014e8:	6a3a      	ldr	r2, [r7, #32]
 80014ea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80014ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80014ee:	f000 ff65 	bl	80023bc <change_display_state>
 80014f2:	e664      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == AGM_2)
 80014f4:	4b6d      	ldr	r3, [pc, #436]	; (80016ac <vall_menus_handler+0x594>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b0a      	cmp	r3, #10
 80014fa:	d139      	bne.n	8001570 <vall_menus_handler+0x458>
		{
			// Averiguamos que botón fue presionado, luego imprimimos la pantalla correspondiente
			// y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_UP)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d106      	bne.n	8001510 <vall_menus_handler+0x3f8>
			{
				change_display_state(msg_conf_agm_adc, msg_conf_agm_adc_2, msg, AGM_1);
 8001502:	2309      	movs	r3, #9
 8001504:	6a3a      	ldr	r2, [r7, #32]
 8001506:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001508:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800150a:	f000 ff57 	bl	80023bc <change_display_state>
 800150e:	e656      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == ENTER)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d121      	bne.n	800155a <vall_menus_handler+0x442>
			{
				// Desactivamos los botones mientras mostramos el mensaje de desactivado
				desactivar_botones();
 8001516:	f000 fc69 	bl	8001dec <desactivar_botones>
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2300      	movs	r3, #0
 8001520:	2201      	movs	r2, #1
 8001522:	2100      	movs	r1, #0
 8001524:	2000      	movs	r0, #0
 8001526:	f000 f8cb 	bl	80016c0 <send_to_lcd>
				send_to_lcd(1, 1, LCD_WRITE, msg_conf_agm_des, msg);
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	2202      	movs	r2, #2
 8001532:	2101      	movs	r1, #1
 8001534:	2001      	movs	r0, #1
 8001536:	f000 f8c3 	bl	80016c0 <send_to_lcd>
				// Actualizamos el estado AGM a desactivado
				state_agm = RESET;
 800153a:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <vall_menus_handler+0x598>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
				// Delay de 2s
				vTaskDelay(pdMS_TO_TICKS(2000));
 8001540:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001544:	f009 fc8e 	bl	800ae64 <vTaskDelay>
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 8001548:	2307      	movs	r3, #7
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800154e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001550:	f000 ff34 	bl	80023bc <change_display_state>
				// Volvemos a activar los botones
				activar_botones();
 8001554:	f000 fc5a 	bl	8001e0c <activar_botones>
 8001558:	e631      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == BACK)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b04      	cmp	r3, #4
 800155e:	f47f ae2e 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 8001562:	2307      	movs	r3, #7
 8001564:	6a3a      	ldr	r2, [r7, #32]
 8001566:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001568:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800156a:	f000 ff27 	bl	80023bc <change_display_state>
 800156e:	e626      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == ADC_1)
 8001570:	4b4e      	ldr	r3, [pc, #312]	; (80016ac <vall_menus_handler+0x594>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b0b      	cmp	r3, #11
 8001576:	d149      	bne.n	800160c <vall_menus_handler+0x4f4>
		{
			// Averiguamos que botón fue presionado, luego imprimimos la pantalla correspondiente
			// y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_DOWN)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d106      	bne.n	800158c <vall_menus_handler+0x474>
			{
				change_display_state(msg_conf_agm_adc_3, msg_conf_agm_adc_4, msg, ADC_2);
 800157e:	230c      	movs	r3, #12
 8001580:	6a3a      	ldr	r2, [r7, #32]
 8001582:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001584:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001586:	f000 ff19 	bl	80023bc <change_display_state>
 800158a:	e618      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == ENTER)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d131      	bne.n	80015f6 <vall_menus_handler+0x4de>
			{
				// Desactivamos los botones mientras mostramos el mensaje de activado
				desactivar_botones();
 8001592:	f000 fc2b 	bl	8001dec <desactivar_botones>
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2300      	movs	r3, #0
 800159c:	2201      	movs	r2, #1
 800159e:	2100      	movs	r1, #0
 80015a0:	2000      	movs	r0, #0
 80015a2:	f000 f88d 	bl	80016c0 <send_to_lcd>
				send_to_lcd(1, 1, LCD_WRITE, msg_conf_adc_act, msg);
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	2202      	movs	r2, #2
 80015ae:	2101      	movs	r1, #1
 80015b0:	2001      	movs	r0, #1
 80015b2:	f000 f885 	bl	80016c0 <send_to_lcd>
				// Actualizamos el estado adc
				state_adc_pwm = SET;
 80015b6:	4b3f      	ldr	r3, [pc, #252]	; (80016b4 <vall_menus_handler+0x59c>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
				// Activamos el motor y el PWM
				HAL_GPIO_WritePin(Pin_Motor_1_GPIO_Port, Pin_Motor_1_Pin, GPIO_PIN_SET);
 80015bc:	2201      	movs	r2, #1
 80015be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c2:	483d      	ldr	r0, [pc, #244]	; (80016b8 <vall_menus_handler+0x5a0>)
 80015c4:	f003 fd52 	bl	800506c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Pin_Motor_1_GPIO_Port, Pin_Motor_2_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ce:	483a      	ldr	r0, [pc, #232]	; (80016b8 <vall_menus_handler+0x5a0>)
 80015d0:	f003 fd4c 	bl	800506c <HAL_GPIO_WritePin>
				HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015d4:	2100      	movs	r1, #0
 80015d6:	4839      	ldr	r0, [pc, #228]	; (80016bc <vall_menus_handler+0x5a4>)
 80015d8:	f006 fbea 	bl	8007db0 <HAL_TIM_PWM_Start>
				// Delay de 2s
				vTaskDelay(pdMS_TO_TICKS(2000));
 80015dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015e0:	f009 fc40 	bl	800ae64 <vTaskDelay>
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 80015e4:	2307      	movs	r3, #7
 80015e6:	6a3a      	ldr	r2, [r7, #32]
 80015e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80015ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80015ec:	f000 fee6 	bl	80023bc <change_display_state>
				// Volvemos a activar los botones
				activar_botones();
 80015f0:	f000 fc0c 	bl	8001e0c <activar_botones>
 80015f4:	e5e3      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == BACK)
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	f47f ade0 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 80015fe:	2307      	movs	r3, #7
 8001600:	6a3a      	ldr	r2, [r7, #32]
 8001602:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001604:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001606:	f000 fed9 	bl	80023bc <change_display_state>
 800160a:	e5d8      	b.n	80011be <vall_menus_handler+0xa6>
			}
		}else if(display_state == ADC_2)
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <vall_menus_handler+0x594>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b0c      	cmp	r3, #12
 8001612:	f47f add4 	bne.w	80011be <vall_menus_handler+0xa6>
		{
			// Averiguamos que botón fue presionado, luego imprimimos la pantalla correspondiente
			// y actualizamos el estado de la pantalla
			if(cmd_addr == BUTTON_UP)
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <vall_menus_handler+0x512>
			{
				change_display_state(msg_conf_agm_adc, msg_conf_agm_adc_2, msg, ADC_1);
 800161c:	230b      	movs	r3, #11
 800161e:	6a3a      	ldr	r2, [r7, #32]
 8001620:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001622:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001624:	f000 feca 	bl	80023bc <change_display_state>
 8001628:	e5c9      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == ENTER)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d131      	bne.n	8001694 <vall_menus_handler+0x57c>
			{
				// Desactivamos los botones mientras mostramos el mensaje de desactivado
				desactivar_botones();
 8001630:	f000 fbdc 	bl	8001dec <desactivar_botones>
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 8001634:	6a3b      	ldr	r3, [r7, #32]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	2201      	movs	r2, #1
 800163c:	2100      	movs	r1, #0
 800163e:	2000      	movs	r0, #0
 8001640:	f000 f83e 	bl	80016c0 <send_to_lcd>
				send_to_lcd(1, 1, LCD_WRITE, msg_conf_adc_des, msg);
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	2202      	movs	r2, #2
 800164c:	2101      	movs	r1, #1
 800164e:	2001      	movs	r0, #1
 8001650:	f000 f836 	bl	80016c0 <send_to_lcd>
				// Actualizamos el estado adc
				state_adc_pwm = RESET;
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <vall_menus_handler+0x59c>)
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
				// Desactivamos el motor y el PWM
				HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800165a:	2100      	movs	r1, #0
 800165c:	4817      	ldr	r0, [pc, #92]	; (80016bc <vall_menus_handler+0x5a4>)
 800165e:	f006 fc6f 	bl	8007f40 <HAL_TIM_PWM_Stop>
				HAL_GPIO_WritePin(Pin_Motor_1_GPIO_Port, Pin_Motor_1_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <vall_menus_handler+0x5a0>)
 800166a:	f003 fcff 	bl	800506c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Pin_Motor_1_GPIO_Port, Pin_Motor_2_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001674:	4810      	ldr	r0, [pc, #64]	; (80016b8 <vall_menus_handler+0x5a0>)
 8001676:	f003 fcf9 	bl	800506c <HAL_GPIO_WritePin>
				// Delay de 2s
				vTaskDelay(pdMS_TO_TICKS(2000));
 800167a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800167e:	f009 fbf1 	bl	800ae64 <vTaskDelay>
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 8001682:	2307      	movs	r3, #7
 8001684:	6a3a      	ldr	r2, [r7, #32]
 8001686:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001688:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800168a:	f000 fe97 	bl	80023bc <change_display_state>
				// Volvemos a activar los botones
				activar_botones();
 800168e:	f000 fbbd 	bl	8001e0c <activar_botones>
 8001692:	e594      	b.n	80011be <vall_menus_handler+0xa6>
			}else if(cmd_addr == BACK)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	2b04      	cmp	r3, #4
 8001698:	f47f ad91 	bne.w	80011be <vall_menus_handler+0xa6>
			{
				change_display_state(msg_conf, msg_conf_2, msg, Configuration_1);
 800169c:	2307      	movs	r3, #7
 800169e:	6a3a      	ldr	r2, [r7, #32]
 80016a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80016a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80016a4:	f000 fe8a 	bl	80023bc <change_display_state>
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80016a8:	e589      	b.n	80011be <vall_menus_handler+0xa6>
 80016aa:	bf00      	nop
 80016ac:	200002e1 	.word	0x200002e1
 80016b0:	200002df 	.word	0x200002df
 80016b4:	200002e0 	.word	0x200002e0
 80016b8:	40020800 	.word	0x40020800
 80016bc:	2001aa54 	.word	0x2001aa54

080016c0 <send_to_lcd>:
}


// Función para enviar datos de una tarea a la tarea print_LCD
void send_to_lcd(uint8_t fila, uint8_t columna, uint8_t function, char *data, cadena_lcd_t *msg)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	460b      	mov	r3, r1
 80016ce:	71bb      	strb	r3, [r7, #6]
 80016d0:	4613      	mov	r3, r2
 80016d2:	717b      	strb	r3, [r7, #5]
	// Tomamos el semaforo
	xSemaphoreTake(sema_lcd, portMAX_DELAY);
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <send_to_lcd+0xbc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	4618      	mov	r0, r3
 80016de:	f008 fea1 	bl	800a424 <xQueueSemaphoreTake>

	// Averiguamos que función se solicita y de acuerdo a eso enviamos los datos necesarios por la queue
	if(function == LCD_CLEAR)
 80016e2:	797b      	ldrb	r3, [r7, #5]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10c      	bne.n	8001702 <send_to_lcd+0x42>
	{
		msg->function = LCD_CLEAR;
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2201      	movs	r2, #1
 80016ec:	74da      	strb	r2, [r3, #19]
		xQueueSend(q_print_lcd, &msg, portMAX_DELAY);
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <send_to_lcd+0xc0>)
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	2300      	movs	r3, #0
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	f107 0110 	add.w	r1, r7, #16
 80016fc:	f008 faee 	bl	8009cdc <xQueueGenericSend>
	}else
	{
		// Si la función es erronea, devolvemos el semaforo
		xSemaphoreGive(sema_lcd);
	}
}
 8001700:	e038      	b.n	8001774 <send_to_lcd+0xb4>
	}else if(function == LCD_POSITION)
 8001702:	797b      	ldrb	r3, [r7, #5]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d112      	bne.n	800172e <send_to_lcd+0x6e>
		msg->fila = fila;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	745a      	strb	r2, [r3, #17]
		msg->columna = columna;
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	79ba      	ldrb	r2, [r7, #6]
 8001712:	749a      	strb	r2, [r3, #18]
		msg->function = LCD_POSITION;
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2203      	movs	r2, #3
 8001718:	74da      	strb	r2, [r3, #19]
		xQueueSend(q_print_lcd, &msg, portMAX_DELAY);
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <send_to_lcd+0xc0>)
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	f107 0110 	add.w	r1, r7, #16
 8001728:	f008 fad8 	bl	8009cdc <xQueueGenericSend>
}
 800172c:	e022      	b.n	8001774 <send_to_lcd+0xb4>
	}else if(function == LCD_WRITE)
 800172e:	797b      	ldrb	r3, [r7, #5]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d118      	bne.n	8001766 <send_to_lcd+0xa6>
		msg->fila = fila;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	745a      	strb	r2, [r3, #17]
		msg->columna = columna;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	79ba      	ldrb	r2, [r7, #6]
 800173e:	749a      	strb	r2, [r3, #18]
		msg->function = LCD_WRITE;
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2202      	movs	r2, #2
 8001744:	74da      	strb	r2, [r3, #19]
		sprintf(msg->msg, "%s", data);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <send_to_lcd+0xc4>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00e ff05 	bl	801055c <siprintf>
		xQueueSend(q_print_lcd, &msg, portMAX_DELAY);
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <send_to_lcd+0xc0>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	2300      	movs	r3, #0
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	f107 0110 	add.w	r1, r7, #16
 8001760:	f008 fabc 	bl	8009cdc <xQueueGenericSend>
}
 8001764:	e006      	b.n	8001774 <send_to_lcd+0xb4>
		xSemaphoreGive(sema_lcd);
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <send_to_lcd+0xbc>)
 8001768:	6818      	ldr	r0, [r3, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	f008 fab4 	bl	8009cdc <xQueueGenericSend>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2001ab48 	.word	0x2001ab48
 8001780:	2001aa48 	.word	0x2001aa48
 8001784:	08012a84 	.word	0x08012a84

08001788 <process_command>:

// Función para procesar los comandos recibidos por el puerto UART
static void process_command(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
	command_t cmd;
	char pwm_char[12];

	// Extraemos el comando en la estructura cmd
	extract_command(&cmd);
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f84c 	bl	8001830 <extract_command>
	// Extraemos los 1ros 8 caracteres en la cadena pwm_char
	snprintf(pwm_char, 8, "%s", cmd.payload);
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	1d38      	adds	r0, r7, #4
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <process_command+0x94>)
 80017a0:	2108      	movs	r1, #8
 80017a2:	f00e fea7 	bl	80104f4 <sniprintf>
	pwm_char[8] = '\0';
 80017a6:	2300      	movs	r3, #0
 80017a8:	733b      	strb	r3, [r7, #12]

	// Averiguamos si coincide con uno de los comandos permitidos y procesamos de acuerdo a ello
	if(! strcmp((char*)cmd.payload, "CG"))
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	491c      	ldr	r1, [pc, #112]	; (8001820 <process_command+0x98>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fd77 	bl	80002a4 <strcmp>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <process_command+0x3a>
		cambio_giro_motor();
 80017bc:	f000 fb52 	bl	8001e64 <cambio_giro_motor>
		active_pwm_pot();
	else if(! strcmp((char*)pwm_char, "PWM EXT"))
		conf_pwm_ext(&cmd);
	else
		send_data_inv();
}
 80017c0:	e027      	b.n	8001812 <process_command+0x8a>
	else if(! strcmp((char*)cmd.payload, "LEER DATOS"))
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4917      	ldr	r1, [pc, #92]	; (8001824 <process_command+0x9c>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fd6b 	bl	80002a4 <strcmp>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <process_command+0x52>
		read_send_datos();
 80017d4:	f000 fb84 	bl	8001ee0 <read_send_datos>
}
 80017d8:	e01b      	b.n	8001812 <process_command+0x8a>
	else if(! strcmp((char*)cmd.payload, "PWM POT"))
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4912      	ldr	r1, [pc, #72]	; (8001828 <process_command+0xa0>)
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd5f 	bl	80002a4 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <process_command+0x6a>
		active_pwm_pot();
 80017ec:	f000 fd1e 	bl	800222c <active_pwm_pot>
}
 80017f0:	e00f      	b.n	8001812 <process_command+0x8a>
	else if(! strcmp((char*)pwm_char, "PWM EXT"))
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	490d      	ldr	r1, [pc, #52]	; (800182c <process_command+0xa4>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fd54 	bl	80002a4 <strcmp>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <process_command+0x86>
		conf_pwm_ext(&cmd);
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4618      	mov	r0, r3
 8001808:	f000 fd30 	bl	800226c <conf_pwm_ext>
}
 800180c:	e001      	b.n	8001812 <process_command+0x8a>
		send_data_inv();
 800180e:	f000 fdbb 	bl	8002388 <send_data_inv>
}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	08012a84 	.word	0x08012a84
 8001820:	08012a88 	.word	0x08012a88
 8001824:	08012a8c 	.word	0x08012a8c
 8001828:	08012a98 	.word	0x08012a98
 800182c:	08012aa0 	.word	0x08012aa0

08001830 <extract_command>:

// Función que extrae los comandos recibidos por el puerto UART, y los guarda en la estructura cmd
static int extract_command(command_t *cmd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	// Preguntamos si hay un mensaje esperando en la queue, si no hay retornamos
	status = uxQueueMessagesWaiting(q_data_uart);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <extract_command+0x70>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f008 ffda 	bl	800a7f6 <uxQueueMessagesWaiting>
 8001842:	4603      	mov	r3, r0
 8001844:	613b      	str	r3, [r7, #16]
	if(!status)	return -1;
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d102      	bne.n	8001852 <extract_command+0x22>
 800184c:	f04f 33ff 	mov.w	r3, #4294967295
 8001850:	e022      	b.n	8001898 <extract_command+0x68>

	// Si hay un mensaje, lo almacenamos en cmd.payload y su longitud en cmd.len
	uint8_t i = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data_uart, &item, 0);
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <extract_command+0x70>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f107 010f 	add.w	r1, r7, #15
 800185e:	2200      	movs	r2, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f008 fccf 	bl	800a204 <xQueueReceive>
 8001866:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)	cmd->payload[i++] = item;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d106      	bne.n	800187c <extract_command+0x4c>
 800186e:	7dfb      	ldrb	r3, [r7, #23]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	75fa      	strb	r2, [r7, #23]
 8001874:	461a      	mov	r2, r3
 8001876:	7bf9      	ldrb	r1, [r7, #15]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	2b0a      	cmp	r3, #10
 8001880:	d1e9      	bne.n	8001856 <extract_command+0x26>

	cmd->payload[i - 1] = '\0';
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	3b01      	subs	r3, #1
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	2100      	movs	r1, #0
 800188a:	54d1      	strb	r1, [r2, r3]
	cmd->len = i - 1;			// save length of the command excluding null char
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	3b01      	subs	r3, #1
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60da      	str	r2, [r3, #12]

	return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2001aa4c 	.word	0x2001aa4c

080018a4 <Acel_Init>:

// Función para inicializar el acelerómetro
void Acel_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af02      	add	r7, sp, #8
	uint8_t Data_write[2], Data_receive;
	Data_write[0] = ACEL_POWER_CTL;
 80018aa:	232d      	movs	r3, #45	; 0x2d
 80018ac:	713b      	strb	r3, [r7, #4]

	// Leemos el bit de medicion
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ACELER_ADDR, Data_write, 1, I2C_FIRST_FRAME) != HAL_OK);
 80018ae:	bf00      	nop
 80018b0:	1d3a      	adds	r2, r7, #4
 80018b2:	2301      	movs	r3, #1
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2301      	movs	r3, #1
 80018b8:	21a6      	movs	r1, #166	; 0xa6
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <Acel_Init+0x68>)
 80018bc:	f003 fd66 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f4      	bne.n	80018b0 <Acel_Init+0xc>
	while( HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ACELER_ADDR, &Data_receive, 1, I2C_LAST_FRAME) != HAL_OK);
 80018c6:	bf00      	nop
 80018c8:	1cfa      	adds	r2, r7, #3
 80018ca:	2320      	movs	r3, #32
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	21a6      	movs	r1, #166	; 0xa6
 80018d2:	480e      	ldr	r0, [pc, #56]	; (800190c <Acel_Init+0x68>)
 80018d4:	f003 fe20 	bl	8005518 <HAL_I2C_Master_Seq_Receive_IT>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f4      	bne.n	80018c8 <Acel_Init+0x24>

	// Activamos la medicion, measure_bit = 1
	Data_write[1] = (Data_receive | 0x08);
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	717b      	strb	r3, [r7, #5]
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ACELER_ADDR, Data_write, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK);
 80018e8:	bf00      	nop
 80018ea:	1d3a      	adds	r2, r7, #4
 80018ec:	2308      	movs	r3, #8
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2302      	movs	r3, #2
 80018f2:	21a6      	movs	r1, #166	; 0xa6
 80018f4:	4805      	ldr	r0, [pc, #20]	; (800190c <Acel_Init+0x68>)
 80018f6:	f003 fd49 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f4      	bne.n	80018ea <Acel_Init+0x46>
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2001aa9c 	.word	0x2001aa9c

08001910 <Gyro_Init>:

// Función para inicializar el giroscopio
void Gyro_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af02      	add	r7, sp, #8
	uint8_t Data_write[2];

	// Write in PWR_MGM address
	Data_write[0] = GYRO_PWR_MGM;
 8001916:	233e      	movs	r3, #62	; 0x3e
 8001918:	713b      	strb	r3, [r7, #4]
	Data_write[1] = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	717b      	strb	r3, [r7, #5]
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, GYRO_ADDR, Data_write, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK);
 800191e:	bf00      	nop
 8001920:	1d3a      	adds	r2, r7, #4
 8001922:	2308      	movs	r3, #8
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2302      	movs	r3, #2
 8001928:	21d0      	movs	r1, #208	; 0xd0
 800192a:	481d      	ldr	r0, [pc, #116]	; (80019a0 <Gyro_Init+0x90>)
 800192c:	f003 fd2e 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f4      	bne.n	8001920 <Gyro_Init+0x10>

	// Write in SMPLRT_DIV address
	Data_write[0] = GYRO_SMPLRT_DIV;
 8001936:	2315      	movs	r3, #21
 8001938:	713b      	strb	r3, [r7, #4]
	Data_write[1] = 0x07;
 800193a:	2307      	movs	r3, #7
 800193c:	717b      	strb	r3, [r7, #5]
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, GYRO_ADDR, Data_write, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK);
 800193e:	bf00      	nop
 8001940:	1d3a      	adds	r2, r7, #4
 8001942:	2308      	movs	r3, #8
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2302      	movs	r3, #2
 8001948:	21d0      	movs	r1, #208	; 0xd0
 800194a:	4815      	ldr	r0, [pc, #84]	; (80019a0 <Gyro_Init+0x90>)
 800194c:	f003 fd1e 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f4      	bne.n	8001940 <Gyro_Init+0x30>

	// Write in DLPF_FS address
	Data_write[0] = GYRO_DLPF_FS;
 8001956:	2316      	movs	r3, #22
 8001958:	713b      	strb	r3, [r7, #4]
	Data_write[1] = 0x1E;
 800195a:	231e      	movs	r3, #30
 800195c:	717b      	strb	r3, [r7, #5]
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, GYRO_ADDR, Data_write, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK);
 800195e:	bf00      	nop
 8001960:	1d3a      	adds	r2, r7, #4
 8001962:	2308      	movs	r3, #8
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2302      	movs	r3, #2
 8001968:	21d0      	movs	r1, #208	; 0xd0
 800196a:	480d      	ldr	r0, [pc, #52]	; (80019a0 <Gyro_Init+0x90>)
 800196c:	f003 fd0e 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f4      	bne.n	8001960 <Gyro_Init+0x50>

	// Write in INT_CFG address
	Data_write[0] = GYRO_INT_CFG;
 8001976:	2317      	movs	r3, #23
 8001978:	713b      	strb	r3, [r7, #4]
	Data_write[1] = 0x00;
 800197a:	2300      	movs	r3, #0
 800197c:	717b      	strb	r3, [r7, #5]
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, GYRO_ADDR, Data_write, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK);
 800197e:	bf00      	nop
 8001980:	1d3a      	adds	r2, r7, #4
 8001982:	2308      	movs	r3, #8
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2302      	movs	r3, #2
 8001988:	21d0      	movs	r1, #208	; 0xd0
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <Gyro_Init+0x90>)
 800198c:	f003 fcfe 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f4      	bne.n	8001980 <Gyro_Init+0x70>
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	2001aa9c 	.word	0x2001aa9c

080019a4 <Mag_Init>:

// Función para inicializar el magnetómetro
void Mag_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af02      	add	r7, sp, #8
	uint8_t Data_write[2];

	// Write in CF_REG_A address
	Data_write[0] = MAG_CF_REG_A;
 80019aa:	2300      	movs	r3, #0
 80019ac:	713b      	strb	r3, [r7, #4]
	Data_write[1] = 0x18;
 80019ae:	2318      	movs	r3, #24
 80019b0:	717b      	strb	r3, [r7, #5]
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, MAG_ADDR, Data_write, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK);
 80019b2:	bf00      	nop
 80019b4:	1d3a      	adds	r2, r7, #4
 80019b6:	2308      	movs	r3, #8
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2302      	movs	r3, #2
 80019bc:	213c      	movs	r1, #60	; 0x3c
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <Mag_Init+0x50>)
 80019c0:	f003 fce4 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f4      	bne.n	80019b4 <Mag_Init+0x10>

	// Write in MOD_REG address
	Data_write[0] = MAG_MOD_REG;
 80019ca:	2302      	movs	r3, #2
 80019cc:	713b      	strb	r3, [r7, #4]
	Data_write[1] = 0x00;
 80019ce:	2300      	movs	r3, #0
 80019d0:	717b      	strb	r3, [r7, #5]
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, MAG_ADDR, Data_write, 2, I2C_FIRST_AND_LAST_FRAME) != HAL_OK);
 80019d2:	bf00      	nop
 80019d4:	1d3a      	adds	r2, r7, #4
 80019d6:	2308      	movs	r3, #8
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2302      	movs	r3, #2
 80019dc:	213c      	movs	r1, #60	; 0x3c
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <Mag_Init+0x50>)
 80019e0:	f003 fcd4 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f4      	bne.n	80019d4 <Mag_Init+0x30>
}
 80019ea:	bf00      	nop
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2001aa9c 	.word	0x2001aa9c

080019f8 <Acel_read_data>:

// Función para leer los datos del acelerómetro
void Acel_read_data(A_M_ejes_t *A_eje)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	6078      	str	r0, [r7, #4]
	uint8_t Reg_address = ACEL_DATA;
 8001a00:	2332      	movs	r3, #50	; 0x32
 8001a02:	757b      	strb	r3, [r7, #21]
	uint8_t Data_axes[6];
	uint16_t dummy;

	// Send the first command to the slave
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, ACELER_ADDR, &Reg_address, 1, I2C_FIRST_FRAME) != HAL_OK);
 8001a04:	bf00      	nop
 8001a06:	f107 0215 	add.w	r2, r7, #21
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	21a6      	movs	r1, #166	; 0xa6
 8001a12:	482d      	ldr	r0, [pc, #180]	; (8001ac8 <Acel_read_data+0xd0>)
 8001a14:	f003 fcba 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f3      	bne.n	8001a06 <Acel_read_data+0xe>

	// Read the data form the slave
	while( HAL_I2C_Master_Seq_Receive_IT(&hi2c1, ACELER_ADDR, Data_axes, 6, I2C_LAST_FRAME) != HAL_OK);
 8001a1e:	bf00      	nop
 8001a20:	f107 020c 	add.w	r2, r7, #12
 8001a24:	2320      	movs	r3, #32
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2306      	movs	r3, #6
 8001a2a:	21a6      	movs	r1, #166	; 0xa6
 8001a2c:	4826      	ldr	r0, [pc, #152]	; (8001ac8 <Acel_read_data+0xd0>)
 8001a2e:	f003 fd73 	bl	8005518 <HAL_I2C_Master_Seq_Receive_IT>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f3      	bne.n	8001a20 <Acel_read_data+0x28>

	// Wait till rx completes
	xSemaphoreTake(sema_i2c_rx_end, portMAX_DELAY);
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <Acel_read_data+0xd4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	4618      	mov	r0, r3
 8001a42:	f008 fcef 	bl	800a424 <xQueueSemaphoreTake>

	// Convierte los datos a su valor real y los almacena en la estructura A_eje
	dummy = (((int16_t)Data_axes[0]) << 8) | ((int16_t)Data_axes[1]);
 8001a46:	7b3b      	ldrb	r3, [r7, #12]
 8001a48:	021b      	lsls	r3, r3, #8
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	7b7b      	ldrb	r3, [r7, #13]
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	4313      	orrs	r3, r2
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	82fb      	strh	r3, [r7, #22]
	A_eje->x = (((float)dummy) / 256);
 8001a56:	8afb      	ldrh	r3, [r7, #22]
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a60:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001ad0 <Acel_read_data+0xd8>
 8001a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	edc3 7a00 	vstr	s15, [r3]
	dummy = (uint16_t)dummy;

	dummy = (((int16_t)Data_axes[2]) << 8) | ((int16_t)Data_axes[3]);
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	82fb      	strh	r3, [r7, #22]
	A_eje->y = (((float)dummy) / 256);
 8001a7e:	8afb      	ldrh	r3, [r7, #22]
 8001a80:	ee07 3a90 	vmov	s15, r3
 8001a84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a88:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001ad0 <Acel_read_data+0xd8>
 8001a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edc3 7a01 	vstr	s15, [r3, #4]
	dummy = (uint16_t)dummy;

	dummy = (((int16_t)Data_axes[4]) << 8) | ((int16_t)Data_axes[5]);
 8001a96:	7c3b      	ldrb	r3, [r7, #16]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	7c7b      	ldrb	r3, [r7, #17]
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b21b      	sxth	r3, r3
 8001aa4:	82fb      	strh	r3, [r7, #22]
	A_eje->z = (((float)dummy) / 256);
 8001aa6:	8afb      	ldrh	r3, [r7, #22]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001ad0 <Acel_read_data+0xd8>
 8001ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2001aa9c 	.word	0x2001aa9c
 8001acc:	2001ab68 	.word	0x2001ab68
 8001ad0:	43800000 	.word	0x43800000

08001ad4 <Gyro_read_data>:

// Función para leer los datos del giroscopio
void Gyro_read_data(G_ejes_t *G_eje)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	6078      	str	r0, [r7, #4]
	uint8_t Reg_address = GYRO_DATA;
 8001adc:	231b      	movs	r3, #27
 8001ade:	757b      	strb	r3, [r7, #21]
	uint8_t Data_axes[8];
	uint16_t dummy;

	// Send the first command to the slave
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, GYRO_ADDR, &Reg_address, 1, I2C_FIRST_FRAME) != HAL_OK);
 8001ae0:	bf00      	nop
 8001ae2:	f107 0215 	add.w	r2, r7, #21
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2301      	movs	r3, #1
 8001aec:	21d0      	movs	r1, #208	; 0xd0
 8001aee:	4839      	ldr	r0, [pc, #228]	; (8001bd4 <Gyro_read_data+0x100>)
 8001af0:	f003 fc4c 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f3      	bne.n	8001ae2 <Gyro_read_data+0xe>

	// Read the data form the slave
	while( HAL_I2C_Master_Seq_Receive_IT(&hi2c1, GYRO_ADDR, Data_axes, 8, I2C_LAST_FRAME) != HAL_OK);
 8001afa:	bf00      	nop
 8001afc:	f107 020c 	add.w	r2, r7, #12
 8001b00:	2320      	movs	r3, #32
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2308      	movs	r3, #8
 8001b06:	21d0      	movs	r1, #208	; 0xd0
 8001b08:	4832      	ldr	r0, [pc, #200]	; (8001bd4 <Gyro_read_data+0x100>)
 8001b0a:	f003 fd05 	bl	8005518 <HAL_I2C_Master_Seq_Receive_IT>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f3      	bne.n	8001afc <Gyro_read_data+0x28>

	// Wait till rx completes
	xSemaphoreTake(sema_i2c_rx_end, portMAX_DELAY);
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <Gyro_read_data+0x104>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 fc81 	bl	800a424 <xQueueSemaphoreTake>

	// Convierte los datos a su valor real y los almacena en la estructura G_eje
	dummy = (((int16_t)Data_axes[0]) << 8) | ((int16_t)Data_axes[1]);
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	7b7b      	ldrb	r3, [r7, #13]
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	82fb      	strh	r3, [r7, #22]
	G_eje->temp = ((((float)dummy) + 13200) / 280);
 8001b32:	8afb      	ldrh	r3, [r7, #22]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001bdc <Gyro_read_data+0x108>
 8001b40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b44:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001be0 <Gyro_read_data+0x10c>
 8001b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	edc3 7a03 	vstr	s15, [r3, #12]
	dummy = (uint16_t)dummy;

	dummy = (((int16_t)Data_axes[2]) << 8) | ((int16_t)Data_axes[3]);
 8001b52:	7bbb      	ldrb	r3, [r7, #14]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	b21a      	sxth	r2, r3
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	82fb      	strh	r3, [r7, #22]
	G_eje->x = (((float)dummy) / 14.375);
 8001b62:	8afb      	ldrh	r3, [r7, #22]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001be4 <Gyro_read_data+0x110>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	edc3 7a00 	vstr	s15, [r3]
	dummy = (uint16_t)dummy;

	dummy = (((int16_t)Data_axes[4]) << 8) | ((int16_t)Data_axes[5]);
 8001b7a:	7c3b      	ldrb	r3, [r7, #16]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	7c7b      	ldrb	r3, [r7, #17]
 8001b82:	b21b      	sxth	r3, r3
 8001b84:	4313      	orrs	r3, r2
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	82fb      	strh	r3, [r7, #22]
	G_eje->y = (((float)dummy) / 14.375);
 8001b8a:	8afb      	ldrh	r3, [r7, #22]
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b94:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001be4 <Gyro_read_data+0x110>
 8001b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	edc3 7a01 	vstr	s15, [r3, #4]
	dummy = (uint16_t)dummy;

	dummy = (((int16_t)Data_axes[6]) << 8) | ((int16_t)Data_axes[7]);
 8001ba2:	7cbb      	ldrb	r3, [r7, #18]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	b21a      	sxth	r2, r3
 8001ba8:	7cfb      	ldrb	r3, [r7, #19]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	4313      	orrs	r3, r2
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	82fb      	strh	r3, [r7, #22]
	G_eje->z = (((float)dummy) / 14.375);
 8001bb2:	8afb      	ldrh	r3, [r7, #22]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bbc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001be4 <Gyro_read_data+0x110>
 8001bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001bca:	bf00      	nop
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2001aa9c 	.word	0x2001aa9c
 8001bd8:	2001ab68 	.word	0x2001ab68
 8001bdc:	464e4000 	.word	0x464e4000
 8001be0:	438c0000 	.word	0x438c0000
 8001be4:	41660000 	.word	0x41660000

08001be8 <Mag_read_data>:

// Función para leer los datos del magnetómetro
void Mag_read_data(A_M_ejes_t *M_eje)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	6078      	str	r0, [r7, #4]
	uint8_t Reg_address = MAG_DATA;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	757b      	strb	r3, [r7, #21]
	uint8_t Data_axes[6];
	uint16_t dummy;

	// Send the first command to the slave
	while( HAL_I2C_Master_Seq_Transmit_IT(&hi2c1, MAG_ADDR, &Reg_address, 1, I2C_FIRST_FRAME) != HAL_OK);
 8001bf4:	bf00      	nop
 8001bf6:	f107 0215 	add.w	r2, r7, #21
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	213c      	movs	r1, #60	; 0x3c
 8001c02:	482d      	ldr	r0, [pc, #180]	; (8001cb8 <Mag_read_data+0xd0>)
 8001c04:	f003 fbc2 	bl	800538c <HAL_I2C_Master_Seq_Transmit_IT>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f3      	bne.n	8001bf6 <Mag_read_data+0xe>

	// Read the data form the slave
	while( HAL_I2C_Master_Seq_Receive_IT(&hi2c1, MAG_ADDR, Data_axes, 6, I2C_LAST_FRAME) != HAL_OK);
 8001c0e:	bf00      	nop
 8001c10:	f107 020c 	add.w	r2, r7, #12
 8001c14:	2320      	movs	r3, #32
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2306      	movs	r3, #6
 8001c1a:	213c      	movs	r1, #60	; 0x3c
 8001c1c:	4826      	ldr	r0, [pc, #152]	; (8001cb8 <Mag_read_data+0xd0>)
 8001c1e:	f003 fc7b 	bl	8005518 <HAL_I2C_Master_Seq_Receive_IT>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f3      	bne.n	8001c10 <Mag_read_data+0x28>

	// Wait till rx completes
	xSemaphoreTake(sema_i2c_rx_end, portMAX_DELAY);
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <Mag_read_data+0xd4>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 fbf7 	bl	800a424 <xQueueSemaphoreTake>

	// Convierte los datos a su valor real y los almacena en la estructura M_eje
	dummy = (((int16_t)Data_axes[0]) << 8) | ((int16_t)Data_axes[1]);
 8001c36:	7b3b      	ldrb	r3, [r7, #12]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	7b7b      	ldrb	r3, [r7, #13]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21b      	sxth	r3, r3
 8001c44:	82fb      	strh	r3, [r7, #22]
	M_eje->x = (((float)dummy) / 1090);
 8001c46:	8afb      	ldrh	r3, [r7, #22]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c50:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001cc0 <Mag_read_data+0xd8>
 8001c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
	dummy = (uint16_t)dummy;

	dummy = (((int16_t)Data_axes[2]) << 8) | ((int16_t)Data_axes[3]);
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	82fb      	strh	r3, [r7, #22]
	M_eje->y = (((float)dummy) / 1090);
 8001c6e:	8afb      	ldrh	r3, [r7, #22]
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c78:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001cc0 <Mag_read_data+0xd8>
 8001c7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	edc3 7a01 	vstr	s15, [r3, #4]
	dummy = (uint16_t)dummy;

	dummy = (((int16_t)Data_axes[4]) << 8) | ((int16_t)Data_axes[5]);
 8001c86:	7c3b      	ldrb	r3, [r7, #16]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	7c7b      	ldrb	r3, [r7, #17]
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	82fb      	strh	r3, [r7, #22]
	M_eje->z = (((float)dummy) / 1090);
 8001c96:	8afb      	ldrh	r3, [r7, #22]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ca0:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001cc0 <Mag_read_data+0xd8>
 8001ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2001aa9c 	.word	0x2001aa9c
 8001cbc:	2001ab68 	.word	0x2001ab68
 8001cc0:	44884000 	.word	0x44884000
 8001cc4:	00000000 	.word	0x00000000

08001cc8 <conv_adc_volt>:

// Función que convierte el valor adc a voltios
float conv_adc_volt(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
	float valor_volt;

	valor_volt = (3.3 * ((float)valor_adc)) / 4095;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <conv_adc_volt+0x70>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	ee07 3a90 	vmov	s15, r3
 8001cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cda:	ee17 0a90 	vmov	r0, s15
 8001cde:	f7fe fcab 	bl	8000638 <__aeabi_f2d>
 8001ce2:	a311      	add	r3, pc, #68	; (adr r3, 8001d28 <conv_adc_volt+0x60>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fcfe 	bl	80006e8 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	a30e      	add	r3, pc, #56	; (adr r3, 8001d30 <conv_adc_volt+0x68>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fe1f 	bl	800093c <__aeabi_ddiv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ffc7 	bl	8000c98 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	607b      	str	r3, [r7, #4]
	valor_adc = (uint32_t)valor_adc;
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <conv_adc_volt+0x70>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <conv_adc_volt+0x70>)
 8001d14:	6013      	str	r3, [r2, #0]

	return valor_volt;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	ee07 3a90 	vmov	s15, r3
}
 8001d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	66666666 	.word	0x66666666
 8001d2c:	400a6666 	.word	0x400a6666
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40affe00 	.word	0x40affe00
 8001d38:	2001abe4 	.word	0x2001abe4
 8001d3c:	00000000 	.word	0x00000000

08001d40 <conv_pwm_ext_volt>:

// Función que convierte el valor pwm recibido por el uart (0 a 100) a voltios
float conv_pwm_ext_volt(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
	float valor_volt;

	valor_volt = (3.3 * ((float)valor_pwm_ext)) / 100;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <conv_pwm_ext_volt+0x60>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d52:	ee17 0a90 	vmov	r0, s15
 8001d56:	f7fe fc6f 	bl	8000638 <__aeabi_f2d>
 8001d5a:	a30f      	add	r3, pc, #60	; (adr r3, 8001d98 <conv_pwm_ext_volt+0x58>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fcc2 	bl	80006e8 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <conv_pwm_ext_volt+0x64>)
 8001d72:	f7fe fde3 	bl	800093c <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff8b 	bl	8000c98 <__aeabi_d2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	607b      	str	r3, [r7, #4]
	//valor_pwm_ext = (uint8_t)valor_pwm_ext;

	return valor_volt;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	ee07 3a90 	vmov	s15, r3
}
 8001d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	66666666 	.word	0x66666666
 8001d9c:	400a6666 	.word	0x400a6666
 8001da0:	2001abb8 	.word	0x2001abb8
 8001da4:	40590000 	.word	0x40590000

08001da8 <data_to_main_plus>:

// Función para retornar de data_handler a main_handler
static void data_to_main_plus(char *msg_menu, char *msg_menu_2, cadena_lcd_t *msg)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	// Detenemos la función timer AGM_ADC_timer
	xTimerStop(AGM_ADC_timer, portMAX_DELAY);
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <data_to_main_plus+0x3c>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	f00a f938 	bl	800c038 <xTimerGenericCommand>
	// reiniciamos el contador y actualizamos el estado de la pantalla
	cont_timer = 0;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <data_to_main_plus+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
	change_display_state(msg_menu, msg_menu_2, msg, Menu_1);
 8001dce:	2300      	movs	r3, #0
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 faf1 	bl	80023bc <change_display_state>
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	2001aaf4 	.word	0x2001aaf4
 8001de8:	200002dc 	.word	0x200002dc

08001dec <desactivar_botones>:

// Función para desactivar las interrupciones de todos los botones
static void desactivar_botones(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001df0:	2006      	movs	r0, #6
 8001df2:	f002 feeb 	bl	8004bcc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001df6:	200a      	movs	r0, #10
 8001df8:	f002 fee8 	bl	8004bcc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001dfc:	2017      	movs	r0, #23
 8001dfe:	f002 fee5 	bl	8004bcc <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001e02:	2028      	movs	r0, #40	; 0x28
 8001e04:	f002 fee2 	bl	8004bcc <HAL_NVIC_DisableIRQ>
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <activar_botones>:

// Función para activar las interrupciones de los botones, limpiando los flags antes de activarlos
static void activar_botones(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <activar_botones+0x54>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8001e16:	2006      	movs	r0, #6
 8001e18:	f002 fee6 	bl	8004be8 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e1c:	2006      	movs	r0, #6
 8001e1e:	f002 fec7 	bl	8004bb0 <HAL_NVIC_EnableIRQ>

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <activar_botones+0x54>)
 8001e24:	2210      	movs	r2, #16
 8001e26:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8001e28:	200a      	movs	r0, #10
 8001e2a:	f002 fedd 	bl	8004be8 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001e2e:	200a      	movs	r0, #10
 8001e30:	f002 febe 	bl	8004bb0 <HAL_NVIC_EnableIRQ>

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <activar_botones+0x54>)
 8001e36:	2240      	movs	r2, #64	; 0x40
 8001e38:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8001e3a:	2017      	movs	r0, #23
 8001e3c:	f002 fed4 	bl	8004be8 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e40:	2017      	movs	r0, #23
 8001e42:	f002 feb5 	bl	8004bb0 <HAL_NVIC_EnableIRQ>

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <activar_botones+0x54>)
 8001e48:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4c:	615a      	str	r2, [r3, #20]
	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8001e4e:	2028      	movs	r0, #40	; 0x28
 8001e50:	f002 feca 	bl	8004be8 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e54:	2028      	movs	r0, #40	; 0x28
 8001e56:	f002 feab 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <cambio_giro_motor>:

// Función para cambiar el giro del motor
void cambio_giro_motor(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
	char *msg_motor = "Giro cambiado\n";
 8001e6a:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <cambio_giro_motor+0x60>)
 8001e6c:	607b      	str	r3, [r7, #4]
	char *msg_motor_dis = "Motor desactivado\n";
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <cambio_giro_motor+0x64>)
 8001e70:	603b      	str	r3, [r7, #0]

	// Averiguamos el estado del PWM
	if(state_adc_pwm == SET)
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <cambio_giro_motor+0x68>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d115      	bne.n	8001ea6 <cambio_giro_motor+0x42>
	{
		// PWM: activado
		// Cambiamos el giro del motor
		HAL_GPIO_TogglePin(Pin_Motor_1_GPIO_Port, Pin_Motor_1_Pin);
 8001e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e7e:	4814      	ldr	r0, [pc, #80]	; (8001ed0 <cambio_giro_motor+0x6c>)
 8001e80:	f003 f90d 	bl	800509e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(Pin_Motor_1_GPIO_Port, Pin_Motor_2_Pin);
 8001e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e88:	4811      	ldr	r0, [pc, #68]	; (8001ed0 <cambio_giro_motor+0x6c>)
 8001e8a:	f003 f908 	bl	800509e <HAL_GPIO_TogglePin>

		// Notificamos el cambio de giro por el UART
		xQueueSend(q_print_uart, &msg_motor, portMAX_DELAY);
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <cambio_giro_motor+0x70>)
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	1d39      	adds	r1, r7, #4
 8001e94:	2300      	movs	r3, #0
 8001e96:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9a:	f007 ff1f 	bl	8009cdc <xQueueGenericSend>
		SEGGER_SYSVIEW_PrintfTarget("Giro cambiado");
 8001e9e:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <cambio_giro_motor+0x74>)
 8001ea0:	f00d fdc0 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
		// PWM: desactivado, no se produce el cambio de giro
		// Notificamos que el motor está desactivado por el UART
		xQueueSend(q_print_uart, &msg_motor_dis, portMAX_DELAY);
		SEGGER_SYSVIEW_PrintfTarget("Motor desactivado");
	}
}
 8001ea4:	e00a      	b.n	8001ebc <cambio_giro_motor+0x58>
		xQueueSend(q_print_uart, &msg_motor_dis, portMAX_DELAY);
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <cambio_giro_motor+0x70>)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	4639      	mov	r1, r7
 8001eac:	2300      	movs	r3, #0
 8001eae:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb2:	f007 ff13 	bl	8009cdc <xQueueGenericSend>
		SEGGER_SYSVIEW_PrintfTarget("Motor desactivado");
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <cambio_giro_motor+0x78>)
 8001eb8:	f00d fdb4 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	08012aa8 	.word	0x08012aa8
 8001ec8:	08012ab8 	.word	0x08012ab8
 8001ecc:	200002e0 	.word	0x200002e0
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	2001aa50 	.word	0x2001aa50
 8001ed8:	08012acc 	.word	0x08012acc
 8001edc:	08012adc 	.word	0x08012adc

08001ee0 <read_send_datos>:

// Función para leer datos de los sensores: adc y AGM, de acuerdo a en qué pantalla estemos
void read_send_datos(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	float valor_volt;

	// Averiguamos si estamos en alguna pantalla de data_handler
	if((display_state != Data_1) && (display_state != Data_2) && (display_state != Data_3) &&
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <read_send_datos+0x70>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d018      	beq.n	8001f20 <read_send_datos+0x40>
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <read_send_datos+0x70>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d014      	beq.n	8001f20 <read_send_datos+0x40>
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <read_send_datos+0x70>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d010      	beq.n	8001f20 <read_send_datos+0x40>
		(display_state != Data_4) && (display_state != Data_5))
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <read_send_datos+0x70>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
	if((display_state != Data_1) && (display_state != Data_2) && (display_state != Data_3) &&
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d00c      	beq.n	8001f20 <read_send_datos+0x40>
		(display_state != Data_4) && (display_state != Data_5))
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <read_send_datos+0x70>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d008      	beq.n	8001f20 <read_send_datos+0x40>
	{
		// No estamos en data_handler
		// leemos los datos de los sensores
		valor_volt = read_sensors();
 8001f0e:	f000 f829 	bl	8001f64 <read_sensors>
 8001f12:	ed87 0a01 	vstr	s0, [r7, #4]

		// Enviamos los datos por el puerto UART
		send_data_uart(valor_volt);
 8001f16:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f1a:	f000 f867 	bl	8001fec <send_data_uart>
			send_agm_uart++;

		if(state_adc_pwm == SET)
			send_adc_uart++;
	}
}
 8001f1e:	e013      	b.n	8001f48 <read_send_datos+0x68>
		if(state_agm == SET)
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <read_send_datos+0x74>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <read_send_datos+0x54>
			send_agm_uart++;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <read_send_datos+0x78>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <read_send_datos+0x78>)
 8001f32:	701a      	strb	r2, [r3, #0]
		if(state_adc_pwm == SET)
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <read_send_datos+0x7c>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d105      	bne.n	8001f48 <read_send_datos+0x68>
			send_adc_uart++;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <read_send_datos+0x80>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <read_send_datos+0x80>)
 8001f46:	701a      	strb	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200002e1 	.word	0x200002e1
 8001f54:	200002df 	.word	0x200002df
 8001f58:	200002dd 	.word	0x200002dd
 8001f5c:	200002e0 	.word	0x200002e0
 8001f60:	200002de 	.word	0x200002de

08001f64 <read_sensors>:

// Función para leer datos de los sensores: adc y AGM
float read_sensors(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
	float valor_volt;

	// Averiguamos que sensores están activos
	if(state_agm == SET)
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <read_sensors+0x68>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <read_sensors+0x20>
	{
		// Sensor AGM: activo, procedemos a leer los datos
		Mag_read_data(&Magne_ejes);
 8001f72:	4817      	ldr	r0, [pc, #92]	; (8001fd0 <read_sensors+0x6c>)
 8001f74:	f7ff fe38 	bl	8001be8 <Mag_read_data>
		Gyro_read_data(&Gyro_ejes);
 8001f78:	4816      	ldr	r0, [pc, #88]	; (8001fd4 <read_sensors+0x70>)
 8001f7a:	f7ff fdab 	bl	8001ad4 <Gyro_read_data>
		Acel_read_data(&Acel_ejes);
 8001f7e:	4816      	ldr	r0, [pc, #88]	; (8001fd8 <read_sensors+0x74>)
 8001f80:	f7ff fd3a 	bl	80019f8 <Acel_read_data>
	}

	if(state_adc_pwm == SET)
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <read_sensors+0x78>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d116      	bne.n	8001fba <read_sensors+0x56>
	{
		// Sensor adc: activo
		// Averiguamos si el PWM se está controlando internamente (con el adc)
		// o externamente (por el puerto UART)
		if(ctrl_pwm == Interno_ADC)
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <read_sensors+0x7c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d10e      	bne.n	8001fb2 <read_sensors+0x4e>
		{
			// control interno (adc)
			// Leemos el puerto adc
			HAL_ADC_Start_IT(&hadc1);
 8001f94:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <read_sensors+0x80>)
 8001f96:	f002 f887 	bl	80040a8 <HAL_ADC_Start_IT>
			xSemaphoreTake(sema_adc, portMAX_DELAY);
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <read_sensors+0x84>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f008 fa3e 	bl	800a424 <xQueueSemaphoreTake>
			valor_volt = conv_adc_volt();
 8001fa8:	f7ff fe8e 	bl	8001cc8 <conv_adc_volt>
 8001fac:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fb0:	e003      	b.n	8001fba <read_sensors+0x56>
		}else
		{
			// control externo (puerto uart)
			// Convertimos el valor recibido por uart (0 a 100) a voltios
			valor_volt = conv_pwm_ext_volt();
 8001fb2:	f7ff fec5 	bl	8001d40 <conv_pwm_ext_volt>
 8001fb6:	ed87 0a01 	vstr	s0, [r7, #4]
		}
	}

	return valor_volt;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	ee07 3a90 	vmov	s15, r3
}
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200002df 	.word	0x200002df
 8001fd0:	2001ab4c 	.word	0x2001ab4c
 8001fd4:	2001abd4 	.word	0x2001abd4
 8001fd8:	2001abc8 	.word	0x2001abc8
 8001fdc:	200002e0 	.word	0x200002e0
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	2001ab00 	.word	0x2001ab00
 8001fe8:	2001aaf0 	.word	0x2001aaf0

08001fec <send_data_uart>:

// Función para enviar los datos de una tarea a la tarea data_out
void send_data_uart(float valor_volt)
{
 8001fec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ff0:	b088      	sub	sp, #32
 8001ff2:	af04      	add	r7, sp, #16
 8001ff4:	ed87 0a01 	vstr	s0, [r7, #4]
	char *msg_sen_dis = "Sensores desactivados\n";
 8001ff8:	4b76      	ldr	r3, [pc, #472]	; (80021d4 <send_data_uart+0x1e8>)
 8001ffa:	60fb      	str	r3, [r7, #12]

	static float valor_volt_imp;
	valor_volt_imp = valor_volt;
 8001ffc:	4a76      	ldr	r2, [pc, #472]	; (80021d8 <send_data_uart+0x1ec>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
	static char *pdata_gyro = data_gyro;
	static char *pdata_mag = data_mag;
	static char *pdata_adc = data_adc;

	// Preguntamos si el sensor AGM está activo
	if(state_agm == SET)
 8002002:	4b76      	ldr	r3, [pc, #472]	; (80021dc <send_data_uart+0x1f0>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	f040 80b0 	bne.w	800216c <send_data_uart+0x180>
	{
		// Sensor AGM: activo,
		// enviamos los datos de AGM a la queue de salida de UART
		sprintf(data_acel, "Acelerometro: x = %.2f, y = %.2f, z = %.2f ", AGM_ejes.Acel_ejes->x, AGM_ejes.Acel_ejes->y, AGM_ejes.Acel_ejes->z);
 800200c:	4b74      	ldr	r3, [pc, #464]	; (80021e0 <send_data_uart+0x1f4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fb10 	bl	8000638 <__aeabi_f2d>
 8002018:	4680      	mov	r8, r0
 800201a:	4689      	mov	r9, r1
 800201c:	4b70      	ldr	r3, [pc, #448]	; (80021e0 <send_data_uart+0x1f4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fb08 	bl	8000638 <__aeabi_f2d>
 8002028:	4604      	mov	r4, r0
 800202a:	460d      	mov	r5, r1
 800202c:	4b6c      	ldr	r3, [pc, #432]	; (80021e0 <send_data_uart+0x1f4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fb00 	bl	8000638 <__aeabi_f2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002040:	e9cd 4500 	strd	r4, r5, [sp]
 8002044:	4642      	mov	r2, r8
 8002046:	464b      	mov	r3, r9
 8002048:	4966      	ldr	r1, [pc, #408]	; (80021e4 <send_data_uart+0x1f8>)
 800204a:	4867      	ldr	r0, [pc, #412]	; (80021e8 <send_data_uart+0x1fc>)
 800204c:	f00e fa86 	bl	801055c <siprintf>
		xQueueSend(q_print_uart, &pdata_acel, portMAX_DELAY);
 8002050:	4b66      	ldr	r3, [pc, #408]	; (80021ec <send_data_uart+0x200>)
 8002052:	6818      	ldr	r0, [r3, #0]
 8002054:	2300      	movs	r3, #0
 8002056:	f04f 32ff 	mov.w	r2, #4294967295
 800205a:	4965      	ldr	r1, [pc, #404]	; (80021f0 <send_data_uart+0x204>)
 800205c:	f007 fe3e 	bl	8009cdc <xQueueGenericSend>

		sprintf(data_gyro, "Giroscopio: x = %.2f, y = %.2f, z = %.2f ", AGM_ejes.Gyro_ejes->x, AGM_ejes.Gyro_ejes->y, AGM_ejes.Gyro_ejes->z);
 8002060:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <send_data_uart+0x1f4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fae6 	bl	8000638 <__aeabi_f2d>
 800206c:	4680      	mov	r8, r0
 800206e:	4689      	mov	r9, r1
 8002070:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <send_data_uart+0x1f4>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fade 	bl	8000638 <__aeabi_f2d>
 800207c:	4604      	mov	r4, r0
 800207e:	460d      	mov	r5, r1
 8002080:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <send_data_uart+0x1f4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fad6 	bl	8000638 <__aeabi_f2d>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002094:	e9cd 4500 	strd	r4, r5, [sp]
 8002098:	4642      	mov	r2, r8
 800209a:	464b      	mov	r3, r9
 800209c:	4955      	ldr	r1, [pc, #340]	; (80021f4 <send_data_uart+0x208>)
 800209e:	4856      	ldr	r0, [pc, #344]	; (80021f8 <send_data_uart+0x20c>)
 80020a0:	f00e fa5c 	bl	801055c <siprintf>
		xQueueSend(q_print_uart, &pdata_gyro, portMAX_DELAY);
 80020a4:	4b51      	ldr	r3, [pc, #324]	; (80021ec <send_data_uart+0x200>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	2300      	movs	r3, #0
 80020aa:	f04f 32ff 	mov.w	r2, #4294967295
 80020ae:	4953      	ldr	r1, [pc, #332]	; (80021fc <send_data_uart+0x210>)
 80020b0:	f007 fe14 	bl	8009cdc <xQueueGenericSend>

		// Dependiendo si adc está activo o no, enviamos la cadena con o sin '\n' al final
		if(state_adc_pwm == SET)
 80020b4:	4b52      	ldr	r3, [pc, #328]	; (8002200 <send_data_uart+0x214>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d12a      	bne.n	8002112 <send_data_uart+0x126>
		{
			sprintf(data_mag, "Magnetometro: x = %.2f, y = %.2f, z = %.2f ", AGM_ejes.Gyro_ejes->x, AGM_ejes.Gyro_ejes->y, AGM_ejes.Gyro_ejes->z);
 80020bc:	4b48      	ldr	r3, [pc, #288]	; (80021e0 <send_data_uart+0x1f4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fab8 	bl	8000638 <__aeabi_f2d>
 80020c8:	4680      	mov	r8, r0
 80020ca:	4689      	mov	r9, r1
 80020cc:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <send_data_uart+0x1f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fab0 	bl	8000638 <__aeabi_f2d>
 80020d8:	4604      	mov	r4, r0
 80020da:	460d      	mov	r5, r1
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <send_data_uart+0x1f4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe faa8 	bl	8000638 <__aeabi_f2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020f0:	e9cd 4500 	strd	r4, r5, [sp]
 80020f4:	4642      	mov	r2, r8
 80020f6:	464b      	mov	r3, r9
 80020f8:	4942      	ldr	r1, [pc, #264]	; (8002204 <send_data_uart+0x218>)
 80020fa:	4843      	ldr	r0, [pc, #268]	; (8002208 <send_data_uart+0x21c>)
 80020fc:	f00e fa2e 	bl	801055c <siprintf>
			xQueueSend(q_print_uart, &pdata_mag, portMAX_DELAY);
 8002100:	4b3a      	ldr	r3, [pc, #232]	; (80021ec <send_data_uart+0x200>)
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	2300      	movs	r3, #0
 8002106:	f04f 32ff 	mov.w	r2, #4294967295
 800210a:	4940      	ldr	r1, [pc, #256]	; (800220c <send_data_uart+0x220>)
 800210c:	f007 fde6 	bl	8009cdc <xQueueGenericSend>
 8002110:	e029      	b.n	8002166 <send_data_uart+0x17a>
		}else
		{
			sprintf(data_mag, "Magnetometro: x = %.2f, y = %.2f, z = %.2f\n", AGM_ejes.Gyro_ejes->x, AGM_ejes.Gyro_ejes->y, AGM_ejes.Gyro_ejes->z);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <send_data_uart+0x1f4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fa8d 	bl	8000638 <__aeabi_f2d>
 800211e:	4680      	mov	r8, r0
 8002120:	4689      	mov	r9, r1
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <send_data_uart+0x1f4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa85 	bl	8000638 <__aeabi_f2d>
 800212e:	4604      	mov	r4, r0
 8002130:	460d      	mov	r5, r1
 8002132:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <send_data_uart+0x1f4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fa7d 	bl	8000638 <__aeabi_f2d>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002146:	e9cd 4500 	strd	r4, r5, [sp]
 800214a:	4642      	mov	r2, r8
 800214c:	464b      	mov	r3, r9
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <send_data_uart+0x224>)
 8002150:	482d      	ldr	r0, [pc, #180]	; (8002208 <send_data_uart+0x21c>)
 8002152:	f00e fa03 	bl	801055c <siprintf>
			xQueueSend(q_print_uart, &pdata_mag, portMAX_DELAY);
 8002156:	4b25      	ldr	r3, [pc, #148]	; (80021ec <send_data_uart+0x200>)
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	2300      	movs	r3, #0
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	492a      	ldr	r1, [pc, #168]	; (800220c <send_data_uart+0x220>)
 8002162:	f007 fdbb 	bl	8009cdc <xQueueGenericSend>
		}

		SEGGER_SYSVIEW_PrintfTarget("Datos AGM enviados");
 8002166:	482b      	ldr	r0, [pc, #172]	; (8002214 <send_data_uart+0x228>)
 8002168:	f00d fc5c 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
	}

	// Preguntamos si el sensor adc está activo
	if(state_adc_pwm == SET)
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <send_data_uart+0x214>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d115      	bne.n	80021a0 <send_data_uart+0x1b4>
	{
		// Sensor ADC: activo,
		// enviamos los datos de ADC a la queue de salida de UART
		sprintf(data_adc, "Voltaje = %.2f\n", valor_volt_imp);
 8002174:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <send_data_uart+0x1ec>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fa5d 	bl	8000638 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4925      	ldr	r1, [pc, #148]	; (8002218 <send_data_uart+0x22c>)
 8002184:	4825      	ldr	r0, [pc, #148]	; (800221c <send_data_uart+0x230>)
 8002186:	f00e f9e9 	bl	801055c <siprintf>
		xQueueSend(q_print_uart, &pdata_adc, portMAX_DELAY);
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <send_data_uart+0x200>)
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	4922      	ldr	r1, [pc, #136]	; (8002220 <send_data_uart+0x234>)
 8002196:	f007 fda1 	bl	8009cdc <xQueueGenericSend>
		SEGGER_SYSVIEW_PrintfTarget("Datos ADC enviados");
 800219a:	4822      	ldr	r0, [pc, #136]	; (8002224 <send_data_uart+0x238>)
 800219c:	f00d fc42 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
	}

	// Si ambos sensores están desactivados enviamos un mensaje de notificación por el puerto UART
	if((state_agm == RESET) && (state_adc_pwm == RESET))
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <send_data_uart+0x1f0>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10f      	bne.n	80021c8 <send_data_uart+0x1dc>
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <send_data_uart+0x214>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <send_data_uart+0x1dc>
	{
		xQueueSend(q_print_uart, &msg_sen_dis, portMAX_DELAY);
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <send_data_uart+0x200>)
 80021b2:	6818      	ldr	r0, [r3, #0]
 80021b4:	f107 010c 	add.w	r1, r7, #12
 80021b8:	2300      	movs	r3, #0
 80021ba:	f04f 32ff 	mov.w	r2, #4294967295
 80021be:	f007 fd8d 	bl	8009cdc <xQueueGenericSend>
		SEGGER_SYSVIEW_PrintfTarget("Sensores desactivados");
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <send_data_uart+0x23c>)
 80021c4:	f00d fc2e 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
	}
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021d2:	bf00      	nop
 80021d4:	08012af0 	.word	0x08012af0
 80021d8:	20000220 	.word	0x20000220
 80021dc:	200002df 	.word	0x200002df
 80021e0:	2001abbc 	.word	0x2001abbc
 80021e4:	08012b08 	.word	0x08012b08
 80021e8:	20000224 	.word	0x20000224
 80021ec:	2001aa50 	.word	0x2001aa50
 80021f0:	20000000 	.word	0x20000000
 80021f4:	08012b34 	.word	0x08012b34
 80021f8:	2000025c 	.word	0x2000025c
 80021fc:	20000004 	.word	0x20000004
 8002200:	200002e0 	.word	0x200002e0
 8002204:	08012b60 	.word	0x08012b60
 8002208:	20000294 	.word	0x20000294
 800220c:	20000008 	.word	0x20000008
 8002210:	08012b8c 	.word	0x08012b8c
 8002214:	08012bb8 	.word	0x08012bb8
 8002218:	08012bcc 	.word	0x08012bcc
 800221c:	200002cc 	.word	0x200002cc
 8002220:	2000000c 	.word	0x2000000c
 8002224:	08012bdc 	.word	0x08012bdc
 8002228:	08012bf0 	.word	0x08012bf0

0800222c <active_pwm_pot>:

// Función para activar el control del PWM internamente (adc)
void active_pwm_pot(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
	char *msg_pwm_pot = "Potenciometro disponible\n";
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <active_pwm_pot+0x30>)
 8002234:	607b      	str	r3, [r7, #4]

	// Actualizamos el control del PWM
	ctrl_pwm = Interno_ADC;
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <active_pwm_pot+0x34>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]

	// Notificamos por el puerto UART
	xQueueSend(q_print_uart, &msg_pwm_pot, portMAX_DELAY);
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <active_pwm_pot+0x38>)
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	1d39      	adds	r1, r7, #4
 8002242:	2300      	movs	r3, #0
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	f007 fd48 	bl	8009cdc <xQueueGenericSend>
	SEGGER_SYSVIEW_PrintfTarget("Potenciometro disponible");
 800224c:	4806      	ldr	r0, [pc, #24]	; (8002268 <active_pwm_pot+0x3c>)
 800224e:	f00d fbe9 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	08012c08 	.word	0x08012c08
 8002260:	20000010 	.word	0x20000010
 8002264:	2001aa50 	.word	0x2001aa50
 8002268:	08012c24 	.word	0x08012c24

0800226c <conf_pwm_ext>:

// Función para activar y configurar el control del PWM externo (puerto uart)
void conf_pwm_ext(command_t *cmd)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	char *msg_pwm_inv = "Valor invalido\n";
 8002274:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <conf_pwm_ext+0xfc>)
 8002276:	60fb      	str	r3, [r7, #12]
	char *msg_pwm_val = "Valor configurado\n";
 8002278:	4b3c      	ldr	r3, [pc, #240]	; (800236c <conf_pwm_ext+0x100>)
 800227a:	60bb      	str	r3, [r7, #8]

	// Actualizamos el control del PWM
	ctrl_pwm = Externo;
 800227c:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <conf_pwm_ext+0x104>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]

	cmd->payload[8] -= 48;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7a1b      	ldrb	r3, [r3, #8]
 8002286:	3b30      	subs	r3, #48	; 0x30
 8002288:	b2da      	uxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	721a      	strb	r2, [r3, #8]
	cmd->payload[9] -= 48;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7a5b      	ldrb	r3, [r3, #9]
 8002292:	3b30      	subs	r3, #48	; 0x30
 8002294:	b2da      	uxtb	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	725a      	strb	r2, [r3, #9]
	cmd->payload[10] -= 48;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7a9b      	ldrb	r3, [r3, #10]
 800229e:	3b30      	subs	r3, #48	; 0x30
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	729a      	strb	r2, [r3, #10]

	// Leemos el valor del PWM EXT enviado
	if(cmd->len == 9)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b09      	cmp	r3, #9
 80022ac:	d104      	bne.n	80022b8 <conf_pwm_ext+0x4c>
		valor_pwm_ext = (uint8_t)cmd->payload[8];
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7a1a      	ldrb	r2, [r3, #8]
 80022b2:	4b30      	ldr	r3, [pc, #192]	; (8002374 <conf_pwm_ext+0x108>)
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e03f      	b.n	8002338 <conf_pwm_ext+0xcc>
	else if(cmd->len == 10)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b0a      	cmp	r3, #10
 80022be:	d10d      	bne.n	80022dc <conf_pwm_ext+0x70>
		valor_pwm_ext = (uint8_t)((10 * cmd->payload[8]) + cmd->payload[9]);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7a1b      	ldrb	r3, [r3, #8]
 80022c4:	461a      	mov	r2, r3
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7a5b      	ldrb	r3, [r3, #9]
 80022d2:	4413      	add	r3, r2
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4b27      	ldr	r3, [pc, #156]	; (8002374 <conf_pwm_ext+0x108>)
 80022d8:	701a      	strb	r2, [r3, #0]
 80022da:	e02d      	b.n	8002338 <conf_pwm_ext+0xcc>
	else if(cmd->len == 11)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b0b      	cmp	r3, #11
 80022e2:	d11c      	bne.n	800231e <conf_pwm_ext+0xb2>
	{
		if((cmd->payload[8] == 1) && (cmd->payload[9] == 0) && (cmd->payload[10] == 0))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7a1b      	ldrb	r3, [r3, #8]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10b      	bne.n	8002304 <conf_pwm_ext+0x98>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7a5b      	ldrb	r3, [r3, #9]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <conf_pwm_ext+0x98>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7a9b      	ldrb	r3, [r3, #10]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d103      	bne.n	8002304 <conf_pwm_ext+0x98>
			valor_pwm_ext = (uint8_t)100;
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <conf_pwm_ext+0x108>)
 80022fe:	2264      	movs	r2, #100	; 0x64
 8002300:	701a      	strb	r2, [r3, #0]
 8002302:	e019      	b.n	8002338 <conf_pwm_ext+0xcc>
		else
		{
			// si el valor no es valido, lo notificamos por el puerto uart y retornamos
			xQueueSend(q_print_uart, &msg_pwm_inv, portMAX_DELAY);
 8002304:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <conf_pwm_ext+0x10c>)
 8002306:	6818      	ldr	r0, [r3, #0]
 8002308:	f107 010c 	add.w	r1, r7, #12
 800230c:	2300      	movs	r3, #0
 800230e:	f04f 32ff 	mov.w	r2, #4294967295
 8002312:	f007 fce3 	bl	8009cdc <xQueueGenericSend>
			SEGGER_SYSVIEW_PrintfTarget("Valor PWM invalido");
 8002316:	4819      	ldr	r0, [pc, #100]	; (800237c <conf_pwm_ext+0x110>)
 8002318:	f00d fb84 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
			return;
 800231c:	e020      	b.n	8002360 <conf_pwm_ext+0xf4>
		}
	}else
	{
		// si el valor no es valido, lo notificamos por el puerto uart y retornamos
		xQueueSend(q_print_uart, &msg_pwm_inv, portMAX_DELAY);
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <conf_pwm_ext+0x10c>)
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	f107 010c 	add.w	r1, r7, #12
 8002326:	2300      	movs	r3, #0
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	f007 fcd6 	bl	8009cdc <xQueueGenericSend>
		SEGGER_SYSVIEW_PrintfTarget("Valor PWM invalido");
 8002330:	4812      	ldr	r0, [pc, #72]	; (800237c <conf_pwm_ext+0x110>)
 8002332:	f00d fb77 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
		return;
 8002336:	e013      	b.n	8002360 <conf_pwm_ext+0xf4>
	}

	// Actualizamos el valor del PWM
	TIM4->CCR1 = (10000 * valor_pwm_ext) / 100;
 8002338:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <conf_pwm_ext+0x108>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	2364      	movs	r3, #100	; 0x64
 8002340:	fb03 f202 	mul.w	r2, r3, r2
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <conf_pwm_ext+0x114>)
 8002346:	635a      	str	r2, [r3, #52]	; 0x34

	// Notificamos por el puerto uart que el PWM se configuró
	xQueueSend(q_print_uart, &msg_pwm_val, portMAX_DELAY);
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <conf_pwm_ext+0x10c>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	f107 0108 	add.w	r1, r7, #8
 8002350:	2300      	movs	r3, #0
 8002352:	f04f 32ff 	mov.w	r2, #4294967295
 8002356:	f007 fcc1 	bl	8009cdc <xQueueGenericSend>
	SEGGER_SYSVIEW_PrintfTarget("Valor PWM configurado");
 800235a:	480a      	ldr	r0, [pc, #40]	; (8002384 <conf_pwm_ext+0x118>)
 800235c:	f00d fb62 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
}
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	08012c40 	.word	0x08012c40
 800236c:	08012c50 	.word	0x08012c50
 8002370:	20000010 	.word	0x20000010
 8002374:	2001abb8 	.word	0x2001abb8
 8002378:	2001aa50 	.word	0x2001aa50
 800237c:	08012c64 	.word	0x08012c64
 8002380:	40000800 	.word	0x40000800
 8002384:	08012c78 	.word	0x08012c78

08002388 <send_data_inv>:

// Función que notifica que el dato recibido es inválido
void send_data_inv(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	char *msg_data_inv = "Dato invalido\n";
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <send_data_inv+0x28>)
 8002390:	607b      	str	r3, [r7, #4]

	xQueueSend(q_print_uart, &msg_data_inv, portMAX_DELAY);
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <send_data_inv+0x2c>)
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	1d39      	adds	r1, r7, #4
 8002398:	2300      	movs	r3, #0
 800239a:	f04f 32ff 	mov.w	r2, #4294967295
 800239e:	f007 fc9d 	bl	8009cdc <xQueueGenericSend>
	SEGGER_SYSVIEW_PrintfTarget("Dato invalido");
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <send_data_inv+0x30>)
 80023a4:	f00d fb3e 	bl	800fa24 <SEGGER_SYSVIEW_PrintfTarget>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	08012c90 	.word	0x08012c90
 80023b4:	2001aa50 	.word	0x2001aa50
 80023b8:	08012ca0 	.word	0x08012ca0

080023bc <change_display_state>:

// Función para cambiar el estado de la pantalla e imprimir el nuevo estado en el LCD
void change_display_state(char *msg_menu, char *msg_menu_2, cadena_lcd_t *msg, state_t display)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
 80023c8:	70fb      	strb	r3, [r7, #3]
	// Limpiamos e imprimimos la nueva pantalla
	send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	2201      	movs	r2, #1
 80023d2:	2100      	movs	r1, #0
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7ff f973 	bl	80016c0 <send_to_lcd>
	send_to_lcd(1, 1, LCD_WRITE, msg_menu, msg);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2202      	movs	r2, #2
 80023e2:	2101      	movs	r1, #1
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7ff f96b 	bl	80016c0 <send_to_lcd>
	send_to_lcd(2, 1, LCD_WRITE, msg_menu_2, msg);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2202      	movs	r2, #2
 80023f2:	2101      	movs	r1, #1
 80023f4:	2002      	movs	r0, #2
 80023f6:	f7ff f963 	bl	80016c0 <send_to_lcd>
	// Cambiamos el estado de la pantalla
	display_state = display;
 80023fa:	4a03      	ldr	r2, [pc, #12]	; (8002408 <change_display_state+0x4c>)
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	7013      	strb	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	200002e1 	.word	0x200002e1

0800240c <lcd_send_command>:
static void lcd_enable(void);
//static void delay_ms(uint32_t cnt);
static void delay_us(uint32_t cnt);

void lcd_send_command(uint8_t cmd)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	71fb      	strb	r3, [r7, #7]
	// RS = 0, for LCD command
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	2101      	movs	r1, #1
 800241a:	480c      	ldr	r0, [pc, #48]	; (800244c <lcd_send_command+0x40>)
 800241c:	f002 fe26 	bl	800506c <HAL_GPIO_WritePin>
	//GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);

	// RW = 0, Writing to LCD
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	2102      	movs	r1, #2
 8002424:	4809      	ldr	r0, [pc, #36]	; (800244c <lcd_send_command+0x40>)
 8002426:	f002 fe21 	bl	800506c <HAL_GPIO_WritePin>
	//GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);

	write_4_bits(cmd >> 4);
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	b2db      	uxtb	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	f000 f8d9 	bl	80025e8 <write_4_bits>
	write_4_bits(cmd & 0x0F);
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f8d2 	bl	80025e8 <write_4_bits>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40020c00 	.word	0x40020c00

08002450 <lcd_send_char>:

void lcd_send_char(uint8_t data)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
	// RS = 1, for LCD user data
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);
 800245a:	2201      	movs	r2, #1
 800245c:	2101      	movs	r1, #1
 800245e:	480c      	ldr	r0, [pc, #48]	; (8002490 <lcd_send_char+0x40>)
 8002460:	f002 fe04 	bl	800506c <HAL_GPIO_WritePin>
	//GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_SET);

	// RW = 0, Writing to LCD
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 8002464:	2200      	movs	r2, #0
 8002466:	2102      	movs	r1, #2
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <lcd_send_char+0x40>)
 800246a:	f002 fdff 	bl	800506c <HAL_GPIO_WritePin>
	//GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);

	write_4_bits(data >> 4);
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	f000 f8b7 	bl	80025e8 <write_4_bits>
	write_4_bits(data & 0x0F);
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	b2db      	uxtb	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f8b0 	bl	80025e8 <write_4_bits>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40020c00 	.word	0x40020c00

08002494 <lcd_init>:

void lcd_init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
	// 1. Configure the GPIO pins which are used for lcd connections


	GPIO_InitTypeDef lcd_signal;

	lcd_signal.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
	lcd_signal.Pin = LCD_GPIO_RS | LCD_GPIO_RW | LCD_GPIO_EN | LCD_GPIO_D4 | LCD_GPIO_D5 | LCD_GPIO_D6 | LCD_GPIO_D7;
 800249e:	237f      	movs	r3, #127	; 0x7f
 80024a0:	607b      	str	r3, [r7, #4]
	lcd_signal.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
	lcd_signal.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a6:	2302      	movs	r3, #2
 80024a8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LCD_GPIO_PORT, &lcd_signal);
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	482a      	ldr	r0, [pc, #168]	; (8002558 <lcd_init+0xc4>)
 80024b0:	f002 fc48 	bl	8004d44 <HAL_GPIO_Init>

	lcd_signal.GPIO_PinConfig.GPIO_PinNumber = LCD_GPIO_D7;
	GPIO_Init(&lcd_signal);
*/

	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2101      	movs	r1, #1
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <lcd_init+0xc4>)
 80024ba:	f002 fdd7 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 80024be:	2200      	movs	r2, #0
 80024c0:	2102      	movs	r1, #2
 80024c2:	4825      	ldr	r0, [pc, #148]	; (8002558 <lcd_init+0xc4>)
 80024c4:	f002 fdd2 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2104      	movs	r1, #4
 80024cc:	4822      	ldr	r0, [pc, #136]	; (8002558 <lcd_init+0xc4>)
 80024ce:	f002 fdcd 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D4, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2108      	movs	r1, #8
 80024d6:	4820      	ldr	r0, [pc, #128]	; (8002558 <lcd_init+0xc4>)
 80024d8:	f002 fdc8 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D5, GPIO_PIN_RESET);
 80024dc:	2200      	movs	r2, #0
 80024de:	2110      	movs	r1, #16
 80024e0:	481d      	ldr	r0, [pc, #116]	; (8002558 <lcd_init+0xc4>)
 80024e2:	f002 fdc3 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D6, GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2120      	movs	r1, #32
 80024ea:	481b      	ldr	r0, [pc, #108]	; (8002558 <lcd_init+0xc4>)
 80024ec:	f002 fdbe 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D7, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	2140      	movs	r1, #64	; 0x40
 80024f4:	4818      	ldr	r0, [pc, #96]	; (8002558 <lcd_init+0xc4>)
 80024f6:	f002 fdb9 	bl	800506c <HAL_GPIO_WritePin>

	// 2. Do the LCD initialization

	//delay_ms(40);
	HAL_Delay(40);
 80024fa:	2028      	movs	r0, #40	; 0x28
 80024fc:	f001 fd6c 	bl	8003fd8 <HAL_Delay>

	// RS = 0, for LCD command
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RS, GPIO_PIN_RESET);
 8002500:	2200      	movs	r2, #0
 8002502:	2101      	movs	r1, #1
 8002504:	4814      	ldr	r0, [pc, #80]	; (8002558 <lcd_init+0xc4>)
 8002506:	f002 fdb1 	bl	800506c <HAL_GPIO_WritePin>

	// RW = 0, Writing to LCD
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_RW, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	2102      	movs	r1, #2
 800250e:	4812      	ldr	r0, [pc, #72]	; (8002558 <lcd_init+0xc4>)
 8002510:	f002 fdac 	bl	800506c <HAL_GPIO_WritePin>

	write_4_bits(0x3);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 f867 	bl	80025e8 <write_4_bits>

	//delay_ms(5);
	HAL_Delay(5);
 800251a:	2005      	movs	r0, #5
 800251c:	f001 fd5c 	bl	8003fd8 <HAL_Delay>

	write_4_bits(0x3);
 8002520:	2003      	movs	r0, #3
 8002522:	f000 f861 	bl	80025e8 <write_4_bits>

	delay_us(150);
 8002526:	2096      	movs	r0, #150	; 0x96
 8002528:	f000 f8ac 	bl	8002684 <delay_us>

	write_4_bits(0x3);
 800252c:	2003      	movs	r0, #3
 800252e:	f000 f85b 	bl	80025e8 <write_4_bits>
	write_4_bits(0x2);
 8002532:	2002      	movs	r0, #2
 8002534:	f000 f858 	bl	80025e8 <write_4_bits>

	// Function set command
	lcd_send_command(LCD_CMD_4DL_2N_5X8F);
 8002538:	2028      	movs	r0, #40	; 0x28
 800253a:	f7ff ff67 	bl	800240c <lcd_send_command>

	// Display ON and cursor ON
	lcd_send_command(LCD_CMD_DISP_ON_CUR_ON);
 800253e:	200e      	movs	r0, #14
 8002540:	f7ff ff64 	bl	800240c <lcd_send_command>

	lcd_display_clear();
 8002544:	f000 f80a 	bl	800255c <lcd_display_clear>

	// Entry mode set
	lcd_send_command(LCD_CMD_INC_ADD);
 8002548:	2006      	movs	r0, #6
 800254a:	f7ff ff5f 	bl	800240c <lcd_send_command>
}
 800254e:	bf00      	nop
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40020c00 	.word	0x40020c00

0800255c <lcd_display_clear>:

void lcd_display_clear(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	lcd_send_command(LCD_CMD_DISP_CLEAR);
 8002560:	2001      	movs	r0, #1
 8002562:	f7ff ff53 	bl	800240c <lcd_send_command>
	HAL_Delay(2);
 8002566:	2002      	movs	r0, #2
 8002568:	f001 fd36 	bl	8003fd8 <HAL_Delay>
	//delay_ms(2);
}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}

08002570 <lcd_print_string>:
	HAL_Delay(2);
	//delay_ms(2);
}

void lcd_print_string(char *message)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	do
	{
		lcd_send_char((uint8_t) *message++);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff65 	bl	8002450 <lcd_send_char>
	}
	while(*message != '\0');
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f4      	bne.n	8002578 <lcd_print_string+0x8>
}
 800258e:	bf00      	nop
 8002590:	bf00      	nop
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <lcd_set_cursor>:

// Set to LCD a specific location given by row and column information
// Row number : 1 or 2
// Column number : 1 to 16 (for a 2x16 characters display)
void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	460a      	mov	r2, r1
 80025a2:	71fb      	strb	r3, [r7, #7]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71bb      	strb	r3, [r7, #6]
	column--;
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	71bb      	strb	r3, [r7, #6]
	switch(row)
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d002      	beq.n	80025ba <lcd_set_cursor+0x22>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d009      	beq.n	80025cc <lcd_set_cursor+0x34>
		case 2:
			// Set cursor to 2nd row address and add index
			lcd_send_command((column |= 0xC0));
			break;
		default:
			break;
 80025b8:	e011      	b.n	80025de <lcd_set_cursor+0x46>
			lcd_send_command((column |= 0x80));
 80025ba:	79bb      	ldrb	r3, [r7, #6]
 80025bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025c0:	71bb      	strb	r3, [r7, #6]
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff21 	bl	800240c <lcd_send_command>
			break;
 80025ca:	e008      	b.n	80025de <lcd_set_cursor+0x46>
			lcd_send_command((column |= 0xC0));
 80025cc:	79bb      	ldrb	r3, [r7, #6]
 80025ce:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80025d2:	71bb      	strb	r3, [r7, #6]
 80025d4:	79bb      	ldrb	r3, [r7, #6]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff18 	bl	800240c <lcd_send_command>
			break;
 80025dc:	bf00      	nop
	}
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <write_4_bits>:

// Writes 4 bits data/command on to D4, D5, D6 and D7 lines
static void write_4_bits(uint8_t value)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D4, ((value >> 0) & 0x1));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	2108      	movs	r1, #8
 80025fe:	4815      	ldr	r0, [pc, #84]	; (8002654 <write_4_bits+0x6c>)
 8002600:	f002 fd34 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D5, ((value >> 1) & 0x1));
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	2110      	movs	r1, #16
 8002614:	480f      	ldr	r0, [pc, #60]	; (8002654 <write_4_bits+0x6c>)
 8002616:	f002 fd29 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D6, ((value >> 2) & 0x1));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	2120      	movs	r1, #32
 800262a:	480a      	ldr	r0, [pc, #40]	; (8002654 <write_4_bits+0x6c>)
 800262c:	f002 fd1e 	bl	800506c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_D7, ((value >> 3) & 0x1));
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	08db      	lsrs	r3, r3, #3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	4804      	ldr	r0, [pc, #16]	; (8002654 <write_4_bits+0x6c>)
 8002642:	f002 fd13 	bl	800506c <HAL_GPIO_WritePin>

	lcd_enable();
 8002646:	f000 f807 	bl	8002658 <lcd_enable>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40020c00 	.word	0x40020c00

08002658 <lcd_enable>:

static void lcd_enable(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_SET);
 800265c:	2201      	movs	r2, #1
 800265e:	2104      	movs	r1, #4
 8002660:	4807      	ldr	r0, [pc, #28]	; (8002680 <lcd_enable+0x28>)
 8002662:	f002 fd03 	bl	800506c <HAL_GPIO_WritePin>
	delay_us(10);
 8002666:	200a      	movs	r0, #10
 8002668:	f000 f80c 	bl	8002684 <delay_us>
	HAL_GPIO_WritePin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
 800266c:	2200      	movs	r2, #0
 800266e:	2104      	movs	r1, #4
 8002670:	4803      	ldr	r0, [pc, #12]	; (8002680 <lcd_enable+0x28>)
 8002672:	f002 fcfb 	bl	800506c <HAL_GPIO_WritePin>
	delay_us(100);		// Execution time > 37 microseconds
 8002676:	2064      	movs	r0, #100	; 0x64
 8002678:	f000 f804 	bl	8002684 <delay_us>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40020c00 	.word	0x40020c00

08002684 <delay_us>:
{
	for(uint32_t i = 0; i < (cnt * 1000); i++);
}
*/
static void delay_us(uint32_t cnt)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < (cnt * 10); i++);
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e002      	b.n	8002698 <delay_us+0x14>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3301      	adds	r3, #1
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d3f3      	bcc.n	8002692 <delay_us+0xe>
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	AGM_ejes.Acel_ejes = &Acel_ejes;
 80026bc:	4b19      	ldr	r3, [pc, #100]	; (8002724 <main+0x6c>)
 80026be:	4a1a      	ldr	r2, [pc, #104]	; (8002728 <main+0x70>)
 80026c0:	601a      	str	r2, [r3, #0]
	AGM_ejes.Gyro_ejes = &Gyro_ejes;
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <main+0x6c>)
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <main+0x74>)
 80026c6:	605a      	str	r2, [r3, #4]
	AGM_ejes.Magne_ejes = &Magne_ejes;
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <main+0x6c>)
 80026ca:	4a19      	ldr	r2, [pc, #100]	; (8002730 <main+0x78>)
 80026cc:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026ce:	f001 fc41 	bl	8003f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026d2:	f000 f837 	bl	8002744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026d6:	f000 f9c3 	bl	8002a60 <MX_GPIO_Init>
  MX_ADC1_Init();
 80026da:	f000 f89f 	bl	800281c <MX_ADC1_Init>
  MX_I2C1_Init();
 80026de:	f000 f8ef 	bl	80028c0 <MX_I2C1_Init>
  MX_TIM4_Init();
 80026e2:	f000 f91b 	bl	800291c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80026e6:	f000 f991 	bl	8002a0c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	lcd_init();
 80026ea:	f7ff fed3 	bl	8002494 <lcd_init>

	// Enable the CYCCNT counter
	DWT_CTRL |= (1 << 0);
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <main+0x7c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a10      	ldr	r2, [pc, #64]	; (8002734 <main+0x7c>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(500000);
 80026fa:	480f      	ldr	r0, [pc, #60]	; (8002738 <main+0x80>)
 80026fc:	f00a fe50 	bl	800d3a0 <SEGGER_UART_init>
	SEGGER_SYSVIEW_Conf();
 8002700:	f00a fc80 	bl	800d004 <SEGGER_SYSVIEW_Conf>

	Init_tasks();
 8002704:	f000 face 	bl	8002ca4 <Init_tasks>

	Init_queues();
 8002708:	f000 fbae 	bl	8002e68 <Init_queues>

	Init_semaphores();
 800270c:	f000 fb52 	bl	8002db4 <Init_semaphores>

	Init_timers();
 8002710:	f000 fbfc 	bl	8002f0c <Init_timers>

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_data, 1);
 8002714:	2201      	movs	r2, #1
 8002716:	4909      	ldr	r1, [pc, #36]	; (800273c <main+0x84>)
 8002718:	4809      	ldr	r0, [pc, #36]	; (8002740 <main+0x88>)
 800271a:	f006 fbb2 	bl	8008e82 <HAL_UART_Receive_IT>

	// Start the FreeRTOS scheduler
	vTaskStartScheduler();
 800271e:	f008 fbd9 	bl	800aed4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002722:	e7fe      	b.n	8002722 <main+0x6a>
 8002724:	2001abbc 	.word	0x2001abbc
 8002728:	2001abc8 	.word	0x2001abc8
 800272c:	2001abd4 	.word	0x2001abd4
 8002730:	2001ab4c 	.word	0x2001ab4c
 8002734:	e0001000 	.word	0xe0001000
 8002738:	0007a120 	.word	0x0007a120
 800273c:	2001aafc 	.word	0x2001aafc
 8002740:	2001ab70 	.word	0x2001ab70

08002744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b094      	sub	sp, #80	; 0x50
 8002748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274a:	f107 031c 	add.w	r3, r7, #28
 800274e:	2234      	movs	r2, #52	; 0x34
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f00d fa5c 	bl	800fc10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002758:	f107 0308 	add.w	r3, r7, #8
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	607b      	str	r3, [r7, #4]
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <SystemClock_Config+0xd0>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a28      	ldr	r2, [pc, #160]	; (8002814 <SystemClock_Config+0xd0>)
 8002772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
 8002778:	4b26      	ldr	r3, [pc, #152]	; (8002814 <SystemClock_Config+0xd0>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002784:	2300      	movs	r3, #0
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <SystemClock_Config+0xd4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a22      	ldr	r2, [pc, #136]	; (8002818 <SystemClock_Config+0xd4>)
 800278e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002792:	6013      	str	r3, [r2, #0]
 8002794:	4b20      	ldr	r3, [pc, #128]	; (8002818 <SystemClock_Config+0xd4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a4:	2301      	movs	r3, #1
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027a8:	2310      	movs	r3, #16
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ac:	2302      	movs	r3, #2
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027b4:	2308      	movs	r3, #8
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80027b8:	23a8      	movs	r3, #168	; 0xa8
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027bc:	2302      	movs	r3, #2
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80027c0:	2302      	movs	r3, #2
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027c4:	2302      	movs	r3, #2
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	4618      	mov	r0, r3
 80027ce:	f004 ff37 	bl	8007640 <HAL_RCC_OscConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027d8:	f001 f898 	bl	800390c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027dc:	230f      	movs	r3, #15
 80027de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e0:	2302      	movs	r3, #2
 80027e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027f4:	f107 0308 	add.w	r3, r7, #8
 80027f8:	2105      	movs	r1, #5
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 fc22 	bl	8007044 <HAL_RCC_ClockConfig>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002806:	f001 f881 	bl	800390c <Error_Handler>
  }
}
 800280a:	bf00      	nop
 800280c:	3750      	adds	r7, #80	; 0x50
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	40007000 	.word	0x40007000

0800281c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002822:	463b      	mov	r3, r7
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <MX_ADC1_Init+0x98>)
 8002830:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <MX_ADC1_Init+0x9c>)
 8002832:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002834:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <MX_ADC1_Init+0x98>)
 8002836:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800283a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <MX_ADC1_Init+0x98>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <MX_ADC1_Init+0x98>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002848:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <MX_ADC1_Init+0x98>)
 800284a:	2200      	movs	r2, #0
 800284c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800284e:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <MX_ADC1_Init+0x98>)
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <MX_ADC1_Init+0x98>)
 8002858:	2200      	movs	r2, #0
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <MX_ADC1_Init+0x98>)
 800285e:	4a17      	ldr	r2, [pc, #92]	; (80028bc <MX_ADC1_Init+0xa0>)
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <MX_ADC1_Init+0x98>)
 8002864:	2200      	movs	r2, #0
 8002866:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <MX_ADC1_Init+0x98>)
 800286a:	2201      	movs	r2, #1
 800286c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <MX_ADC1_Init+0x98>)
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002876:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <MX_ADC1_Init+0x98>)
 8002878:	2201      	movs	r2, #1
 800287a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800287c:	480d      	ldr	r0, [pc, #52]	; (80028b4 <MX_ADC1_Init+0x98>)
 800287e:	f001 fbcf 	bl	8004020 <HAL_ADC_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002888:	f001 f840 	bl	800390c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800288c:	2305      	movs	r3, #5
 800288e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002890:	2301      	movs	r3, #1
 8002892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002898:	463b      	mov	r3, r7
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_ADC1_Init+0x98>)
 800289e:	f001 fe39 	bl	8004514 <HAL_ADC_ConfigChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80028a8:	f001 f830 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028ac:	bf00      	nop
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	2001ab00 	.word	0x2001ab00
 80028b8:	40012000 	.word	0x40012000
 80028bc:	0f000001 	.word	0x0f000001

080028c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <MX_I2C1_Init+0x50>)
 80028c6:	4a13      	ldr	r2, [pc, #76]	; (8002914 <MX_I2C1_Init+0x54>)
 80028c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <MX_I2C1_Init+0x50>)
 80028cc:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_I2C1_Init+0x58>)
 80028ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028d0:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <MX_I2C1_Init+0x50>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 194;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_I2C1_Init+0x50>)
 80028d8:	22c2      	movs	r2, #194	; 0xc2
 80028da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <MX_I2C1_Init+0x50>)
 80028de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <MX_I2C1_Init+0x50>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <MX_I2C1_Init+0x50>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <MX_I2C1_Init+0x50>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <MX_I2C1_Init+0x50>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <MX_I2C1_Init+0x50>)
 80028fe:	f002 fc01 	bl	8005104 <HAL_I2C_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002908:	f001 f800 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2001aa9c 	.word	0x2001aa9c
 8002914:	40005400 	.word	0x40005400
 8002918:	000186a0 	.word	0x000186a0

0800291c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002930:	f107 0320 	add.w	r3, r7, #32
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
 8002948:	615a      	str	r2, [r3, #20]
 800294a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <MX_TIM4_Init+0xe8>)
 800294e:	4a2e      	ldr	r2, [pc, #184]	; (8002a08 <MX_TIM4_Init+0xec>)
 8002950:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420;
 8002952:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <MX_TIM4_Init+0xe8>)
 8002954:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8002958:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800295a:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <MX_TIM4_Init+0xe8>)
 800295c:	2200      	movs	r2, #0
 800295e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <MX_TIM4_Init+0xe8>)
 8002962:	f242 7210 	movw	r2, #10000	; 0x2710
 8002966:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002968:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <MX_TIM4_Init+0xe8>)
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800296e:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <MX_TIM4_Init+0xe8>)
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002974:	4823      	ldr	r0, [pc, #140]	; (8002a04 <MX_TIM4_Init+0xe8>)
 8002976:	f005 f901 	bl	8007b7c <HAL_TIM_Base_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002980:	f000 ffc4 	bl	800390c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800298a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800298e:	4619      	mov	r1, r3
 8002990:	481c      	ldr	r0, [pc, #112]	; (8002a04 <MX_TIM4_Init+0xe8>)
 8002992:	f005 fd0b 	bl	80083ac <HAL_TIM_ConfigClockSource>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800299c:	f000 ffb6 	bl	800390c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029a0:	4818      	ldr	r0, [pc, #96]	; (8002a04 <MX_TIM4_Init+0xe8>)
 80029a2:	f005 f9ab 	bl	8007cfc <HAL_TIM_PWM_Init>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80029ac:	f000 ffae 	bl	800390c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029b8:	f107 0320 	add.w	r3, r7, #32
 80029bc:	4619      	mov	r1, r3
 80029be:	4811      	ldr	r0, [pc, #68]	; (8002a04 <MX_TIM4_Init+0xe8>)
 80029c0:	f006 f8f0 	bl	8008ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80029ca:	f000 ff9f 	bl	800390c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ce:	2360      	movs	r3, #96	; 0x60
 80029d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8000;
 80029d2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80029d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029d8:	2300      	movs	r3, #0
 80029da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	2200      	movs	r2, #0
 80029e4:	4619      	mov	r1, r3
 80029e6:	4807      	ldr	r0, [pc, #28]	; (8002a04 <MX_TIM4_Init+0xe8>)
 80029e8:	f005 fc22 	bl	8008230 <HAL_TIM_PWM_ConfigChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80029f2:	f000 ff8b 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029f6:	4803      	ldr	r0, [pc, #12]	; (8002a04 <MX_TIM4_Init+0xe8>)
 80029f8:	f001 f87c 	bl	8003af4 <HAL_TIM_MspPostInit>

}
 80029fc:	bf00      	nop
 80029fe:	3738      	adds	r7, #56	; 0x38
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	2001aa54 	.word	0x2001aa54
 8002a08:	40000800 	.word	0x40000800

08002a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <MX_USART2_UART_Init+0x50>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a18:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_USART2_UART_Init+0x4c>)
 8002a44:	f006 f93e 	bl	8008cc4 <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002a4e:	f000 ff5d 	bl	800390c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2001ab70 	.word	0x2001ab70
 8002a5c:	40004400 	.word	0x40004400

08002a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	; 0x30
 8002a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	4b83      	ldr	r3, [pc, #524]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a82      	ldr	r2, [pc, #520]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002a80:	f043 0304 	orr.w	r3, r3, #4
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b80      	ldr	r3, [pc, #512]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	4b7c      	ldr	r3, [pc, #496]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a7b      	ldr	r2, [pc, #492]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b79      	ldr	r3, [pc, #484]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a74      	ldr	r2, [pc, #464]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b72      	ldr	r3, [pc, #456]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b6e      	ldr	r3, [pc, #440]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a6d      	ldr	r2, [pc, #436]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b6b      	ldr	r3, [pc, #428]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	4b67      	ldr	r3, [pc, #412]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a66      	ldr	r2, [pc, #408]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b64      	ldr	r3, [pc, #400]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	4b60      	ldr	r3, [pc, #384]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a5f      	ldr	r2, [pc, #380]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <MX_GPIO_Init+0x228>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f244 0181 	movw	r1, #16513	; 0x4081
 8002b24:	4859      	ldr	r0, [pc, #356]	; (8002c8c <MX_GPIO_Init+0x22c>)
 8002b26:	f002 faa1 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	4858      	ldr	r0, [pc, #352]	; (8002c90 <MX_GPIO_Init+0x230>)
 8002b30:	f002 fa9c 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pin_Motor_1_Pin|Pin_Motor_2_Pin, GPIO_PIN_RESET);
 8002b34:	2200      	movs	r2, #0
 8002b36:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002b3a:	4856      	ldr	r0, [pc, #344]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b3c:	f002 fa96 	bl	800506c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <MX_GPIO_Init+0x238>)
 8002b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	484f      	ldr	r0, [pc, #316]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002b56:	f002 f8f5 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_6;
 8002b5a:	2351      	movs	r3, #81	; 0x51
 8002b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b5e:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <MX_GPIO_Init+0x238>)
 8002b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	f107 031c 	add.w	r3, r7, #28
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	484b      	ldr	r0, [pc, #300]	; (8002c9c <MX_GPIO_Init+0x23c>)
 8002b6e:	f002 f8e9 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002b72:	f244 0381 	movw	r3, #16513	; 0x4081
 8002b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4840      	ldr	r0, [pc, #256]	; (8002c8c <MX_GPIO_Init+0x22c>)
 8002b8c:	f002 f8da 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002b90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba6:	f107 031c 	add.w	r3, r7, #28
 8002baa:	4619      	mov	r1, r3
 8002bac:	483c      	ldr	r0, [pc, #240]	; (8002ca0 <MX_GPIO_Init+0x240>)
 8002bae:	f002 f8c9 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002bb2:	2340      	movs	r3, #64	; 0x40
 8002bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 031c 	add.w	r3, r7, #28
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4831      	ldr	r0, [pc, #196]	; (8002c90 <MX_GPIO_Init+0x230>)
 8002bca:	f002 f8bb 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002bda:	f107 031c 	add.w	r3, r7, #28
 8002bde:	4619      	mov	r1, r3
 8002be0:	482b      	ldr	r0, [pc, #172]	; (8002c90 <MX_GPIO_Init+0x230>)
 8002be2:	f002 f8af 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pin_Motor_1_Pin Pin_Motor_2_Pin */
  GPIO_InitStruct.Pin = Pin_Motor_1_Pin|Pin_Motor_2_Pin;
 8002be6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bec:	2301      	movs	r3, #1
 8002bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf8:	f107 031c 	add.w	r3, r7, #28
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4825      	ldr	r0, [pc, #148]	; (8002c94 <MX_GPIO_Init+0x234>)
 8002c00:	f002 f8a0 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002c04:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c16:	230a      	movs	r3, #10
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	481e      	ldr	r0, [pc, #120]	; (8002c9c <MX_GPIO_Init+0x23c>)
 8002c22:	f002 f88f 	bl	8004d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4818      	ldr	r0, [pc, #96]	; (8002c9c <MX_GPIO_Init+0x23c>)
 8002c3c:	f002 f882 	bl	8004d44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8002c40:	2200      	movs	r2, #0
 8002c42:	2106      	movs	r1, #6
 8002c44:	2006      	movs	r0, #6
 8002c46:	f001 ff97 	bl	8004b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c4a:	2006      	movs	r0, #6
 8002c4c:	f001 ffb0 	bl	8004bb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2106      	movs	r1, #6
 8002c54:	200a      	movs	r0, #10
 8002c56:	f001 ff8f 	bl	8004b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002c5a:	200a      	movs	r0, #10
 8002c5c:	f001 ffa8 	bl	8004bb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2106      	movs	r1, #6
 8002c64:	2017      	movs	r0, #23
 8002c66:	f001 ff87 	bl	8004b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c6a:	2017      	movs	r0, #23
 8002c6c:	f001 ffa0 	bl	8004bb0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8002c70:	2200      	movs	r2, #0
 8002c72:	2106      	movs	r1, #6
 8002c74:	2028      	movs	r0, #40	; 0x28
 8002c76:	f001 ff7f 	bl	8004b78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c7a:	2028      	movs	r0, #40	; 0x28
 8002c7c:	f001 ff98 	bl	8004bb0 <HAL_NVIC_EnableIRQ>

}
 8002c80:	bf00      	nop
 8002c82:	3730      	adds	r7, #48	; 0x30
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020400 	.word	0x40020400
 8002c90:	40021800 	.word	0x40021800
 8002c94:	40020800 	.word	0x40020800
 8002c98:	10110000 	.word	0x10110000
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020c00 	.word	0x40020c00

08002ca4 <Init_tasks>:

/* USER CODE BEGIN 4 */

void Init_tasks(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
	BaseType_t status;

	status = xTaskCreate(vprint_LCD, "Print LCD", 500, NULL, 2, &print_LCD);
 8002caa:	4b36      	ldr	r3, [pc, #216]	; (8002d84 <Init_tasks+0xe0>)
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	2302      	movs	r3, #2
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cb8:	4933      	ldr	r1, [pc, #204]	; (8002d88 <Init_tasks+0xe4>)
 8002cba:	4834      	ldr	r0, [pc, #208]	; (8002d8c <Init_tasks+0xe8>)
 8002cbc:	f007 ff6e 	bl	800ab9c <xTaskCreate>
 8002cc0:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d00a      	beq.n	8002cde <Init_tasks+0x3a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <Init_tasks+0x38>

	status = xTaskCreate(vuart_deco, "UART Deco", 500, NULL, 5, &uart_deco);
 8002cde:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <Init_tasks+0xec>)
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cec:	4929      	ldr	r1, [pc, #164]	; (8002d94 <Init_tasks+0xf0>)
 8002cee:	482a      	ldr	r0, [pc, #168]	; (8002d98 <Init_tasks+0xf4>)
 8002cf0:	f007 ff54 	bl	800ab9c <xTaskCreate>
 8002cf4:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d00a      	beq.n	8002d12 <Init_tasks+0x6e>
        __asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	60fb      	str	r3, [r7, #12]
    }
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <Init_tasks+0x6c>

	status = xTaskCreate(vuart_out, "UART out", 500, NULL, 4, &uart_out);
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <Init_tasks+0xf8>)
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2304      	movs	r3, #4
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d20:	491f      	ldr	r1, [pc, #124]	; (8002da0 <Init_tasks+0xfc>)
 8002d22:	4820      	ldr	r0, [pc, #128]	; (8002da4 <Init_tasks+0x100>)
 8002d24:	f007 ff3a 	bl	800ab9c <xTaskCreate>
 8002d28:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d00a      	beq.n	8002d46 <Init_tasks+0xa2>
        __asm volatile
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	60bb      	str	r3, [r7, #8]
    }
 8002d42:	bf00      	nop
 8002d44:	e7fe      	b.n	8002d44 <Init_tasks+0xa0>

	status = xTaskCreate(vall_menus_handler, "All_menus_handler", 500, NULL, 2, &all_menus_handler);
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <Init_tasks+0x104>)
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d54:	4915      	ldr	r1, [pc, #84]	; (8002dac <Init_tasks+0x108>)
 8002d56:	4816      	ldr	r0, [pc, #88]	; (8002db0 <Init_tasks+0x10c>)
 8002d58:	f007 ff20 	bl	800ab9c <xTaskCreate>
 8002d5c:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d00a      	beq.n	8002d7a <Init_tasks+0xd6>
        __asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	607b      	str	r3, [r7, #4]
    }
 8002d76:	bf00      	nop
 8002d78:	e7fe      	b.n	8002d78 <Init_tasks+0xd4>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2001aaf8 	.word	0x2001aaf8
 8002d88:	08012cb0 	.word	0x08012cb0
 8002d8c:	08001031 	.word	0x08001031
 8002d90:	2001aa44 	.word	0x2001aa44
 8002d94:	08012cbc 	.word	0x08012cbc
 8002d98:	080010b9 	.word	0x080010b9
 8002d9c:	2001abb4 	.word	0x2001abb4
 8002da0:	08012cc8 	.word	0x08012cc8
 8002da4:	080010d9 	.word	0x080010d9
 8002da8:	2001ab6c 	.word	0x2001ab6c
 8002dac:	08012cd4 	.word	0x08012cd4
 8002db0:	08001119 	.word	0x08001119

08002db4 <Init_semaphores>:

void Init_semaphores(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
	sema_lcd = xSemaphoreCreateBinary();
 8002dba:	2203      	movs	r2, #3
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	f006 ff04 	bl	8009bcc <xQueueGenericCreate>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4a25      	ldr	r2, [pc, #148]	; (8002e5c <Init_semaphores+0xa8>)
 8002dc8:	6013      	str	r3, [r2, #0]
	configASSERT(sema_lcd != NULL);
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <Init_semaphores+0xa8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <Init_semaphores+0x34>
        __asm volatile
 8002dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd6:	f383 8811 	msr	BASEPRI, r3
 8002dda:	f3bf 8f6f 	isb	sy
 8002dde:	f3bf 8f4f 	dsb	sy
 8002de2:	60fb      	str	r3, [r7, #12]
    }
 8002de4:	bf00      	nop
 8002de6:	e7fe      	b.n	8002de6 <Init_semaphores+0x32>

	sema_i2c_rx_end = xSemaphoreCreateBinary();
 8002de8:	2203      	movs	r2, #3
 8002dea:	2100      	movs	r1, #0
 8002dec:	2001      	movs	r0, #1
 8002dee:	f006 feed 	bl	8009bcc <xQueueGenericCreate>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <Init_semaphores+0xac>)
 8002df6:	6013      	str	r3, [r2, #0]
	configASSERT(sema_i2c_rx_end != NULL);
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <Init_semaphores+0xac>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10a      	bne.n	8002e16 <Init_semaphores+0x62>
        __asm volatile
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	60bb      	str	r3, [r7, #8]
    }
 8002e12:	bf00      	nop
 8002e14:	e7fe      	b.n	8002e14 <Init_semaphores+0x60>

	sema_adc = xSemaphoreCreateBinary();
 8002e16:	2203      	movs	r2, #3
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f006 fed6 	bl	8009bcc <xQueueGenericCreate>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4a10      	ldr	r2, [pc, #64]	; (8002e64 <Init_semaphores+0xb0>)
 8002e24:	6013      	str	r3, [r2, #0]
	configASSERT(sema_adc != NULL);
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <Init_semaphores+0xb0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <Init_semaphores+0x90>
        __asm volatile
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	607b      	str	r3, [r7, #4]
    }
 8002e40:	bf00      	nop
 8002e42:	e7fe      	b.n	8002e42 <Init_semaphores+0x8e>

	xSemaphoreGive(sema_lcd);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <Init_semaphores+0xa8>)
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f006 ff45 	bl	8009cdc <xQueueGenericSend>
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2001ab48 	.word	0x2001ab48
 8002e60:	2001ab68 	.word	0x2001ab68
 8002e64:	2001aaf0 	.word	0x2001aaf0

08002e68 <Init_queues>:

void Init_queues(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
	q_print_lcd = xQueueCreate(1, sizeof(state_t*));
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2104      	movs	r1, #4
 8002e72:	2001      	movs	r0, #1
 8002e74:	f006 feaa 	bl	8009bcc <xQueueGenericCreate>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a21      	ldr	r2, [pc, #132]	; (8002f00 <Init_queues+0x98>)
 8002e7c:	6013      	str	r3, [r2, #0]
	configASSERT(q_print_lcd != NULL);
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <Init_queues+0x98>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <Init_queues+0x34>
        __asm volatile
 8002e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8a:	f383 8811 	msr	BASEPRI, r3
 8002e8e:	f3bf 8f6f 	isb	sy
 8002e92:	f3bf 8f4f 	dsb	sy
 8002e96:	60fb      	str	r3, [r7, #12]
    }
 8002e98:	bf00      	nop
 8002e9a:	e7fe      	b.n	8002e9a <Init_queues+0x32>

	q_print_uart = xQueueCreate(10, sizeof(char*));
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2104      	movs	r1, #4
 8002ea0:	200a      	movs	r0, #10
 8002ea2:	f006 fe93 	bl	8009bcc <xQueueGenericCreate>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <Init_queues+0x9c>)
 8002eaa:	6013      	str	r3, [r2, #0]
	configASSERT(q_print_uart != NULL);
 8002eac:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <Init_queues+0x9c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <Init_queues+0x62>
        __asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	60bb      	str	r3, [r7, #8]
    }
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <Init_queues+0x60>

	q_data_uart = xQueueCreate(12, sizeof(char));
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2101      	movs	r1, #1
 8002ece:	200c      	movs	r0, #12
 8002ed0:	f006 fe7c 	bl	8009bcc <xQueueGenericCreate>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4a0c      	ldr	r2, [pc, #48]	; (8002f08 <Init_queues+0xa0>)
 8002ed8:	6013      	str	r3, [r2, #0]
	configASSERT(q_data_uart != NULL);
 8002eda:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <Init_queues+0xa0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10a      	bne.n	8002ef8 <Init_queues+0x90>
        __asm volatile
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	607b      	str	r3, [r7, #4]
    }
 8002ef4:	bf00      	nop
 8002ef6:	e7fe      	b.n	8002ef6 <Init_queues+0x8e>
}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	2001aa48 	.word	0x2001aa48
 8002f04:	2001aa50 	.word	0x2001aa50
 8002f08:	2001aa4c 	.word	0x2001aa4c

08002f0c <Init_timers>:

void Init_timers(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af02      	add	r7, sp, #8
	AGM_ADC_timer = xTimerCreate("AGM_ADC_timer", pdMS_TO_TICKS(250), pdTRUE, NULL, AGM_ADC_timer_callback);
 8002f12:	4b14      	ldr	r3, [pc, #80]	; (8002f64 <Init_timers+0x58>)
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2300      	movs	r3, #0
 8002f18:	2201      	movs	r2, #1
 8002f1a:	21fa      	movs	r1, #250	; 0xfa
 8002f1c:	4812      	ldr	r0, [pc, #72]	; (8002f68 <Init_timers+0x5c>)
 8002f1e:	f009 f82f 	bl	800bf80 <xTimerCreate>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4a11      	ldr	r2, [pc, #68]	; (8002f6c <Init_timers+0x60>)
 8002f26:	6013      	str	r3, [r2, #0]

	for(int i = 0; i < 4; i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	e012      	b.n	8002f54 <Init_timers+0x48>
		Buttons_timer[i] = xTimerCreate("buttons_timer", pdMS_TO_TICKS(250), pdFALSE, (void*)(i + 1), Buttons_timer_callback);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3301      	adds	r3, #1
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <Init_timers+0x64>)
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	21fa      	movs	r1, #250	; 0xfa
 8002f3e:	480d      	ldr	r0, [pc, #52]	; (8002f74 <Init_timers+0x68>)
 8002f40:	f009 f81e 	bl	800bf80 <xTimerCreate>
 8002f44:	4602      	mov	r2, r0
 8002f46:	490c      	ldr	r1, [pc, #48]	; (8002f78 <Init_timers+0x6c>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 4; i++)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3301      	adds	r3, #1
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	dde9      	ble.n	8002f2e <Init_timers+0x22>
}
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	08003329 	.word	0x08003329
 8002f68:	08012ce8 	.word	0x08012ce8
 8002f6c:	2001aaf4 	.word	0x2001aaf4
 8002f70:	080037b5 	.word	0x080037b5
 8002f74:	08012cf8 	.word	0x08012cf8
 8002f78:	2001ab58 	.word	0x2001ab58

08002f7c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]

	// Indicamos al SEGGER que hemos ingresado a una interrupcion
	traceISR_ENTER();
 8002f88:	f00c fa48 	bl	800f41c <SEGGER_SYSVIEW_RecordEnterISR>

	if(huart == &huart2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a29      	ldr	r2, [pc, #164]	; (8003034 <HAL_UART_RxCpltCallback+0xb8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d139      	bne.n	8003008 <HAL_UART_RxCpltCallback+0x8c>
	{
		uint8_t dummy;

		if(xQueueIsQueueFullFromISR(q_data_uart) == pdFALSE)
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_UART_RxCpltCallback+0xbc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f007 fd72 	bl	800aa82 <xQueueIsQueueFullFromISR>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_UART_RxCpltCallback+0x38>
		{
			/*Queue is not full */

			/* Enqueue data byte */
			xQueueSendFromISR(q_data_uart, (void*)&uart_data, NULL);
 8002fa4:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_UART_RxCpltCallback+0xbc>)
 8002fa6:	6818      	ldr	r0, [r3, #0]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2200      	movs	r2, #0
 8002fac:	4923      	ldr	r1, [pc, #140]	; (800303c <HAL_UART_RxCpltCallback+0xc0>)
 8002fae:	f006 ffbb 	bl	8009f28 <xQueueGenericSendFromISR>
 8002fb2:	e013      	b.n	8002fdc <HAL_UART_RxCpltCallback+0x60>
		}else{
			/*Queue is full */

			if(uart_data == '\n')
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_UART_RxCpltCallback+0xc0>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b0a      	cmp	r3, #10
 8002fbc:	d10e      	bne.n	8002fdc <HAL_UART_RxCpltCallback+0x60>
			{
				/*uart_data = '\n' */

				/* make sure that last data byte of the queue is '\n' */
				xQueueReceiveFromISR(q_data_uart, (void*)&dummy, NULL);
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_UART_RxCpltCallback+0xbc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f107 010b 	add.w	r1, r7, #11
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f007 fb67 	bl	800a69c <xQueueReceiveFromISR>
				xQueueSendFromISR(q_data_uart, (void*)&uart_data, NULL);
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_UART_RxCpltCallback+0xbc>)
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	4919      	ldr	r1, [pc, #100]	; (800303c <HAL_UART_RxCpltCallback+0xc0>)
 8002fd8:	f006 ffa6 	bl	8009f28 <xQueueGenericSendFromISR>
				//xQueueOverwriteFromISR(q_data, &uart_data, NULL);
			}
		}

		/* send notification to command handling task if uart_data = '\n' */
		if(uart_data == '\n')
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_UART_RxCpltCallback+0xc0>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b0a      	cmp	r3, #10
 8002fe4:	d10b      	bne.n	8002ffe <HAL_UART_RxCpltCallback+0x82>
		{
			xTaskNotifyFromISR(uart_deco, 0, eNoAction, &xHigherPriorityTaskWoken);
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <HAL_UART_RxCpltCallback+0xc4>)
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	f107 030c 	add.w	r3, r7, #12
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	f008 fe01 	bl	800bc00 <xTaskGenericNotifyFromISR>
		}

		/*  Enable UART data byte reception again in IT mode */
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_data, 1);
 8002ffe:	2201      	movs	r2, #1
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <HAL_UART_RxCpltCallback+0xc0>)
 8003002:	480c      	ldr	r0, [pc, #48]	; (8003034 <HAL_UART_RxCpltCallback+0xb8>)
 8003004:	f005 ff3d 	bl	8008e82 <HAL_UART_Receive_IT>
	}

	// Solicitamos el cambio de contexto si pxHigherPriorityTaskWoken = pdTrue
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_UART_RxCpltCallback+0xa8>
 800300e:	f00c fa63 	bl	800f4d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_UART_RxCpltCallback+0xc8>)
 8003014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	f3bf 8f6f 	isb	sy
 8003022:	e001      	b.n	8003028 <HAL_UART_RxCpltCallback+0xac>
 8003024:	f00c fa3c 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>

	// Indicamos al SEGGER que estamos saliendo de la interrupcion
	traceISR_EXIT();
 8003028:	f00c fa3a 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	2001ab70 	.word	0x2001ab70
 8003038:	2001aa4c 	.word	0x2001aa4c
 800303c:	2001aafc 	.word	0x2001aafc
 8003040:	2001aa44 	.word	0x2001aa44
 8003044:	e000ed04 	.word	0xe000ed04

08003048 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b087      	sub	sp, #28
 800304c:	af02      	add	r7, sp, #8
 800304e:	4603      	mov	r3, r0
 8003050:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]

	// Indicamos al SEGGER que hemos ingresado a una interrupcion
	traceISR_ENTER();
 8003056:	f00c f9e1 	bl	800f41c <SEGGER_SYSVIEW_RecordEnterISR>

	// Averiguamos que boton fue presionado
	if(GPIO_Pin == GPIO_PIN_0)
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d13c      	bne.n	80030da <HAL_GPIO_EXTI_Callback+0x92>
	{
		// Se presionó BUTTON_DOWN

		// Deshabilitamos la interrupción a BUTTON_DOWN por 250ms para evitar el rebote
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003060:	2006      	movs	r0, #6
 8003062:	f001 fdb3 	bl	8004bcc <HAL_NVIC_DisableIRQ>
		xTimerStartFromISR(Buttons_timer[0], &xHigherPriorityTaskWoken);
 8003066:	4b8d      	ldr	r3, [pc, #564]	; (800329c <HAL_GPIO_EXTI_Callback+0x254>)
 8003068:	681c      	ldr	r4, [r3, #0]
 800306a:	f008 f853 	bl	800b114 <xTaskGetTickCountFromISR>
 800306e:	4602      	mov	r2, r0
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	2100      	movs	r1, #0
 8003076:	9100      	str	r1, [sp, #0]
 8003078:	2106      	movs	r1, #6
 800307a:	4620      	mov	r0, r4
 800307c:	f008 ffdc 	bl	800c038 <xTimerGenericCommand>

		// Averiguamos en que pantalla estamos y notificamos a la tarea correspondiente
		if((display_state == Menu_1) || (display_state == Configuration_1) || (display_state == Data_1) ||
 8003080:	4b87      	ldr	r3, [pc, #540]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01c      	beq.n	80030c2 <HAL_GPIO_EXTI_Callback+0x7a>
 8003088:	4b85      	ldr	r3, [pc, #532]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b07      	cmp	r3, #7
 800308e:	d018      	beq.n	80030c2 <HAL_GPIO_EXTI_Callback+0x7a>
 8003090:	4b83      	ldr	r3, [pc, #524]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d014      	beq.n	80030c2 <HAL_GPIO_EXTI_Callback+0x7a>
			(display_state == Data_2) || (display_state == Data_3) || (display_state == Data_4) || (display_state == AGM_1)
 8003098:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800309a:	781b      	ldrb	r3, [r3, #0]
		if((display_state == Menu_1) || (display_state == Configuration_1) || (display_state == Data_1) ||
 800309c:	2b03      	cmp	r3, #3
 800309e:	d010      	beq.n	80030c2 <HAL_GPIO_EXTI_Callback+0x7a>
			(display_state == Data_2) || (display_state == Data_3) || (display_state == Data_4) || (display_state == AGM_1)
 80030a0:	4b7f      	ldr	r3, [pc, #508]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d00c      	beq.n	80030c2 <HAL_GPIO_EXTI_Callback+0x7a>
 80030a8:	4b7d      	ldr	r3, [pc, #500]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b05      	cmp	r3, #5
 80030ae:	d008      	beq.n	80030c2 <HAL_GPIO_EXTI_Callback+0x7a>
 80030b0:	4b7b      	ldr	r3, [pc, #492]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b09      	cmp	r3, #9
 80030b6:	d004      	beq.n	80030c2 <HAL_GPIO_EXTI_Callback+0x7a>
			|| (display_state == ADC_1))
 80030b8:	4b79      	ldr	r3, [pc, #484]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b0b      	cmp	r3, #11
 80030be:	f040 80d6 	bne.w	800326e <HAL_GPIO_EXTI_Callback+0x226>
			xTaskNotifyFromISR(all_menus_handler, BUTTON_DOWN, eSetValueWithOverwrite, NULL);
 80030c2:	4b78      	ldr	r3, [pc, #480]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x25c>)
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	2300      	movs	r3, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2303      	movs	r3, #3
 80030d0:	2202      	movs	r2, #2
 80030d2:	2100      	movs	r1, #0
 80030d4:	f008 fd94 	bl	800bc00 <xTaskGenericNotifyFromISR>
 80030d8:	e0c9      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x226>
	}else if(GPIO_Pin == GPIO_PIN_4)
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d13c      	bne.n	800315a <HAL_GPIO_EXTI_Callback+0x112>
	{
		// Se presionó BUTTON_UP

		// Deshabilitamos la interrupción a BUTTON_UP por 250ms para evitar el rebote
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80030e0:	200a      	movs	r0, #10
 80030e2:	f001 fd73 	bl	8004bcc <HAL_NVIC_DisableIRQ>
		xTimerStartFromISR(Buttons_timer[1], &xHigherPriorityTaskWoken);
 80030e6:	4b6d      	ldr	r3, [pc, #436]	; (800329c <HAL_GPIO_EXTI_Callback+0x254>)
 80030e8:	685c      	ldr	r4, [r3, #4]
 80030ea:	f008 f813 	bl	800b114 <xTaskGetTickCountFromISR>
 80030ee:	4602      	mov	r2, r0
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	2100      	movs	r1, #0
 80030f6:	9100      	str	r1, [sp, #0]
 80030f8:	2106      	movs	r1, #6
 80030fa:	4620      	mov	r0, r4
 80030fc:	f008 ff9c 	bl	800c038 <xTimerGenericCommand>

		// Averiguamos en que pantalla estamos y notificamos a la tarea correspondiente
		if((display_state == Menu_2) || (display_state == Configuration_2) || (display_state == Data_2) ||
 8003100:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d01c      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0xfa>
 8003108:	4b65      	ldr	r3, [pc, #404]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d018      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0xfa>
 8003110:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d014      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0xfa>
			(display_state == Data_3) || (display_state == Data_4) || (display_state == Data_5) || (display_state == AGM_2)
 8003118:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800311a:	781b      	ldrb	r3, [r3, #0]
		if((display_state == Menu_2) || (display_state == Configuration_2) || (display_state == Data_2) ||
 800311c:	2b04      	cmp	r3, #4
 800311e:	d010      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0xfa>
			(display_state == Data_3) || (display_state == Data_4) || (display_state == Data_5) || (display_state == AGM_2)
 8003120:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d00c      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0xfa>
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d008      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0xfa>
 8003130:	4b5b      	ldr	r3, [pc, #364]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b0a      	cmp	r3, #10
 8003136:	d004      	beq.n	8003142 <HAL_GPIO_EXTI_Callback+0xfa>
			|| (display_state == ADC_2))
 8003138:	4b59      	ldr	r3, [pc, #356]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	f040 8096 	bne.w	800326e <HAL_GPIO_EXTI_Callback+0x226>
			xTaskNotifyFromISR(all_menus_handler, BUTTON_UP, eSetValueWithOverwrite, NULL);
 8003142:	4b58      	ldr	r3, [pc, #352]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x25c>)
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	2300      	movs	r3, #0
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2303      	movs	r3, #3
 8003150:	2201      	movs	r2, #1
 8003152:	2100      	movs	r1, #0
 8003154:	f008 fd54 	bl	800bc00 <xTaskGenericNotifyFromISR>
 8003158:	e089      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x226>
	}else if(GPIO_Pin == GPIO_PIN_13)
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003160:	d13b      	bne.n	80031da <HAL_GPIO_EXTI_Callback+0x192>
	{
		// Se presionó ENTER

		// Deshabilitamos la interrupción a ENTER por 250ms para evitar el rebote
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003162:	2028      	movs	r0, #40	; 0x28
 8003164:	f001 fd32 	bl	8004bcc <HAL_NVIC_DisableIRQ>
		xTimerStartFromISR(Buttons_timer[2], &xHigherPriorityTaskWoken);
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <HAL_GPIO_EXTI_Callback+0x254>)
 800316a:	689c      	ldr	r4, [r3, #8]
 800316c:	f007 ffd2 	bl	800b114 <xTaskGetTickCountFromISR>
 8003170:	4602      	mov	r2, r0
 8003172:	f107 030c 	add.w	r3, r7, #12
 8003176:	2100      	movs	r1, #0
 8003178:	9100      	str	r1, [sp, #0]
 800317a:	2106      	movs	r1, #6
 800317c:	4620      	mov	r0, r4
 800317e:	f008 ff5b 	bl	800c038 <xTimerGenericCommand>

		// Averiguamos en que pantalla estamos y notificamos a la tarea correspondiente
		if((display_state == Menu_1) || (display_state == Menu_2) || (display_state == Configuration_1) || (display_state == Configuration_2)
 8003182:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01b      	beq.n	80031c2 <HAL_GPIO_EXTI_Callback+0x17a>
 800318a:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d017      	beq.n	80031c2 <HAL_GPIO_EXTI_Callback+0x17a>
 8003192:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b07      	cmp	r3, #7
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_EXTI_Callback+0x17a>
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d00f      	beq.n	80031c2 <HAL_GPIO_EXTI_Callback+0x17a>
			|| (display_state == AGM_1) || (display_state == AGM_2) || (display_state == ADC_1)	|| (display_state == ADC_2))
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b09      	cmp	r3, #9
 80031a8:	d00b      	beq.n	80031c2 <HAL_GPIO_EXTI_Callback+0x17a>
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b0a      	cmp	r3, #10
 80031b0:	d007      	beq.n	80031c2 <HAL_GPIO_EXTI_Callback+0x17a>
 80031b2:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b0b      	cmp	r3, #11
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_EXTI_Callback+0x17a>
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d155      	bne.n	800326e <HAL_GPIO_EXTI_Callback+0x226>
			xTaskNotifyFromISR(all_menus_handler, ENTER, eSetValueWithOverwrite, NULL);
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x25c>)
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9301      	str	r3, [sp, #4]
 80031ca:	2300      	movs	r3, #0
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	2303      	movs	r3, #3
 80031d0:	2203      	movs	r2, #3
 80031d2:	2100      	movs	r1, #0
 80031d4:	f008 fd14 	bl	800bc00 <xTaskGenericNotifyFromISR>
 80031d8:	e049      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x226>
	}else if(GPIO_Pin == GPIO_PIN_6)
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d146      	bne.n	800326e <HAL_GPIO_EXTI_Callback+0x226>
	{
		// Se presionó BACK

		// Deshabilitamos la interrupción a BACK por 250ms para evitar el rebote
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80031e0:	2017      	movs	r0, #23
 80031e2:	f001 fcf3 	bl	8004bcc <HAL_NVIC_DisableIRQ>
		xTimerStartFromISR(Buttons_timer[3], &xHigherPriorityTaskWoken);
 80031e6:	4b2d      	ldr	r3, [pc, #180]	; (800329c <HAL_GPIO_EXTI_Callback+0x254>)
 80031e8:	68dc      	ldr	r4, [r3, #12]
 80031ea:	f007 ff93 	bl	800b114 <xTaskGetTickCountFromISR>
 80031ee:	4602      	mov	r2, r0
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	2100      	movs	r1, #0
 80031f6:	9100      	str	r1, [sp, #0]
 80031f8:	2106      	movs	r1, #6
 80031fa:	4620      	mov	r0, r4
 80031fc:	f008 ff1c 	bl	800c038 <xTimerGenericCommand>

		// Averiguamos en que pantalla estamos y notificamos a la tarea correspondiente
		if((display_state == Configuration_1) || (display_state == Configuration_2) || (display_state == Data_1) ||
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b07      	cmp	r3, #7
 8003206:	d027      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b08      	cmp	r3, #8
 800320e:	d023      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
 8003210:	4b23      	ldr	r3, [pc, #140]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d01f      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
			(display_state == Data_2) || (display_state == Data_3) || (display_state == Data_4) || (display_state == Data_5)
 8003218:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800321a:	781b      	ldrb	r3, [r3, #0]
		if((display_state == Configuration_1) || (display_state == Configuration_2) || (display_state == Data_1) ||
 800321c:	2b03      	cmp	r3, #3
 800321e:	d01b      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
			(display_state == Data_2) || (display_state == Data_3) || (display_state == Data_4) || (display_state == Data_5)
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d017      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
 8003228:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b05      	cmp	r3, #5
 800322e:	d013      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b06      	cmp	r3, #6
 8003236:	d00f      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
			|| (display_state == AGM_1) || (display_state == AGM_2) || (display_state == ADC_1)	|| (display_state == ADC_2))
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b09      	cmp	r3, #9
 800323e:	d00b      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b0a      	cmp	r3, #10
 8003246:	d007      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b0b      	cmp	r3, #11
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_EXTI_Callback+0x210>
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_GPIO_EXTI_Callback+0x258>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b0c      	cmp	r3, #12
 8003256:	d10a      	bne.n	800326e <HAL_GPIO_EXTI_Callback+0x226>
			xTaskNotifyFromISR(all_menus_handler, BACK, eSetValueWithOverwrite, NULL);
 8003258:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <HAL_GPIO_EXTI_Callback+0x25c>)
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	2300      	movs	r3, #0
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	2300      	movs	r3, #0
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2303      	movs	r3, #3
 8003266:	2204      	movs	r2, #4
 8003268:	2100      	movs	r1, #0
 800326a:	f008 fcc9 	bl	800bc00 <xTaskGenericNotifyFromISR>
	}

	// Solicitamos el cambio de contexto si pxHigherPriorityTaskWoken = pdTrue
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <HAL_GPIO_EXTI_Callback+0x242>
 8003274:	f00c f930 	bl	800f4d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_GPIO_EXTI_Callback+0x260>)
 800327a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	e001      	b.n	800328e <HAL_GPIO_EXTI_Callback+0x246>
 800328a:	f00c f909 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>

	// Indicamos al SEGGER que estamos saliendo de la interrupcion
	traceISR_EXIT();
 800328e:	f00c f907 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>
}
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bd90      	pop	{r4, r7, pc}
 800329a:	bf00      	nop
 800329c:	2001ab58 	.word	0x2001ab58
 80032a0:	200002e1 	.word	0x200002e1
 80032a4:	2001ab6c 	.word	0x2001ab6c
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

	// Indicamos al SEGGER que hemos ingresado a una interrupcion
	traceISR_ENTER();
 80032cc:	f00c f8a6 	bl	800f41c <SEGGER_SYSVIEW_RecordEnterISR>

	// Entregamos el semaforo para indicar que la recepción I2C ha finalizado
	xSemaphoreGiveFromISR(sema_i2c_rx_end, &xHigherPriorityTaskWoken);
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_I2C_MasterRxCpltCallback+0x4c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f107 020c 	add.w	r2, r7, #12
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f006 fee2 	bl	800a0a4 <xQueueGiveFromISR>

	// Solicitamos el cambio de contexto si pxHigherPriorityTaskWoken = pdTrue
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_I2C_MasterRxCpltCallback+0x3c>
 80032e6:	f00c f8f7 	bl	800f4d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_I2C_MasterRxCpltCallback+0x50>)
 80032ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	e001      	b.n	8003300 <HAL_I2C_MasterRxCpltCallback+0x40>
 80032fc:	f00c f8d0 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>

	// Indicamos al SEGGER que estamos saliendo de la interrupcion
	traceISR_EXIT();
 8003300:	f00c f8ce 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	2001ab68 	.word	0x2001ab68
 8003310:	e000ed04 	.word	0xe000ed04

08003314 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	lcd_print_string("Error I2C");
 800331c:	4801      	ldr	r0, [pc, #4]	; (8003324 <HAL_I2C_ErrorCallback+0x10>)
 800331e:	f7ff f927 	bl	8002570 <lcd_print_string>

	// Infinite loop
	while(1);
 8003322:	e7fe      	b.n	8003322 <HAL_I2C_ErrorCallback+0xe>
 8003324:	08012d08 	.word	0x08012d08

08003328 <AGM_ADC_timer_callback>:
}

// Función timer de lectura de datos que se ejecuta cada 250ms
void AGM_ADC_timer_callback(TimerHandle_t xTimer)
{
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b08e      	sub	sp, #56	; 0x38
 800332c:	af02      	add	r7, sp, #8
 800332e:	6078      	str	r0, [r7, #4]
	char *msg_data = "Sensores";
 8003330:	4b91      	ldr	r3, [pc, #580]	; (8003578 <AGM_ADC_timer_callback+0x250>)
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
	char *msg_data_2 = "Desactivados";
 8003334:	4b91      	ldr	r3, [pc, #580]	; (800357c <AGM_ADC_timer_callback+0x254>)
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
	char data_lcd[17];

	float valor_volt;

	cont_timer++;
 8003338:	4b91      	ldr	r3, [pc, #580]	; (8003580 <AGM_ADC_timer_callback+0x258>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	b2da      	uxtb	r2, r3
 8003340:	4b8f      	ldr	r3, [pc, #572]	; (8003580 <AGM_ADC_timer_callback+0x258>)
 8003342:	701a      	strb	r2, [r3, #0]
	static cadena_lcd_t *msg = &msg_lcd;

	uint32_t id;

	// Obtenemos el id del timer activado
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f009 f957 	bl	800c5f8 <pvTimerGetTimerID>
 800334a:	4603      	mov	r3, r0
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
	// Indicamos al SEGGER que hemos ingresado a un timer
	SEGGER_SYSVIEW_RecordEnterTimer(id);
 800334e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003350:	f00c f8de 	bl	800f510 <SEGGER_SYSVIEW_RecordEnterTimer>

	// Leemos los sensores
	valor_volt = read_sensors();
 8003354:	f7fe fe06 	bl	8001f64 <read_sensors>
 8003358:	ed87 0a08 	vstr	s0, [r7, #32]

	// Preguntamos si hay solicitudes de envío de datos
	if((send_agm_uart > 0) || (send_adc_uart > 0))
 800335c:	4b89      	ldr	r3, [pc, #548]	; (8003584 <AGM_ADC_timer_callback+0x25c>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <AGM_ADC_timer_callback+0x44>
 8003364:	4b88      	ldr	r3, [pc, #544]	; (8003588 <AGM_ADC_timer_callback+0x260>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00f      	beq.n	800338c <AGM_ADC_timer_callback+0x64>
	{
		// Envíamos los datos por el puerto UART y disminuimos las solicitudes
		send_data_uart(valor_volt);
 800336c:	ed97 0a08 	vldr	s0, [r7, #32]
 8003370:	f7fe fe3c 	bl	8001fec <send_data_uart>
		send_agm_uart--;
 8003374:	4b83      	ldr	r3, [pc, #524]	; (8003584 <AGM_ADC_timer_callback+0x25c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	3b01      	subs	r3, #1
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b81      	ldr	r3, [pc, #516]	; (8003584 <AGM_ADC_timer_callback+0x25c>)
 800337e:	701a      	strb	r2, [r3, #0]
		send_adc_uart--;
 8003380:	4b81      	ldr	r3, [pc, #516]	; (8003588 <AGM_ADC_timer_callback+0x260>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	3b01      	subs	r3, #1
 8003386:	b2da      	uxtb	r2, r3
 8003388:	4b7f      	ldr	r3, [pc, #508]	; (8003588 <AGM_ADC_timer_callback+0x260>)
 800338a:	701a      	strb	r2, [r3, #0]
	}

	// Preguntamos si los sensores están activados o desactivados
	if((state_adc_pwm == RESET) && (state_agm == RESET) && (cont_timer == 1))
 800338c:	4b7f      	ldr	r3, [pc, #508]	; (800358c <AGM_ADC_timer_callback+0x264>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d11a      	bne.n	80033ca <AGM_ADC_timer_callback+0xa2>
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <AGM_ADC_timer_callback+0x268>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d116      	bne.n	80033ca <AGM_ADC_timer_callback+0xa2>
 800339c:	4b78      	ldr	r3, [pc, #480]	; (8003580 <AGM_ADC_timer_callback+0x258>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d112      	bne.n	80033ca <AGM_ADC_timer_callback+0xa2>
	{
		// Ambos sensores están desactivados
		// Imprimimos en LCD
		send_to_lcd(1, 1, LCD_WRITE, msg_data, msg);
 80033a4:	4b7b      	ldr	r3, [pc, #492]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	2202      	movs	r2, #2
 80033ae:	2101      	movs	r1, #1
 80033b0:	2001      	movs	r0, #1
 80033b2:	f7fe f985 	bl	80016c0 <send_to_lcd>
		send_to_lcd(2, 1, LCD_WRITE, msg_data_2, msg);
 80033b6:	4b77      	ldr	r3, [pc, #476]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	2202      	movs	r2, #2
 80033c0:	2101      	movs	r1, #1
 80033c2:	2002      	movs	r0, #2
 80033c4:	f7fe f97c 	bl	80016c0 <send_to_lcd>
 80033c8:	e1d4      	b.n	8003774 <AGM_ADC_timer_callback+0x44c>
	}else if((state_adc_pwm == SET) && (state_agm == RESET))
 80033ca:	4b70      	ldr	r3, [pc, #448]	; (800358c <AGM_ADC_timer_callback+0x264>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d119      	bne.n	8003406 <AGM_ADC_timer_callback+0xde>
 80033d2:	4b6f      	ldr	r3, [pc, #444]	; (8003590 <AGM_ADC_timer_callback+0x268>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d115      	bne.n	8003406 <AGM_ADC_timer_callback+0xde>
	{
		// ADC: activado, AGM: desactivado
		// Imprimimos en LCD
		sprintf(data_lcd, "Volt: %.2f", valor_volt);
 80033da:	6a38      	ldr	r0, [r7, #32]
 80033dc:	f7fd f92c 	bl	8000638 <__aeabi_f2d>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	f107 000c 	add.w	r0, r7, #12
 80033e8:	496b      	ldr	r1, [pc, #428]	; (8003598 <AGM_ADC_timer_callback+0x270>)
 80033ea:	f00d f8b7 	bl	801055c <siprintf>
		send_to_lcd(1, 1, LCD_WRITE, data_lcd, msg);
 80033ee:	4b69      	ldr	r3, [pc, #420]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f107 020c 	add.w	r2, r7, #12
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4613      	mov	r3, r2
 80033fa:	2202      	movs	r2, #2
 80033fc:	2101      	movs	r1, #1
 80033fe:	2001      	movs	r0, #1
 8003400:	f7fe f95e 	bl	80016c0 <send_to_lcd>
 8003404:	e1b6      	b.n	8003774 <AGM_ADC_timer_callback+0x44c>
	}else
	{
		if(((cont_timer % 2) == 1) && (state_agm == SET))
 8003406:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <AGM_ADC_timer_callback+0x258>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8192 	beq.w	800373a <AGM_ADC_timer_callback+0x412>
 8003416:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <AGM_ADC_timer_callback+0x268>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b01      	cmp	r3, #1
 800341c:	f040 818d 	bne.w	800373a <AGM_ADC_timer_callback+0x412>
		{
			// AGM: activado
			// Averiguamos en que pantalla estamos e imprimimos lo correspondiente
			if(display_state == Data_1)
 8003420:	4b5e      	ldr	r3, [pc, #376]	; (800359c <AGM_ADC_timer_callback+0x274>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d151      	bne.n	80034cc <AGM_ADC_timer_callback+0x1a4>
			{
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 8003428:	4b5a      	ldr	r3, [pc, #360]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	2300      	movs	r3, #0
 8003430:	2201      	movs	r2, #1
 8003432:	2100      	movs	r1, #0
 8003434:	2000      	movs	r0, #0
 8003436:	f7fe f943 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "Ax=%5.1f y=%5.1f", AGM_ejes.Acel_ejes->x, AGM_ejes.Acel_ejes->y);
 800343a:	4b59      	ldr	r3, [pc, #356]	; (80035a0 <AGM_ADC_timer_callback+0x278>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd f8f9 	bl	8000638 <__aeabi_f2d>
 8003446:	4604      	mov	r4, r0
 8003448:	460d      	mov	r5, r1
 800344a:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <AGM_ADC_timer_callback+0x278>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd f8f1 	bl	8000638 <__aeabi_f2d>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	f107 000c 	add.w	r0, r7, #12
 800345e:	e9cd 2300 	strd	r2, r3, [sp]
 8003462:	4622      	mov	r2, r4
 8003464:	462b      	mov	r3, r5
 8003466:	494f      	ldr	r1, [pc, #316]	; (80035a4 <AGM_ADC_timer_callback+0x27c>)
 8003468:	f00d f878 	bl	801055c <siprintf>
				send_to_lcd(1, 1, LCD_WRITE, data_lcd, msg);
 800346c:	4b49      	ldr	r3, [pc, #292]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f107 020c 	add.w	r2, r7, #12
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	2202      	movs	r2, #2
 800347a:	2101      	movs	r1, #1
 800347c:	2001      	movs	r0, #1
 800347e:	f7fe f91f 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "z=%5.1f Gx=%5.1f", AGM_ejes.Acel_ejes->z, AGM_ejes.Gyro_ejes->x);
 8003482:	4b47      	ldr	r3, [pc, #284]	; (80035a0 <AGM_ADC_timer_callback+0x278>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f8d5 	bl	8000638 <__aeabi_f2d>
 800348e:	4604      	mov	r4, r0
 8003490:	460d      	mov	r5, r1
 8003492:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <AGM_ADC_timer_callback+0x278>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f8cd 	bl	8000638 <__aeabi_f2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	f107 000c 	add.w	r0, r7, #12
 80034a6:	e9cd 2300 	strd	r2, r3, [sp]
 80034aa:	4622      	mov	r2, r4
 80034ac:	462b      	mov	r3, r5
 80034ae:	493e      	ldr	r1, [pc, #248]	; (80035a8 <AGM_ADC_timer_callback+0x280>)
 80034b0:	f00d f854 	bl	801055c <siprintf>
				send_to_lcd(2, 1, LCD_WRITE, data_lcd, msg);
 80034b4:	4b37      	ldr	r3, [pc, #220]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f107 020c 	add.w	r2, r7, #12
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	4613      	mov	r3, r2
 80034c0:	2202      	movs	r2, #2
 80034c2:	2101      	movs	r1, #1
 80034c4:	2002      	movs	r0, #2
 80034c6:	f7fe f8fb 	bl	80016c0 <send_to_lcd>
 80034ca:	e136      	b.n	800373a <AGM_ADC_timer_callback+0x412>
			}else if(display_state == Data_2)
 80034cc:	4b33      	ldr	r3, [pc, #204]	; (800359c <AGM_ADC_timer_callback+0x274>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d16d      	bne.n	80035b0 <AGM_ADC_timer_callback+0x288>
			{
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 80034d4:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2300      	movs	r3, #0
 80034dc:	2201      	movs	r2, #1
 80034de:	2100      	movs	r1, #0
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fe f8ed 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "z=%5.1f Gx=%5.1f", AGM_ejes.Acel_ejes->z, AGM_ejes.Gyro_ejes->x);
 80034e6:	4b2e      	ldr	r3, [pc, #184]	; (80035a0 <AGM_ADC_timer_callback+0x278>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f8a3 	bl	8000638 <__aeabi_f2d>
 80034f2:	4604      	mov	r4, r0
 80034f4:	460d      	mov	r5, r1
 80034f6:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <AGM_ADC_timer_callback+0x278>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f89b 	bl	8000638 <__aeabi_f2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	f107 000c 	add.w	r0, r7, #12
 800350a:	e9cd 2300 	strd	r2, r3, [sp]
 800350e:	4622      	mov	r2, r4
 8003510:	462b      	mov	r3, r5
 8003512:	4925      	ldr	r1, [pc, #148]	; (80035a8 <AGM_ADC_timer_callback+0x280>)
 8003514:	f00d f822 	bl	801055c <siprintf>
				send_to_lcd(1, 1, LCD_WRITE, data_lcd, msg);
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f107 020c 	add.w	r2, r7, #12
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	4613      	mov	r3, r2
 8003524:	2202      	movs	r2, #2
 8003526:	2101      	movs	r1, #1
 8003528:	2001      	movs	r0, #1
 800352a:	f7fe f8c9 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "y=%5.1f z=%5.1f", AGM_ejes.Gyro_ejes->y, AGM_ejes.Gyro_ejes->z);
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <AGM_ADC_timer_callback+0x278>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd f87f 	bl	8000638 <__aeabi_f2d>
 800353a:	4604      	mov	r4, r0
 800353c:	460d      	mov	r5, r1
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <AGM_ADC_timer_callback+0x278>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fd f877 	bl	8000638 <__aeabi_f2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	f107 000c 	add.w	r0, r7, #12
 8003552:	e9cd 2300 	strd	r2, r3, [sp]
 8003556:	4622      	mov	r2, r4
 8003558:	462b      	mov	r3, r5
 800355a:	4914      	ldr	r1, [pc, #80]	; (80035ac <AGM_ADC_timer_callback+0x284>)
 800355c:	f00c fffe 	bl	801055c <siprintf>
				send_to_lcd(2, 1, LCD_WRITE, data_lcd, msg);
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <AGM_ADC_timer_callback+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f107 020c 	add.w	r2, r7, #12
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	2202      	movs	r2, #2
 800356e:	2101      	movs	r1, #1
 8003570:	2002      	movs	r0, #2
 8003572:	f7fe f8a5 	bl	80016c0 <send_to_lcd>
 8003576:	e0e0      	b.n	800373a <AGM_ADC_timer_callback+0x412>
 8003578:	08012d14 	.word	0x08012d14
 800357c:	08012d20 	.word	0x08012d20
 8003580:	200002dc 	.word	0x200002dc
 8003584:	200002dd 	.word	0x200002dd
 8003588:	200002de 	.word	0x200002de
 800358c:	200002e0 	.word	0x200002e0
 8003590:	200002df 	.word	0x200002df
 8003594:	20000014 	.word	0x20000014
 8003598:	08012d30 	.word	0x08012d30
 800359c:	200002e1 	.word	0x200002e1
 80035a0:	2001abbc 	.word	0x2001abbc
 80035a4:	08012d3c 	.word	0x08012d3c
 80035a8:	08012d50 	.word	0x08012d50
 80035ac:	08012d64 	.word	0x08012d64
			}else if(display_state == Data_3)
 80035b0:	4b77      	ldr	r3, [pc, #476]	; (8003790 <AGM_ADC_timer_callback+0x468>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d151      	bne.n	800365c <AGM_ADC_timer_callback+0x334>
			{
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 80035b8:	4b76      	ldr	r3, [pc, #472]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	2300      	movs	r3, #0
 80035c0:	2201      	movs	r2, #1
 80035c2:	2100      	movs	r1, #0
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7fe f87b 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "y=%5.1f z=%5.1f", AGM_ejes.Gyro_ejes->y, AGM_ejes.Gyro_ejes->z);
 80035ca:	4b73      	ldr	r3, [pc, #460]	; (8003798 <AGM_ADC_timer_callback+0x470>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd f831 	bl	8000638 <__aeabi_f2d>
 80035d6:	4604      	mov	r4, r0
 80035d8:	460d      	mov	r5, r1
 80035da:	4b6f      	ldr	r3, [pc, #444]	; (8003798 <AGM_ADC_timer_callback+0x470>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd f829 	bl	8000638 <__aeabi_f2d>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	f107 000c 	add.w	r0, r7, #12
 80035ee:	e9cd 2300 	strd	r2, r3, [sp]
 80035f2:	4622      	mov	r2, r4
 80035f4:	462b      	mov	r3, r5
 80035f6:	4969      	ldr	r1, [pc, #420]	; (800379c <AGM_ADC_timer_callback+0x474>)
 80035f8:	f00c ffb0 	bl	801055c <siprintf>
				send_to_lcd(1, 1, LCD_WRITE, data_lcd, msg);
 80035fc:	4b65      	ldr	r3, [pc, #404]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f107 020c 	add.w	r2, r7, #12
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	4613      	mov	r3, r2
 8003608:	2202      	movs	r2, #2
 800360a:	2101      	movs	r1, #1
 800360c:	2001      	movs	r0, #1
 800360e:	f7fe f857 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "Mx=%5.1f y=%5.1f", AGM_ejes.Magne_ejes->x, AGM_ejes.Magne_ejes->y);
 8003612:	4b61      	ldr	r3, [pc, #388]	; (8003798 <AGM_ADC_timer_callback+0x470>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd f80d 	bl	8000638 <__aeabi_f2d>
 800361e:	4604      	mov	r4, r0
 8003620:	460d      	mov	r5, r1
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <AGM_ADC_timer_callback+0x470>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd f805 	bl	8000638 <__aeabi_f2d>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	f107 000c 	add.w	r0, r7, #12
 8003636:	e9cd 2300 	strd	r2, r3, [sp]
 800363a:	4622      	mov	r2, r4
 800363c:	462b      	mov	r3, r5
 800363e:	4958      	ldr	r1, [pc, #352]	; (80037a0 <AGM_ADC_timer_callback+0x478>)
 8003640:	f00c ff8c 	bl	801055c <siprintf>
				send_to_lcd(2, 1, LCD_WRITE, data_lcd, msg);
 8003644:	4b53      	ldr	r3, [pc, #332]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f107 020c 	add.w	r2, r7, #12
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	2202      	movs	r2, #2
 8003652:	2101      	movs	r1, #1
 8003654:	2002      	movs	r0, #2
 8003656:	f7fe f833 	bl	80016c0 <send_to_lcd>
 800365a:	e06e      	b.n	800373a <AGM_ADC_timer_callback+0x412>
			}else if(display_state == Data_4)
 800365c:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <AGM_ADC_timer_callback+0x468>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b05      	cmp	r3, #5
 8003662:	d145      	bne.n	80036f0 <AGM_ADC_timer_callback+0x3c8>
			{
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 8003664:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2300      	movs	r3, #0
 800366c:	2201      	movs	r2, #1
 800366e:	2100      	movs	r1, #0
 8003670:	2000      	movs	r0, #0
 8003672:	f7fe f825 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "Mx=%5.1f y=%5.1f", AGM_ejes.Magne_ejes->x, AGM_ejes.Magne_ejes->y);
 8003676:	4b48      	ldr	r3, [pc, #288]	; (8003798 <AGM_ADC_timer_callback+0x470>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ffdb 	bl	8000638 <__aeabi_f2d>
 8003682:	4604      	mov	r4, r0
 8003684:	460d      	mov	r5, r1
 8003686:	4b44      	ldr	r3, [pc, #272]	; (8003798 <AGM_ADC_timer_callback+0x470>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc ffd3 	bl	8000638 <__aeabi_f2d>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	f107 000c 	add.w	r0, r7, #12
 800369a:	e9cd 2300 	strd	r2, r3, [sp]
 800369e:	4622      	mov	r2, r4
 80036a0:	462b      	mov	r3, r5
 80036a2:	493f      	ldr	r1, [pc, #252]	; (80037a0 <AGM_ADC_timer_callback+0x478>)
 80036a4:	f00c ff5a 	bl	801055c <siprintf>
				send_to_lcd(1, 1, LCD_WRITE, data_lcd, msg);
 80036a8:	4b3a      	ldr	r3, [pc, #232]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f107 020c 	add.w	r2, r7, #12
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4613      	mov	r3, r2
 80036b4:	2202      	movs	r2, #2
 80036b6:	2101      	movs	r1, #1
 80036b8:	2001      	movs	r0, #1
 80036ba:	f7fe f801 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "z=%5.1f", AGM_ejes.Magne_ejes->z);
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <AGM_ADC_timer_callback+0x470>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc ffb7 	bl	8000638 <__aeabi_f2d>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	f107 000c 	add.w	r0, r7, #12
 80036d2:	4934      	ldr	r1, [pc, #208]	; (80037a4 <AGM_ADC_timer_callback+0x47c>)
 80036d4:	f00c ff42 	bl	801055c <siprintf>
				send_to_lcd(2, 1, LCD_WRITE, data_lcd, msg);
 80036d8:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f107 020c 	add.w	r2, r7, #12
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	2202      	movs	r2, #2
 80036e6:	2101      	movs	r1, #1
 80036e8:	2002      	movs	r0, #2
 80036ea:	f7fd ffe9 	bl	80016c0 <send_to_lcd>
 80036ee:	e024      	b.n	800373a <AGM_ADC_timer_callback+0x412>
			}else if(display_state == Data_5)
 80036f0:	4b27      	ldr	r3, [pc, #156]	; (8003790 <AGM_ADC_timer_callback+0x468>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b06      	cmp	r3, #6
 80036f6:	d120      	bne.n	800373a <AGM_ADC_timer_callback+0x412>
			{
				send_to_lcd(0, 0, LCD_CLEAR, NULL, msg);
 80036f8:	4b26      	ldr	r3, [pc, #152]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2300      	movs	r3, #0
 8003700:	2201      	movs	r2, #1
 8003702:	2100      	movs	r1, #0
 8003704:	2000      	movs	r0, #0
 8003706:	f7fd ffdb 	bl	80016c0 <send_to_lcd>
				sprintf(data_lcd, "z=%5.1f", AGM_ejes.Magne_ejes->z);
 800370a:	4b23      	ldr	r3, [pc, #140]	; (8003798 <AGM_ADC_timer_callback+0x470>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fc ff91 	bl	8000638 <__aeabi_f2d>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	f107 000c 	add.w	r0, r7, #12
 800371e:	4921      	ldr	r1, [pc, #132]	; (80037a4 <AGM_ADC_timer_callback+0x47c>)
 8003720:	f00c ff1c 	bl	801055c <siprintf>
				send_to_lcd(1, 1, LCD_WRITE, data_lcd, msg);
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f107 020c 	add.w	r2, r7, #12
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	2202      	movs	r2, #2
 8003732:	2101      	movs	r1, #1
 8003734:	2001      	movs	r0, #1
 8003736:	f7fd ffc3 	bl	80016c0 <send_to_lcd>
			}
		}

		if((state_adc_pwm == SET) && (display_state == Data_5))
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <AGM_ADC_timer_callback+0x480>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d118      	bne.n	8003774 <AGM_ADC_timer_callback+0x44c>
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <AGM_ADC_timer_callback+0x468>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b06      	cmp	r3, #6
 8003748:	d114      	bne.n	8003774 <AGM_ADC_timer_callback+0x44c>
		{
			// ADC: activado
			// Convertimos el dato adc a voltaje e imprimimos
			//valor_volt = conv_adc_volt();
			sprintf(data_lcd, "Volt: %.2f", valor_volt);
 800374a:	6a38      	ldr	r0, [r7, #32]
 800374c:	f7fc ff74 	bl	8000638 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	f107 000c 	add.w	r0, r7, #12
 8003758:	4914      	ldr	r1, [pc, #80]	; (80037ac <AGM_ADC_timer_callback+0x484>)
 800375a:	f00c feff 	bl	801055c <siprintf>
			send_to_lcd(2, 1, LCD_WRITE, data_lcd, msg);
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <AGM_ADC_timer_callback+0x46c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f107 020c 	add.w	r2, r7, #12
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	2202      	movs	r2, #2
 800376c:	2101      	movs	r1, #1
 800376e:	2002      	movs	r0, #2
 8003770:	f7fd ffa6 	bl	80016c0 <send_to_lcd>
		}
	}

	// Reiniciamos el contador cuando es 200
	if(cont_timer == 200)
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <AGM_ADC_timer_callback+0x488>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2bc8      	cmp	r3, #200	; 0xc8
 800377a:	d102      	bne.n	8003782 <AGM_ADC_timer_callback+0x45a>
		cont_timer = 0;
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <AGM_ADC_timer_callback+0x488>)
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]

	// Indicamos al SEGGER que estamos saliendo del timer
	SEGGER_SYSVIEW_RecordExitTimer();
 8003782:	f00b ff05 	bl	800f590 <SEGGER_SYSVIEW_RecordExitTimer>
}
 8003786:	bf00      	nop
 8003788:	3730      	adds	r7, #48	; 0x30
 800378a:	46bd      	mov	sp, r7
 800378c:	bdb0      	pop	{r4, r5, r7, pc}
 800378e:	bf00      	nop
 8003790:	200002e1 	.word	0x200002e1
 8003794:	20000014 	.word	0x20000014
 8003798:	2001abbc 	.word	0x2001abbc
 800379c:	08012d64 	.word	0x08012d64
 80037a0:	08012d74 	.word	0x08012d74
 80037a4:	08012d88 	.word	0x08012d88
 80037a8:	200002e0 	.word	0x200002e0
 80037ac:	08012d30 	.word	0x08012d30
 80037b0:	200002dc 	.word	0x200002dc

080037b4 <Buttons_timer_callback>:

// Función timer que se ejecuta 250ms luego de haber presionado un botón, está función
// vuelve a activar la interrupción del botón correspondiente
void Buttons_timer_callback(TimerHandle_t xTimer)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	// Obtenemos el id del timer activado
	uint32_t id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f008 ff1b 	bl	800c5f8 <pvTimerGetTimerID>
 80037c2:	4603      	mov	r3, r0
 80037c4:	60fb      	str	r3, [r7, #12]
	// Indicamos al SEGGER que hemos ingresado a un timer
	SEGGER_SYSVIEW_RecordEnterTimer(id);
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f00b fea2 	bl	800f510 <SEGGER_SYSVIEW_RecordEnterTimer>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d833      	bhi.n	800383c <Buttons_timer_callback+0x88>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <Buttons_timer_callback+0x28>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	080037ed 	.word	0x080037ed
 80037e0:	08003801 	.word	0x08003801
 80037e4:	08003815 	.word	0x08003815
 80037e8:	0800382b 	.word	0x0800382b

	// Limpiamos los flags correspondientes antes de volver a activar la interrupción
	switch(id)
	{
		case 1:
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <Buttons_timer_callback+0x94>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]
			HAL_NVIC_ClearPendingIRQ(EXTI0_IRQn);
 80037f2:	2006      	movs	r0, #6
 80037f4:	f001 f9f8 	bl	8004be8 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80037f8:	2006      	movs	r0, #6
 80037fa:	f001 f9d9 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
			break;
 80037fe:	e01d      	b.n	800383c <Buttons_timer_callback+0x88>
		case 2:
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <Buttons_timer_callback+0x94>)
 8003802:	2210      	movs	r2, #16
 8003804:	615a      	str	r2, [r3, #20]
			HAL_NVIC_ClearPendingIRQ(EXTI4_IRQn);
 8003806:	200a      	movs	r0, #10
 8003808:	f001 f9ee 	bl	8004be8 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800380c:	200a      	movs	r0, #10
 800380e:	f001 f9cf 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
			break;
 8003812:	e013      	b.n	800383c <Buttons_timer_callback+0x88>
		case 3:
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <Buttons_timer_callback+0x94>)
 8003816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800381a:	615a      	str	r2, [r3, #20]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800381c:	2028      	movs	r0, #40	; 0x28
 800381e:	f001 f9e3 	bl	8004be8 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003822:	2028      	movs	r0, #40	; 0x28
 8003824:	f001 f9c4 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
			break;
 8003828:	e008      	b.n	800383c <Buttons_timer_callback+0x88>
		case 4:
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 800382a:	4b07      	ldr	r3, [pc, #28]	; (8003848 <Buttons_timer_callback+0x94>)
 800382c:	2240      	movs	r2, #64	; 0x40
 800382e:	615a      	str	r2, [r3, #20]
			HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 8003830:	2017      	movs	r0, #23
 8003832:	f001 f9d9 	bl	8004be8 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003836:	2017      	movs	r0, #23
 8003838:	f001 f9ba 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
	}

	// Indicamos al SEGGER que estamos saliendo del timer
	SEGGER_SYSVIEW_RecordExitTimer();
 800383c:	f00b fea8 	bl	800f590 <SEGGER_SYSVIEW_RecordExitTimer>
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40013c00 	.word	0x40013c00

0800384c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	60fb      	str	r3, [r7, #12]

	// Indicamos al SEGGER que hemos ingresado a una interrupcion
	traceISR_ENTER();
 8003858:	f00b fde0 	bl	800f41c <SEGGER_SYSVIEW_RecordEnterISR>

	// Obtenemos el valor adc obtenido
	valor_adc = HAL_ADC_GetValue(&hadc1);
 800385c:	4819      	ldr	r0, [pc, #100]	; (80038c4 <HAL_ADC_ConvCpltCallback+0x78>)
 800385e:	f000 fe42 	bl	80044e6 <HAL_ADC_GetValue>
 8003862:	4603      	mov	r3, r0
 8003864:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <HAL_ADC_ConvCpltCallback+0x7c>)
 8003866:	6013      	str	r3, [r2, #0]
	// Actualizamos el valor del PWM
	TIM4->CCR1 = (10000 * valor_adc) / 4095;
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <HAL_ADC_ConvCpltCallback+0x7c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003870:	fb02 f203 	mul.w	r2, r2, r3
 8003874:	4915      	ldr	r1, [pc, #84]	; (80038cc <HAL_ADC_ConvCpltCallback+0x80>)
 8003876:	4b16      	ldr	r3, [pc, #88]	; (80038d0 <HAL_ADC_ConvCpltCallback+0x84>)
 8003878:	fba3 0302 	umull	r0, r3, r3, r2
 800387c:	1ad2      	subs	r2, r2, r3
 800387e:	0852      	lsrs	r2, r2, #1
 8003880:	4413      	add	r3, r2
 8003882:	0adb      	lsrs	r3, r3, #11
 8003884:	634b      	str	r3, [r1, #52]	; 0x34

	// Entregamos el semaforo, indicando que la conversión adc está completa
	xSemaphoreGiveFromISR(sema_adc, &xHigherPriorityTaskWoken);
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_ADC_ConvCpltCallback+0x88>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f107 020c 	add.w	r2, r7, #12
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f006 fc07 	bl	800a0a4 <xQueueGiveFromISR>

	// Solicitamos el cambio de contexto si pxHigherPriorityTaskWoken = pdTrue
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <HAL_ADC_ConvCpltCallback+0x66>
 800389c:	f00b fe1c 	bl	800f4d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_ADC_ConvCpltCallback+0x8c>)
 80038a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	e001      	b.n	80038b6 <HAL_ADC_ConvCpltCallback+0x6a>
 80038b2:	f00b fdf5 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>

	// Indicamos al SEGGER que estamos saliendo de la interrupcion
	traceISR_EXIT();
 80038b6:	f00b fdf3 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2001ab00 	.word	0x2001ab00
 80038c8:	2001abe4 	.word	0x2001abe4
 80038cc:	40000800 	.word	0x40000800
 80038d0:	00100101 	.word	0x00100101
 80038d4:	2001aaf0 	.word	0x2001aaf0
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	while(1);
 80038e4:	e7fe      	b.n	80038e4 <HAL_ADC_ErrorCallback+0x8>
	...

080038e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a04      	ldr	r2, [pc, #16]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038fa:	f000 fb4d 	bl	8003f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40001000 	.word	0x40001000

0800390c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003910:	b672      	cpsid	i
}
 8003912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003914:	e7fe      	b.n	8003914 <Error_Handler+0x8>
	...

08003918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_MspInit+0x4c>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <HAL_MspInit+0x4c>)
 8003928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800392c:	6453      	str	r3, [r2, #68]	; 0x44
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <HAL_MspInit+0x4c>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <HAL_MspInit+0x4c>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <HAL_MspInit+0x4c>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_MspInit+0x4c>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8003956:	f008 ff9f 	bl	800c898 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800

08003968 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	f107 0314 	add.w	r3, r7, #20
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	60da      	str	r2, [r3, #12]
 800397e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <HAL_ADC_MspInit+0x8c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d12f      	bne.n	80039ea <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_ADC_MspInit+0x90>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <HAL_ADC_MspInit+0x90>)
 8003994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003998:	6453      	str	r3, [r2, #68]	; 0x44
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_ADC_MspInit+0x90>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_ADC_MspInit+0x90>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <HAL_ADC_MspInit+0x90>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_ADC_MspInit+0x90>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80039c2:	2320      	movs	r3, #32
 80039c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039c6:	2303      	movs	r3, #3
 80039c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ce:	f107 0314 	add.w	r3, r7, #20
 80039d2:	4619      	mov	r1, r3
 80039d4:	4809      	ldr	r0, [pc, #36]	; (80039fc <HAL_ADC_MspInit+0x94>)
 80039d6:	f001 f9b5 	bl	8004d44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2106      	movs	r1, #6
 80039de:	2012      	movs	r0, #18
 80039e0:	f001 f8ca 	bl	8004b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80039e4:	2012      	movs	r0, #18
 80039e6:	f001 f8e3 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80039ea:	bf00      	nop
 80039ec:	3728      	adds	r7, #40	; 0x28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40012000 	.word	0x40012000
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40020000 	.word	0x40020000

08003a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a21      	ldr	r2, [pc, #132]	; (8003aa4 <HAL_I2C_MspInit+0xa4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d13c      	bne.n	8003a9c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <HAL_I2C_MspInit+0xa8>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a1f      	ldr	r2, [pc, #124]	; (8003aa8 <HAL_I2C_MspInit+0xa8>)
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_I2C_MspInit+0xa8>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003a3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a44:	2312      	movs	r3, #18
 8003a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a50:	2304      	movs	r3, #4
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4814      	ldr	r0, [pc, #80]	; (8003aac <HAL_I2C_MspInit+0xac>)
 8003a5c:	f001 f972 	bl	8004d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_I2C_MspInit+0xa8>)
 8003a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a68:	4a0f      	ldr	r2, [pc, #60]	; (8003aa8 <HAL_I2C_MspInit+0xa8>)
 8003a6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <HAL_I2C_MspInit+0xa8>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 6, 0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2106      	movs	r1, #6
 8003a80:	201f      	movs	r0, #31
 8003a82:	f001 f879 	bl	8004b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003a86:	201f      	movs	r0, #31
 8003a88:	f001 f892 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 6, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2106      	movs	r1, #6
 8003a90:	2020      	movs	r0, #32
 8003a92:	f001 f871 	bl	8004b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003a96:	2020      	movs	r0, #32
 8003a98:	f001 f88a 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a9c:	bf00      	nop
 8003a9e:	3728      	adds	r7, #40	; 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40005400 	.word	0x40005400
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40020400 	.word	0x40020400

08003ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <HAL_TIM_Base_MspInit+0x3c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10d      	bne.n	8003ade <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_TIM_Base_MspInit+0x40>)
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <HAL_TIM_Base_MspInit+0x40>)
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad2:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <HAL_TIM_Base_MspInit+0x40>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40023800 	.word	0x40023800

08003af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <HAL_TIM_MspPostInit+0x68>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d11e      	bne.n	8003b54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <HAL_TIM_MspPostInit+0x6c>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a10      	ldr	r2, [pc, #64]	; (8003b60 <HAL_TIM_MspPostInit+0x6c>)
 8003b20:	f043 0308 	orr.w	r3, r3, #8
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <HAL_TIM_MspPostInit+0x6c>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	60bb      	str	r3, [r7, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b38:	2302      	movs	r3, #2
 8003b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b44:	2302      	movs	r3, #2
 8003b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4805      	ldr	r0, [pc, #20]	; (8003b64 <HAL_TIM_MspPostInit+0x70>)
 8003b50:	f001 f8f8 	bl	8004d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003b54:	bf00      	nop
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40000800 	.word	0x40000800
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40020c00 	.word	0x40020c00

08003b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b70:	f107 0314 	add.w	r3, r7, #20
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1d      	ldr	r2, [pc, #116]	; (8003bfc <HAL_UART_MspInit+0x94>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d133      	bne.n	8003bf2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <HAL_UART_MspInit+0x98>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_UART_MspInit+0x98>)
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	6413      	str	r3, [r2, #64]	; 0x40
 8003b9a:	4b19      	ldr	r3, [pc, #100]	; (8003c00 <HAL_UART_MspInit+0x98>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_UART_MspInit+0x98>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <HAL_UART_MspInit+0x98>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <HAL_UART_MspInit+0x98>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003bc2:	230c      	movs	r3, #12
 8003bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bd2:	2307      	movs	r3, #7
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd6:	f107 0314 	add.w	r3, r7, #20
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4809      	ldr	r0, [pc, #36]	; (8003c04 <HAL_UART_MspInit+0x9c>)
 8003bde:	f001 f8b1 	bl	8004d44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2106      	movs	r1, #6
 8003be6:	2026      	movs	r0, #38	; 0x26
 8003be8:	f000 ffc6 	bl	8004b78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bec:	2026      	movs	r0, #38	; 0x26
 8003bee:	f000 ffdf 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bf2:	bf00      	nop
 8003bf4:	3728      	adds	r7, #40	; 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40004400 	.word	0x40004400
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40020000 	.word	0x40020000

08003c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08c      	sub	sp, #48	; 0x30
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	2036      	movs	r0, #54	; 0x36
 8003c1e:	f000 ffab 	bl	8004b78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c22:	2036      	movs	r0, #54	; 0x36
 8003c24:	f000 ffc4 	bl	8004bb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	4b1f      	ldr	r3, [pc, #124]	; (8003cac <HAL_InitTick+0xa4>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <HAL_InitTick+0xa4>)
 8003c32:	f043 0310 	orr.w	r3, r3, #16
 8003c36:	6413      	str	r3, [r2, #64]	; 0x40
 8003c38:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <HAL_InitTick+0xa4>)
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c44:	f107 0210 	add.w	r2, r7, #16
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f003 fb12 	bl	8007278 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003c54:	f003 fae8 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <HAL_InitTick+0xa8>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	0c9b      	lsrs	r3, r3, #18
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003c6c:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <HAL_InitTick+0xac>)
 8003c6e:	4a12      	ldr	r2, [pc, #72]	; (8003cb8 <HAL_InitTick+0xb0>)
 8003c70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003c72:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <HAL_InitTick+0xac>)
 8003c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003c7a:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <HAL_InitTick+0xac>)
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_InitTick+0xac>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <HAL_InitTick+0xac>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003c8c:	4809      	ldr	r0, [pc, #36]	; (8003cb4 <HAL_InitTick+0xac>)
 8003c8e:	f003 ff75 	bl	8007b7c <HAL_TIM_Base_Init>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003c98:	4806      	ldr	r0, [pc, #24]	; (8003cb4 <HAL_InitTick+0xac>)
 8003c9a:	f003 ffbf 	bl	8007c1c <HAL_TIM_Base_Start_IT>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	e000      	b.n	8003ca4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3730      	adds	r7, #48	; 0x30
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	431bde83 	.word	0x431bde83
 8003cb4:	2001abe8 	.word	0x2001abe8
 8003cb8:	40001000 	.word	0x40001000

08003cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cc0:	e7fe      	b.n	8003cc0 <NMI_Handler+0x4>

08003cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cc6:	e7fe      	b.n	8003cc6 <HardFault_Handler+0x4>

08003cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ccc:	e7fe      	b.n	8003ccc <MemManage_Handler+0x4>

08003cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cd2:	e7fe      	b.n	8003cd2 <BusFault_Handler+0x4>

08003cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cd8:	e7fe      	b.n	8003cd8 <UsageFault_Handler+0x4>

08003cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003cec:	2001      	movs	r0, #1
 8003cee:	f001 f9f1 	bl	80050d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003cfa:	2010      	movs	r0, #16
 8003cfc:	f001 f9ea 	bl	80050d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003d00:	bf00      	nop
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d08:	4802      	ldr	r0, [pc, #8]	; (8003d14 <ADC_IRQHandler+0x10>)
 8003d0a:	f000 faab 	bl	8004264 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	2001ab00 	.word	0x2001ab00

08003d18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003d1c:	2040      	movs	r0, #64	; 0x40
 8003d1e:	f001 f9d9 	bl	80050d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <I2C1_EV_IRQHandler+0x10>)
 8003d2e:	f001 fcf1 	bl	8005714 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	2001aa9c 	.word	0x2001aa9c

08003d3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003d40:	4802      	ldr	r0, [pc, #8]	; (8003d4c <I2C1_ER_IRQHandler+0x10>)
 8003d42:	f001 fe54 	bl	80059ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	2001aa9c 	.word	0x2001aa9c

08003d50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d54:	4802      	ldr	r0, [pc, #8]	; (8003d60 <USART2_IRQHandler+0x10>)
 8003d56:	f005 f8c5 	bl	8008ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2001ab70 	.word	0x2001ab70

08003d64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003d68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d6c:	f001 f9b2 	bl	80050d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <TIM6_DAC_IRQHandler+0x10>)
 8003d7a:	f004 f951 	bl	8008020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	2001abe8 	.word	0x2001abe8

08003d88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
	return 1;
 8003d8c:	2301      	movs	r3, #1
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_kill>:

int _kill(int pid, int sig)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003da2:	f00b feef 	bl	800fb84 <__errno>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2216      	movs	r2, #22
 8003daa:	601a      	str	r2, [r3, #0]
	return -1;
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_exit>:

void _exit (int status)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ffe7 	bl	8003d98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dca:	e7fe      	b.n	8003dca <_exit+0x12>

08003dcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e00a      	b.n	8003df4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dde:	f3af 8000 	nop.w
 8003de2:	4601      	mov	r1, r0
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	60ba      	str	r2, [r7, #8]
 8003dea:	b2ca      	uxtb	r2, r1
 8003dec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3301      	adds	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	dbf0      	blt.n	8003dde <_read+0x12>
	}

return len;
 8003dfc:	687b      	ldr	r3, [r7, #4]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_isatty>:

int _isatty(int file)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
	return 1;
 8003e46:	2301      	movs	r3, #1
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <_sbrk+0x5c>)
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <_sbrk+0x60>)
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e84:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <_sbrk+0x64>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <_sbrk+0x64>)
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <_sbrk+0x68>)
 8003e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <_sbrk+0x64>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d207      	bcs.n	8003eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ea0:	f00b fe70 	bl	800fb84 <__errno>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	220c      	movs	r2, #12
 8003ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	e009      	b.n	8003ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003eb0:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <_sbrk+0x64>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <_sbrk+0x64>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <_sbrk+0x64>)
 8003ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20020000 	.word	0x20020000
 8003ed0:	00000400 	.word	0x00000400
 8003ed4:	200002f8 	.word	0x200002f8
 8003ed8:	2001ad30 	.word	0x2001ad30

08003edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ee0:	4b06      	ldr	r3, [pc, #24]	; (8003efc <SystemInit+0x20>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	4a05      	ldr	r2, [pc, #20]	; (8003efc <SystemInit+0x20>)
 8003ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f04:	480d      	ldr	r0, [pc, #52]	; (8003f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f06:	490e      	ldr	r1, [pc, #56]	; (8003f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f08:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f0c:	e002      	b.n	8003f14 <LoopCopyDataInit>

08003f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f12:	3304      	adds	r3, #4

08003f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f18:	d3f9      	bcc.n	8003f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f1a:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f1c:	4c0b      	ldr	r4, [pc, #44]	; (8003f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f20:	e001      	b.n	8003f26 <LoopFillZerobss>

08003f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f24:	3204      	adds	r2, #4

08003f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f28:	d3fb      	bcc.n	8003f22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f2a:	f7ff ffd7 	bl	8003edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f2e:	f00b fe2f 	bl	800fb90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f32:	f7fe fbc1 	bl	80026b8 <main>
  bx  lr    
 8003f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f40:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003f44:	080132a4 	.word	0x080132a4
  ldr r2, =_sbss
 8003f48:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003f4c:	2001ad2c 	.word	0x2001ad2c

08003f50 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f50:	e7fe      	b.n	8003f50 <CAN1_RX0_IRQHandler>
	...

08003f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_Init+0x40>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <HAL_Init+0x40>)
 8003f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_Init+0x40>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <HAL_Init+0x40>)
 8003f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_Init+0x40>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a07      	ldr	r2, [pc, #28]	; (8003f94 <HAL_Init+0x40>)
 8003f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	f000 fdf0 	bl	8004b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f82:	2000      	movs	r0, #0
 8003f84:	f7ff fe40 	bl	8003c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f88:	f7ff fcc6 	bl	8003918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023c00 	.word	0x40023c00

08003f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_IncTick+0x20>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_IncTick+0x24>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <HAL_IncTick+0x24>)
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000020 	.word	0x20000020
 8003fbc:	2001ac30 	.word	0x2001ac30

08003fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <HAL_GetTick+0x14>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	2001ac30 	.word	0x2001ac30

08003fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7ff ffee 	bl	8003fc0 <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d005      	beq.n	8003ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_Delay+0x44>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ffe:	bf00      	nop
 8004000:	f7ff ffde 	bl	8003fc0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d8f7      	bhi.n	8004000 <HAL_Delay+0x28>
  {
  }
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20000020 	.word	0x20000020

08004020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e033      	b.n	800409e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff fc92 	bl	8003968 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d118      	bne.n	8004090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004066:	f023 0302 	bic.w	r3, r3, #2
 800406a:	f043 0202 	orr.w	r2, r3, #2
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fb80 	bl	8004778 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f023 0303 	bic.w	r3, r3, #3
 8004086:	f043 0201 	orr.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
 800408e:	e001      	b.n	8004094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_ADC_Start_IT+0x1a>
 80040be:	2302      	movs	r3, #2
 80040c0:	e0bd      	b.n	800423e <HAL_ADC_Start_IT+0x196>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d018      	beq.n	800410a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040e8:	4b58      	ldr	r3, [pc, #352]	; (800424c <HAL_ADC_Start_IT+0x1a4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a58      	ldr	r2, [pc, #352]	; (8004250 <HAL_ADC_Start_IT+0x1a8>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	0c9a      	lsrs	r2, r3, #18
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80040fc:	e002      	b.n	8004104 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	3b01      	subs	r3, #1
 8004102:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f9      	bne.n	80040fe <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 8085 	bne.w	8004224 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004144:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d106      	bne.n	8004168 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f023 0206 	bic.w	r2, r3, #6
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
 8004166:	e002      	b.n	800416e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004176:	4b37      	ldr	r3, [pc, #220]	; (8004254 <HAL_ADC_Start_IT+0x1ac>)
 8004178:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004182:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6812      	ldr	r2, [r2, #0]
 800418e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004192:	f043 0320 	orr.w	r3, r3, #32
 8004196:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d12a      	bne.n	80041fa <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2b      	ldr	r2, [pc, #172]	; (8004258 <HAL_ADC_Start_IT+0x1b0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d015      	beq.n	80041da <HAL_ADC_Start_IT+0x132>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2a      	ldr	r2, [pc, #168]	; (800425c <HAL_ADC_Start_IT+0x1b4>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d105      	bne.n	80041c4 <HAL_ADC_Start_IT+0x11c>
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <HAL_ADC_Start_IT+0x1ac>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <HAL_ADC_Start_IT+0x1b8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d136      	bne.n	800423c <HAL_ADC_Start_IT+0x194>
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <HAL_ADC_Start_IT+0x1ac>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0310 	and.w	r3, r3, #16
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d130      	bne.n	800423c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d129      	bne.n	800423c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	e020      	b.n	800423c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a16      	ldr	r2, [pc, #88]	; (8004258 <HAL_ADC_Start_IT+0x1b0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d11b      	bne.n	800423c <HAL_ADC_Start_IT+0x194>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d114      	bne.n	800423c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004220:	609a      	str	r2, [r3, #8]
 8004222:	e00b      	b.n	800423c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	f043 0210 	orr.w	r2, r3, #16
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004234:	f043 0201 	orr.w	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000018 	.word	0x20000018
 8004250:	431bde83 	.word	0x431bde83
 8004254:	40012300 	.word	0x40012300
 8004258:	40012000 	.word	0x40012000
 800425c:	40012100 	.word	0x40012100
 8004260:	40012200 	.word	0x40012200

08004264 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b02      	cmp	r3, #2
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b20      	cmp	r3, #32
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d049      	beq.n	800433a <HAL_ADC_IRQHandler+0xd6>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d046      	beq.n	800433a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d12b      	bne.n	800432a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d127      	bne.n	800432a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d006      	beq.n	80042f6 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d119      	bne.n	800432a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0220 	bic.w	r2, r2, #32
 8004304:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d105      	bne.n	800432a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f043 0201 	orr.w	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7ff fa8e 	bl	800384c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0212 	mvn.w	r2, #18
 8004338:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b80      	cmp	r3, #128	; 0x80
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d057      	beq.n	800441c <HAL_ADC_IRQHandler+0x1b8>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d054      	beq.n	800441c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 0310 	and.w	r3, r3, #16
 800437a:	2b00      	cmp	r3, #0
 800437c:	d105      	bne.n	800438a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d139      	bne.n	800440c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d006      	beq.n	80043b4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d12b      	bne.n	800440c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d124      	bne.n	800440c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d11d      	bne.n	800440c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d119      	bne.n	800440c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d105      	bne.n	800440c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 faaf 	bl	8004970 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f06f 020c 	mvn.w	r2, #12
 800441a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b01      	cmp	r3, #1
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443c:	2b40      	cmp	r3, #64	; 0x40
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d017      	beq.n	800447e <HAL_ADC_IRQHandler+0x21a>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d014      	beq.n	800447e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10d      	bne.n	800447e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f846 	bl	8004500 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0201 	mvn.w	r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b20      	cmp	r3, #32
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800449e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d015      	beq.n	80044de <HAL_ADC_IRQHandler+0x27a>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d012      	beq.n	80044de <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	f043 0202 	orr.w	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0220 	mvn.w	r2, #32
 80044cc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff fa04 	bl	80038dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f06f 0220 	mvn.w	r2, #32
 80044dc:	601a      	str	r2, [r3, #0]
  }
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x1c>
 800452c:	2302      	movs	r3, #2
 800452e:	e113      	b.n	8004758 <HAL_ADC_ConfigChannel+0x244>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b09      	cmp	r3, #9
 800453e:	d925      	bls.n	800458c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68d9      	ldr	r1, [r3, #12]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	b29b      	uxth	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	3b1e      	subs	r3, #30
 8004556:	2207      	movs	r2, #7
 8004558:	fa02 f303 	lsl.w	r3, r2, r3
 800455c:	43da      	mvns	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	400a      	ands	r2, r1
 8004564:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68d9      	ldr	r1, [r3, #12]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	4618      	mov	r0, r3
 8004578:	4603      	mov	r3, r0
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	4403      	add	r3, r0
 800457e:	3b1e      	subs	r3, #30
 8004580:	409a      	lsls	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	e022      	b.n	80045d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6919      	ldr	r1, [r3, #16]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	2207      	movs	r2, #7
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	43da      	mvns	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	400a      	ands	r2, r1
 80045ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6919      	ldr	r1, [r3, #16]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4618      	mov	r0, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4403      	add	r3, r0
 80045c8:	409a      	lsls	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d824      	bhi.n	8004624 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	3b05      	subs	r3, #5
 80045ec:	221f      	movs	r2, #31
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43da      	mvns	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	400a      	ands	r2, r1
 80045fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	b29b      	uxth	r3, r3
 8004608:	4618      	mov	r0, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	3b05      	subs	r3, #5
 8004616:	fa00 f203 	lsl.w	r2, r0, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	635a      	str	r2, [r3, #52]	; 0x34
 8004622:	e04c      	b.n	80046be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	d824      	bhi.n	8004676 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	3b23      	subs	r3, #35	; 0x23
 800463e:	221f      	movs	r2, #31
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43da      	mvns	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	400a      	ands	r2, r1
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	4618      	mov	r0, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	3b23      	subs	r3, #35	; 0x23
 8004668:	fa00 f203 	lsl.w	r2, r0, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	631a      	str	r2, [r3, #48]	; 0x30
 8004674:	e023      	b.n	80046be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	3b41      	subs	r3, #65	; 0x41
 8004688:	221f      	movs	r2, #31
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	400a      	ands	r2, r1
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4618      	mov	r0, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	3b41      	subs	r3, #65	; 0x41
 80046b2:	fa00 f203 	lsl.w	r2, r0, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <HAL_ADC_ConfigChannel+0x250>)
 80046c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a28      	ldr	r2, [pc, #160]	; (8004768 <HAL_ADC_ConfigChannel+0x254>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d10f      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x1d8>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b12      	cmp	r3, #18
 80046d2:	d10b      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_ADC_ConfigChannel+0x254>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d12b      	bne.n	800474e <HAL_ADC_ConfigChannel+0x23a>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_ADC_ConfigChannel+0x258>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <HAL_ADC_ConfigChannel+0x1f4>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b11      	cmp	r3, #17
 8004706:	d122      	bne.n	800474e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a11      	ldr	r2, [pc, #68]	; (800476c <HAL_ADC_ConfigChannel+0x258>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d111      	bne.n	800474e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800472a:	4b11      	ldr	r3, [pc, #68]	; (8004770 <HAL_ADC_ConfigChannel+0x25c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a11      	ldr	r2, [pc, #68]	; (8004774 <HAL_ADC_ConfigChannel+0x260>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	0c9a      	lsrs	r2, r3, #18
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004740:	e002      	b.n	8004748 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3b01      	subs	r3, #1
 8004746:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f9      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	40012300 	.word	0x40012300
 8004768:	40012000 	.word	0x40012000
 800476c:	10000012 	.word	0x10000012
 8004770:	20000018 	.word	0x20000018
 8004774:	431bde83 	.word	0x431bde83

08004778 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004780:	4b79      	ldr	r3, [pc, #484]	; (8004968 <ADC_Init+0x1f0>)
 8004782:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	431a      	orrs	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	021a      	lsls	r2, r3, #8
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80047d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6899      	ldr	r1, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	4a58      	ldr	r2, [pc, #352]	; (800496c <ADC_Init+0x1f4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d022      	beq.n	8004856 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800481e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6899      	ldr	r1, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004840:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6899      	ldr	r1, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	e00f      	b.n	8004876 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004864:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004874:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0202 	bic.w	r2, r2, #2
 8004884:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6899      	ldr	r1, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	7e1b      	ldrb	r3, [r3, #24]
 8004890:	005a      	lsls	r2, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01b      	beq.n	80048dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6859      	ldr	r1, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	3b01      	subs	r3, #1
 80048d0:	035a      	lsls	r2, r3, #13
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	e007      	b.n	80048ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80048fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	3b01      	subs	r3, #1
 8004908:	051a      	lsls	r2, r3, #20
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800492e:	025a      	lsls	r2, r3, #9
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689a      	ldr	r2, [r3, #8]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004946:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6899      	ldr	r1, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	029a      	lsls	r2, r3, #10
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
}
 800495c:	bf00      	nop
 800495e:	3714      	adds	r7, #20
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	40012300 	.word	0x40012300
 800496c:	0f000001 	.word	0x0f000001

08004970 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004994:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049a0:	4013      	ands	r3, r2
 80049a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b6:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <__NVIC_SetPriorityGrouping+0x44>)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	60d3      	str	r3, [r2, #12]
}
 80049bc:	bf00      	nop
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <__NVIC_GetPriorityGrouping+0x18>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	0a1b      	lsrs	r3, r3, #8
 80049d6:	f003 0307 	and.w	r3, r3, #7
}
 80049da:	4618      	mov	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	e000ed00 	.word	0xe000ed00

080049e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	db0b      	blt.n	8004a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	f003 021f 	and.w	r2, r3, #31
 8004a00:	4907      	ldr	r1, [pc, #28]	; (8004a20 <__NVIC_EnableIRQ+0x38>)
 8004a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	2001      	movs	r0, #1
 8004a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	e000e100 	.word	0xe000e100

08004a24 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	db12      	blt.n	8004a5c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	f003 021f 	and.w	r2, r3, #31
 8004a3c:	490a      	ldr	r1, [pc, #40]	; (8004a68 <__NVIC_DisableIRQ+0x44>)
 8004a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2001      	movs	r0, #1
 8004a46:	fa00 f202 	lsl.w	r2, r0, r2
 8004a4a:	3320      	adds	r3, #32
 8004a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a50:	f3bf 8f4f 	dsb	sy
}
 8004a54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a56:	f3bf 8f6f 	isb	sy
}
 8004a5a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000e100 	.word	0xe000e100

08004a6c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	db0c      	blt.n	8004a98 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a7e:	79fb      	ldrb	r3, [r7, #7]
 8004a80:	f003 021f 	and.w	r2, r3, #31
 8004a84:	4907      	ldr	r1, [pc, #28]	; (8004aa4 <__NVIC_ClearPendingIRQ+0x38>)
 8004a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004a92:	3360      	adds	r3, #96	; 0x60
 8004a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000e100 	.word	0xe000e100

08004aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	4603      	mov	r3, r0
 8004ab0:	6039      	str	r1, [r7, #0]
 8004ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	db0a      	blt.n	8004ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	490c      	ldr	r1, [pc, #48]	; (8004af4 <__NVIC_SetPriority+0x4c>)
 8004ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac6:	0112      	lsls	r2, r2, #4
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	440b      	add	r3, r1
 8004acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ad0:	e00a      	b.n	8004ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	4908      	ldr	r1, [pc, #32]	; (8004af8 <__NVIC_SetPriority+0x50>)
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	3b04      	subs	r3, #4
 8004ae0:	0112      	lsls	r2, r2, #4
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	761a      	strb	r2, [r3, #24]
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	e000e100 	.word	0xe000e100
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	; 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f1c3 0307 	rsb	r3, r3, #7
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	bf28      	it	cs
 8004b1a:	2304      	movcs	r3, #4
 8004b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2b06      	cmp	r3, #6
 8004b24:	d902      	bls.n	8004b2c <NVIC_EncodePriority+0x30>
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3b03      	subs	r3, #3
 8004b2a:	e000      	b.n	8004b2e <NVIC_EncodePriority+0x32>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43da      	mvns	r2, r3
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	401a      	ands	r2, r3
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b44:	f04f 31ff 	mov.w	r1, #4294967295
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	43d9      	mvns	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b54:	4313      	orrs	r3, r2
         );
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3724      	adds	r7, #36	; 0x24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ff0a 	bl	8004984 <__NVIC_SetPriorityGrouping>
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b8a:	f7ff ff1f 	bl	80049cc <__NVIC_GetPriorityGrouping>
 8004b8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	6978      	ldr	r0, [r7, #20]
 8004b96:	f7ff ffb1 	bl	8004afc <NVIC_EncodePriority>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff ff80 	bl	8004aa8 <__NVIC_SetPriority>
}
 8004ba8:	bf00      	nop
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff ff12 	bl	80049e8 <__NVIC_EnableIRQ>
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ff22 	bl	8004a24 <__NVIC_DisableIRQ>
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff ff38 	bl	8004a6c <__NVIC_ClearPendingIRQ>
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c12:	f7ff f9d5 	bl	8003fc0 <HAL_GetTick>
 8004c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d008      	beq.n	8004c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e052      	b.n	8004cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0216 	bic.w	r2, r2, #22
 8004c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <HAL_DMA_Abort+0x62>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0208 	bic.w	r2, r2, #8
 8004c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c86:	e013      	b.n	8004cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c88:	f7ff f99a 	bl	8003fc0 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	d90c      	bls.n	8004cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e015      	b.n	8004cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e4      	bne.n	8004c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc2:	223f      	movs	r2, #63	; 0x3f
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d004      	beq.n	8004d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2280      	movs	r2, #128	; 0x80
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00c      	b.n	8004d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2205      	movs	r2, #5
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d36:	b2db      	uxtb	r3, r3
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b089      	sub	sp, #36	; 0x24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	e165      	b.n	800502c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d60:	2201      	movs	r2, #1
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	4013      	ands	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	f040 8154 	bne.w	8005026 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d005      	beq.n	8004d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d130      	bne.n	8004df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	2203      	movs	r2, #3
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	43db      	mvns	r3, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4013      	ands	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dcc:	2201      	movs	r2, #1
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 0201 	and.w	r2, r3, #1
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d017      	beq.n	8004e34 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	2203      	movs	r2, #3
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 0303 	and.w	r3, r3, #3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d123      	bne.n	8004e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	08da      	lsrs	r2, r3, #3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3208      	adds	r2, #8
 8004e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	220f      	movs	r2, #15
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	08da      	lsrs	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3208      	adds	r2, #8
 8004e82:	69b9      	ldr	r1, [r7, #24]
 8004e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	2203      	movs	r2, #3
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 0203 	and.w	r2, r3, #3
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80ae 	beq.w	8005026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	4b5d      	ldr	r3, [pc, #372]	; (8005044 <HAL_GPIO_Init+0x300>)
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	4a5c      	ldr	r2, [pc, #368]	; (8005044 <HAL_GPIO_Init+0x300>)
 8004ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8004eda:	4b5a      	ldr	r3, [pc, #360]	; (8005044 <HAL_GPIO_Init+0x300>)
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ee6:	4a58      	ldr	r2, [pc, #352]	; (8005048 <HAL_GPIO_Init+0x304>)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	089b      	lsrs	r3, r3, #2
 8004eec:	3302      	adds	r3, #2
 8004eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	220f      	movs	r2, #15
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43db      	mvns	r3, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4013      	ands	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a4f      	ldr	r2, [pc, #316]	; (800504c <HAL_GPIO_Init+0x308>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d025      	beq.n	8004f5e <HAL_GPIO_Init+0x21a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a4e      	ldr	r2, [pc, #312]	; (8005050 <HAL_GPIO_Init+0x30c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01f      	beq.n	8004f5a <HAL_GPIO_Init+0x216>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a4d      	ldr	r2, [pc, #308]	; (8005054 <HAL_GPIO_Init+0x310>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d019      	beq.n	8004f56 <HAL_GPIO_Init+0x212>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a4c      	ldr	r2, [pc, #304]	; (8005058 <HAL_GPIO_Init+0x314>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <HAL_GPIO_Init+0x20e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a4b      	ldr	r2, [pc, #300]	; (800505c <HAL_GPIO_Init+0x318>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00d      	beq.n	8004f4e <HAL_GPIO_Init+0x20a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a4a      	ldr	r2, [pc, #296]	; (8005060 <HAL_GPIO_Init+0x31c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <HAL_GPIO_Init+0x206>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a49      	ldr	r2, [pc, #292]	; (8005064 <HAL_GPIO_Init+0x320>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_GPIO_Init+0x202>
 8004f42:	2306      	movs	r3, #6
 8004f44:	e00c      	b.n	8004f60 <HAL_GPIO_Init+0x21c>
 8004f46:	2307      	movs	r3, #7
 8004f48:	e00a      	b.n	8004f60 <HAL_GPIO_Init+0x21c>
 8004f4a:	2305      	movs	r3, #5
 8004f4c:	e008      	b.n	8004f60 <HAL_GPIO_Init+0x21c>
 8004f4e:	2304      	movs	r3, #4
 8004f50:	e006      	b.n	8004f60 <HAL_GPIO_Init+0x21c>
 8004f52:	2303      	movs	r3, #3
 8004f54:	e004      	b.n	8004f60 <HAL_GPIO_Init+0x21c>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e002      	b.n	8004f60 <HAL_GPIO_Init+0x21c>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_GPIO_Init+0x21c>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	f002 0203 	and.w	r2, r2, #3
 8004f66:	0092      	lsls	r2, r2, #2
 8004f68:	4093      	lsls	r3, r2
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f70:	4935      	ldr	r1, [pc, #212]	; (8005048 <HAL_GPIO_Init+0x304>)
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	089b      	lsrs	r3, r3, #2
 8004f76:	3302      	adds	r3, #2
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f7e:	4b3a      	ldr	r3, [pc, #232]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	43db      	mvns	r3, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fa2:	4a31      	ldr	r2, [pc, #196]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fa8:	4b2f      	ldr	r3, [pc, #188]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fcc:	4a26      	ldr	r2, [pc, #152]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fd2:	4b25      	ldr	r3, [pc, #148]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ff6:	4a1c      	ldr	r2, [pc, #112]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_GPIO_Init+0x324>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005020:	4a11      	ldr	r2, [pc, #68]	; (8005068 <HAL_GPIO_Init+0x324>)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3301      	adds	r3, #1
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	f67f ae96 	bls.w	8004d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800
 8005048:	40013800 	.word	0x40013800
 800504c:	40020000 	.word	0x40020000
 8005050:	40020400 	.word	0x40020400
 8005054:	40020800 	.word	0x40020800
 8005058:	40020c00 	.word	0x40020c00
 800505c:	40021000 	.word	0x40021000
 8005060:	40021400 	.word	0x40021400
 8005064:	40021800 	.word	0x40021800
 8005068:	40013c00 	.word	0x40013c00

0800506c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]
 8005078:	4613      	mov	r3, r2
 800507a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800507c:	787b      	ldrb	r3, [r7, #1]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005082:	887a      	ldrh	r2, [r7, #2]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005088:	e003      	b.n	8005092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	041a      	lsls	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	619a      	str	r2, [r3, #24]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050b0:	887a      	ldrh	r2, [r7, #2]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	041a      	lsls	r2, r3, #16
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	43d9      	mvns	r1, r3
 80050bc:	887b      	ldrh	r3, [r7, #2]
 80050be:	400b      	ands	r3, r1
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	619a      	str	r2, [r3, #24]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050de:	4b08      	ldr	r3, [pc, #32]	; (8005100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e0:	695a      	ldr	r2, [r3, #20]
 80050e2:	88fb      	ldrh	r3, [r7, #6]
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050ea:	4a05      	ldr	r2, [pc, #20]	; (8005100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f0:	88fb      	ldrh	r3, [r7, #6]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fd ffa8 	bl	8003048 <HAL_GPIO_EXTI_Callback>
  }
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40013c00 	.word	0x40013c00

08005104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e12b      	b.n	800536e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d106      	bne.n	8005130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fe fc68 	bl	8003a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2224      	movs	r2, #36	; 0x24
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005168:	f002 f85e 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 800516c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4a81      	ldr	r2, [pc, #516]	; (8005378 <HAL_I2C_Init+0x274>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d807      	bhi.n	8005188 <HAL_I2C_Init+0x84>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4a80      	ldr	r2, [pc, #512]	; (800537c <HAL_I2C_Init+0x278>)
 800517c:	4293      	cmp	r3, r2
 800517e:	bf94      	ite	ls
 8005180:	2301      	movls	r3, #1
 8005182:	2300      	movhi	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e006      	b.n	8005196 <HAL_I2C_Init+0x92>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a7d      	ldr	r2, [pc, #500]	; (8005380 <HAL_I2C_Init+0x27c>)
 800518c:	4293      	cmp	r3, r2
 800518e:	bf94      	ite	ls
 8005190:	2301      	movls	r3, #1
 8005192:	2300      	movhi	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0e7      	b.n	800536e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4a78      	ldr	r2, [pc, #480]	; (8005384 <HAL_I2C_Init+0x280>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	0c9b      	lsrs	r3, r3, #18
 80051a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4a6a      	ldr	r2, [pc, #424]	; (8005378 <HAL_I2C_Init+0x274>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d802      	bhi.n	80051d8 <HAL_I2C_Init+0xd4>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	3301      	adds	r3, #1
 80051d6:	e009      	b.n	80051ec <HAL_I2C_Init+0xe8>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	4a69      	ldr	r2, [pc, #420]	; (8005388 <HAL_I2C_Init+0x284>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	099b      	lsrs	r3, r3, #6
 80051ea:	3301      	adds	r3, #1
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	495c      	ldr	r1, [pc, #368]	; (8005378 <HAL_I2C_Init+0x274>)
 8005208:	428b      	cmp	r3, r1
 800520a:	d819      	bhi.n	8005240 <HAL_I2C_Init+0x13c>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1e59      	subs	r1, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	fbb1 f3f3 	udiv	r3, r1, r3
 800521a:	1c59      	adds	r1, r3, #1
 800521c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005220:	400b      	ands	r3, r1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_I2C_Init+0x138>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1e59      	subs	r1, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	fbb1 f3f3 	udiv	r3, r1, r3
 8005234:	3301      	adds	r3, #1
 8005236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800523a:	e051      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800523c:	2304      	movs	r3, #4
 800523e:	e04f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d111      	bne.n	800526c <HAL_I2C_Init+0x168>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1e58      	subs	r0, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6859      	ldr	r1, [r3, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	440b      	add	r3, r1
 8005256:	fbb0 f3f3 	udiv	r3, r0, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e012      	b.n	8005292 <HAL_I2C_Init+0x18e>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e58      	subs	r0, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6859      	ldr	r1, [r3, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	0099      	lsls	r1, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005282:	3301      	adds	r3, #1
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_I2C_Init+0x196>
 8005296:	2301      	movs	r3, #1
 8005298:	e022      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10e      	bne.n	80052c0 <HAL_I2C_Init+0x1bc>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e58      	subs	r0, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	440b      	add	r3, r1
 80052b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80052b4:	3301      	adds	r3, #1
 80052b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052be:	e00f      	b.n	80052e0 <HAL_I2C_Init+0x1dc>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1e58      	subs	r0, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	0099      	lsls	r1, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	6809      	ldr	r1, [r1, #0]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69da      	ldr	r2, [r3, #28]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800530e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6911      	ldr	r1, [r2, #16]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	68d2      	ldr	r2, [r2, #12]
 800531a:	4311      	orrs	r1, r2
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695a      	ldr	r2, [r3, #20]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	000186a0 	.word	0x000186a0
 800537c:	001e847f 	.word	0x001e847f
 8005380:	003d08ff 	.word	0x003d08ff
 8005384:	431bde83 	.word	0x431bde83
 8005388:	10624dd3 	.word	0x10624dd3

0800538c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	461a      	mov	r2, r3
 8005398:	460b      	mov	r3, r1
 800539a:	817b      	strh	r3, [r7, #10]
 800539c:	4613      	mov	r3, r2
 800539e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	f040 80a6 	bne.w	8005502 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053c4:	d005      	beq.n	80053d2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d002      	beq.n	80053d2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d130      	bne.n	8005434 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053d2:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	08db      	lsrs	r3, r3, #3
 80053d8:	4a4e      	ldr	r2, [pc, #312]	; (8005514 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 80053da:	fba2 2303 	umull	r2, r3, r2, r3
 80053de:	0a1a      	lsrs	r2, r3, #8
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009a      	lsls	r2, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e06e      	b.n	8005504 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d0db      	beq.n	80053ec <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800543e:	2302      	movs	r3, #2
 8005440:	e060      	b.n	8005504 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d007      	beq.n	8005468 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005476:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2221      	movs	r2, #33	; 0x21
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2210      	movs	r2, #16
 8005484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	893a      	ldrh	r2, [r7, #8]
 8005498:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a3a      	ldr	r2, [r7, #32]
 80054a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80054aa:	897a      	ldrh	r2, [r7, #10]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b11      	cmp	r3, #17
 80054ba:	d10c      	bne.n	80054d6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80054c2:	d003      	beq.n	80054cc <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80054ca:	d101      	bne.n	80054d0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 80054d0:	2300      	movs	r3, #0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d107      	bne.n	80054e6 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80054fc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e000      	b.n	8005504 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8005502:	2302      	movs	r3, #2
  }
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000018 	.word	0x20000018
 8005514:	14f8b589 	.word	0x14f8b589

08005518 <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	; 0x24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	461a      	mov	r2, r3
 8005524:	460b      	mov	r3, r1
 8005526:	817b      	strh	r3, [r7, #10]
 8005528:	4613      	mov	r3, r2
 800552a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800552c:	2300      	movs	r3, #0
 800552e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005534:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005538:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b20      	cmp	r3, #32
 8005544:	f040 80da 	bne.w	80056fc <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005556:	d005      	beq.n	8005564 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	2b08      	cmp	r3, #8
 800555c:	d002      	beq.n	8005564 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	2b01      	cmp	r3, #1
 8005562:	d130      	bne.n	80055c6 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005564:	4b69      	ldr	r3, [pc, #420]	; (800570c <HAL_I2C_Master_Seq_Receive_IT+0x1f4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	08db      	lsrs	r3, r3, #3
 800556a:	4a69      	ldr	r2, [pc, #420]	; (8005710 <HAL_I2C_Master_Seq_Receive_IT+0x1f8>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	0a1a      	lsrs	r2, r3, #8
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009a      	lsls	r2, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	3b01      	subs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d116      	bne.n	80055b8 <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f043 0220 	orr.w	r2, r3, #32
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0a2      	b.n	80056fe <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d0db      	beq.n	800557e <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e094      	b.n	80056fe <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d007      	beq.n	80055fa <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005608:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2222      	movs	r2, #34	; 0x22
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2210      	movs	r2, #16
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	893a      	ldrh	r2, [r7, #8]
 800562a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800563c:	897a      	ldrh	r2, [r7, #10]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d126      	bne.n	80056a0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	2b20      	cmp	r3, #32
 8005656:	d002      	beq.n	800565e <HAL_I2C_Master_Seq_Receive_IT+0x146>
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	2b10      	cmp	r3, #16
 800565c:	d120      	bne.n	80056a0 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	2b12      	cmp	r3, #18
 8005662:	d114      	bne.n	800568e <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005672:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005682:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800568a:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800568c:	e010      	b.n	80056b0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800569c:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800569e:	e007      	b.n	80056b0 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056ae:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b12      	cmp	r3, #18
 80056b4:	d10c      	bne.n	80056d0 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80056bc:	d003      	beq.n	80056c6 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80056c4:	d101      	bne.n	80056ca <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 80056ca:	2300      	movs	r3, #0
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d107      	bne.n	80056e0 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056de:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e000      	b.n	80056fe <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
  }
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3724      	adds	r7, #36	; 0x24
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20000018 	.word	0x20000018
 8005710:	14f8b589 	.word	0x14f8b589

08005714 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005734:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800573c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	2b10      	cmp	r3, #16
 8005742:	d003      	beq.n	800574c <HAL_I2C_EV_IRQHandler+0x38>
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	f040 80bd 	bne.w	80058c6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10d      	bne.n	8005782 <HAL_I2C_EV_IRQHandler+0x6e>
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800576c:	d003      	beq.n	8005776 <HAL_I2C_EV_IRQHandler+0x62>
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005774:	d101      	bne.n	800577a <HAL_I2C_EV_IRQHandler+0x66>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <HAL_I2C_EV_IRQHandler+0x68>
 800577a:	2300      	movs	r3, #0
 800577c:	2b01      	cmp	r3, #1
 800577e:	f000 812e 	beq.w	80059de <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <HAL_I2C_EV_IRQHandler+0x92>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	0a5b      	lsrs	r3, r3, #9
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d006      	beq.n	80057a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 fc37 	bl	800700c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fd44 	bl	800622c <I2C_Master_SB>
 80057a4:	e08e      	b.n	80058c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	0a5b      	lsrs	r3, r3, #9
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fdba 	bl	8006338 <I2C_Master_ADD10>
 80057c4:	e07e      	b.n	80058c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	0a5b      	lsrs	r3, r3, #9
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fdd4 	bl	800638c <I2C_Master_ADDR>
 80057e4:	e06e      	b.n	80058c4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	089b      	lsrs	r3, r3, #2
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d037      	beq.n	8005862 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005800:	f000 80ef 	beq.w	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	09db      	lsrs	r3, r3, #7
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00f      	beq.n	8005830 <HAL_I2C_EV_IRQHandler+0x11c>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	0a9b      	lsrs	r3, r3, #10
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_I2C_EV_IRQHandler+0x11c>
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	089b      	lsrs	r3, r3, #2
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d103      	bne.n	8005830 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f9d1 	bl	8005bd0 <I2C_MasterTransmit_TXE>
 800582e:	e049      	b.n	80058c4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	089b      	lsrs	r3, r3, #2
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80d2 	beq.w	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	0a5b      	lsrs	r3, r3, #9
 8005842:	f003 0301 	and.w	r3, r3, #1
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80cb 	beq.w	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b10      	cmp	r3, #16
 8005850:	d103      	bne.n	800585a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa58 	bl	8005d08 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005858:	e0c3      	b.n	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fabc 	bl	8005dd8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005860:	e0bf      	b.n	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005870:	f000 80b7 	beq.w	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <HAL_I2C_EV_IRQHandler+0x18c>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	0a9b      	lsrs	r3, r3, #10
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <HAL_I2C_EV_IRQHandler+0x18c>
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fb2c 	bl	8005ef6 <I2C_MasterReceive_RXNE>
 800589e:	e011      	b.n	80058c4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 809a 	beq.w	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	0a5b      	lsrs	r3, r3, #9
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8093 	beq.w	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fbcb 	bl	8006058 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058c2:	e08e      	b.n	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80058c4:	e08d      	b.n	80059e2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d004      	beq.n	80058d8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	61fb      	str	r3, [r7, #28]
 80058d6:	e007      	b.n	80058e8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d012      	beq.n	800591a <HAL_I2C_EV_IRQHandler+0x206>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	0a5b      	lsrs	r3, r3, #9
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00c      	beq.n	800591a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005910:	69b9      	ldr	r1, [r7, #24]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 ff89 	bl	800682a <I2C_Slave_ADDR>
 8005918:	e066      	b.n	80059e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_I2C_EV_IRQHandler+0x226>
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	0a5b      	lsrs	r3, r3, #9
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 ffbe 	bl	80068b4 <I2C_Slave_STOPF>
 8005938:	e056      	b.n	80059e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800593a:	7bbb      	ldrb	r3, [r7, #14]
 800593c:	2b21      	cmp	r3, #33	; 0x21
 800593e:	d002      	beq.n	8005946 <HAL_I2C_EV_IRQHandler+0x232>
 8005940:	7bbb      	ldrb	r3, [r7, #14]
 8005942:	2b29      	cmp	r3, #41	; 0x29
 8005944:	d125      	bne.n	8005992 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	09db      	lsrs	r3, r3, #7
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00f      	beq.n	8005972 <HAL_I2C_EV_IRQHandler+0x25e>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	0a9b      	lsrs	r3, r3, #10
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <HAL_I2C_EV_IRQHandler+0x25e>
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	089b      	lsrs	r3, r3, #2
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d103      	bne.n	8005972 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fe9f 	bl	80066ae <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005970:	e039      	b.n	80059e6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d033      	beq.n	80059e6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	0a5b      	lsrs	r3, r3, #9
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d02d      	beq.n	80059e6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fecc 	bl	8006728 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005990:	e029      	b.n	80059e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	099b      	lsrs	r3, r3, #6
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00f      	beq.n	80059be <HAL_I2C_EV_IRQHandler+0x2aa>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	0a9b      	lsrs	r3, r3, #10
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <HAL_I2C_EV_IRQHandler+0x2aa>
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	089b      	lsrs	r3, r3, #2
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d103      	bne.n	80059be <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fed7 	bl	800676a <I2C_SlaveReceive_RXNE>
 80059bc:	e014      	b.n	80059e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	089b      	lsrs	r3, r3, #2
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00e      	beq.n	80059e8 <HAL_I2C_EV_IRQHandler+0x2d4>
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	0a5b      	lsrs	r3, r3, #9
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d008      	beq.n	80059e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 ff05 	bl	80067e6 <I2C_SlaveReceive_BTF>
 80059dc:	e004      	b.n	80059e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b08a      	sub	sp, #40	; 0x28
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a10:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	0a1b      	lsrs	r3, r3, #8
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00e      	beq.n	8005a3c <HAL_I2C_ER_IRQHandler+0x4e>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	0a1b      	lsrs	r3, r3, #8
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a3a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	0a5b      	lsrs	r3, r3, #9
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00e      	beq.n	8005a66 <HAL_I2C_ER_IRQHandler+0x78>
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	f043 0302 	orr.w	r3, r3, #2
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005a64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	0a9b      	lsrs	r3, r3, #10
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d03f      	beq.n	8005af2 <HAL_I2C_ER_IRQHandler+0x104>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d039      	beq.n	8005af2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005a7e:	7efb      	ldrb	r3, [r7, #27]
 8005a80:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a90:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a96:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005a98:	7ebb      	ldrb	r3, [r7, #26]
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d112      	bne.n	8005ac4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10f      	bne.n	8005ac4 <HAL_I2C_ER_IRQHandler+0xd6>
 8005aa4:	7cfb      	ldrb	r3, [r7, #19]
 8005aa6:	2b21      	cmp	r3, #33	; 0x21
 8005aa8:	d008      	beq.n	8005abc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005aaa:	7cfb      	ldrb	r3, [r7, #19]
 8005aac:	2b29      	cmp	r3, #41	; 0x29
 8005aae:	d005      	beq.n	8005abc <HAL_I2C_ER_IRQHandler+0xce>
 8005ab0:	7cfb      	ldrb	r3, [r7, #19]
 8005ab2:	2b28      	cmp	r3, #40	; 0x28
 8005ab4:	d106      	bne.n	8005ac4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b21      	cmp	r3, #33	; 0x21
 8005aba:	d103      	bne.n	8005ac4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 f829 	bl	8006b14 <I2C_Slave_AF>
 8005ac2:	e016      	b.n	8005af2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005acc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	f043 0304 	orr.w	r3, r3, #4
 8005ad4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ad6:	7efb      	ldrb	r3, [r7, #27]
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d002      	beq.n	8005ae2 <HAL_I2C_ER_IRQHandler+0xf4>
 8005adc:	7efb      	ldrb	r3, [r7, #27]
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	d107      	bne.n	8005af2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	0adb      	lsrs	r3, r3, #11
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00e      	beq.n	8005b1c <HAL_I2C_ER_IRQHandler+0x12e>
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	0a1b      	lsrs	r3, r3, #8
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	f043 0308 	orr.w	r3, r3, #8
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005b1a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d008      	beq.n	8005b34 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 f860 	bl	8006bf4 <I2C_ITError>
  }
}
 8005b34:	bf00      	nop
 8005b36:	3728      	adds	r7, #40	; 0x28
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
 8005b70:	4613      	mov	r3, r2
 8005b72:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d150      	bne.n	8005c98 <I2C_MasterTransmit_TXE+0xc8>
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b21      	cmp	r3, #33	; 0x21
 8005bfa:	d14d      	bne.n	8005c98 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d01d      	beq.n	8005c3e <I2C_MasterTransmit_TXE+0x6e>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d01a      	beq.n	8005c3e <I2C_MasterTransmit_TXE+0x6e>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c0e:	d016      	beq.n	8005c3e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c1e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2211      	movs	r2, #17
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fd fb38 	bl	80032ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c3c:	e060      	b.n	8005d00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c4c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d107      	bne.n	8005c88 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff87 	bl	8005b94 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c86:	e03b      	b.n	8005d00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7fd fb0b 	bl	80032ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c96:	e033      	b.n	8005d00 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b21      	cmp	r3, #33	; 0x21
 8005c9c:	d005      	beq.n	8005caa <I2C_MasterTransmit_TXE+0xda>
 8005c9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d12d      	bne.n	8005d00 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	2b22      	cmp	r3, #34	; 0x22
 8005ca8:	d12a      	bne.n	8005d00 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d108      	bne.n	8005cc6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005cc4:	e01c      	b.n	8005d00 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b40      	cmp	r3, #64	; 0x40
 8005cd0:	d103      	bne.n	8005cda <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f880 	bl	8005dd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8005cd8:	e012      	b.n	8005d00 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	781a      	ldrb	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cfe:	e7ff      	b.n	8005d00 <I2C_MasterTransmit_TXE+0x130>
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b21      	cmp	r3, #33	; 0x21
 8005d20:	d156      	bne.n	8005dd0 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005d50:	e03e      	b.n	8005dd0 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d01d      	beq.n	8005d94 <I2C_MasterTransmit_BTF+0x8c>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d01a      	beq.n	8005d94 <I2C_MasterTransmit_BTF+0x8c>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d64:	d016      	beq.n	8005d94 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d74:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2211      	movs	r2, #17
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fd fa8d 	bl	80032ac <HAL_I2C_MasterTxCpltCallback>
}
 8005d92:	e01d      	b.n	8005dd0 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005da2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fd fa6e 	bl	80032ac <HAL_I2C_MasterTxCpltCallback>
}
 8005dd0:	bf00      	nop
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d11d      	bne.n	8005e2c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d10b      	bne.n	8005e10 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	1c9a      	adds	r2, r3, #2
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005e0e:	e06e      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	121b      	asrs	r3, r3, #8
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e2a:	e060      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10b      	bne.n	8005e4c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e4a:	e050      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d14c      	bne.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	2b22      	cmp	r3, #34	; 0x22
 8005e58:	d108      	bne.n	8005e6c <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e68:	601a      	str	r2, [r3, #0]
}
 8005e6a:	e040      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d015      	beq.n	8005ea2 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b21      	cmp	r3, #33	; 0x21
 8005e7a:	d112      	bne.n	8005ea2 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	781a      	ldrb	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ea0:	e025      	b.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d120      	bne.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	2b21      	cmp	r3, #33	; 0x21
 8005eb0:	d11d      	bne.n	8005eee <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ec0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fe53 	bl	8005b94 <HAL_I2C_MemTxCpltCallback>
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b22      	cmp	r3, #34	; 0x22
 8005f08:	f040 80a2 	bne.w	8006050 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b03      	cmp	r3, #3
 8005f18:	d921      	bls.n	8005f5e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	b2d2      	uxtb	r2, r2
 8005f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	f040 8082 	bne.w	8006050 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005f5c:	e078      	b.n	8006050 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d074      	beq.n	8006050 <I2C_MasterReceive_RXNE+0x15a>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d002      	beq.n	8005f72 <I2C_MasterReceive_RXNE+0x7c>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d16e      	bne.n	8006050 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f818 	bl	8006fa8 <I2C_WaitOnSTOPRequestThroughIT>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d142      	bne.n	8006004 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f9c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691a      	ldr	r2, [r3, #16]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d10a      	bne.n	8005fee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fdde 	bl	8005ba8 <HAL_I2C_MemRxCpltCallback>
}
 8005fec:	e030      	b.n	8006050 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2212      	movs	r2, #18
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fd f95f 	bl	80032c0 <HAL_I2C_MasterRxCpltCallback>
}
 8006002:	e025      	b.n	8006050 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006012:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2220      	movs	r2, #32
 800603e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fd f962 	bl	8003314 <HAL_I2C_ErrorCallback>
}
 8006050:	bf00      	nop
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b04      	cmp	r3, #4
 800606e:	d11b      	bne.n	80060a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685a      	ldr	r2, [r3, #4]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80060a6:	e0bd      	b.n	8006224 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d129      	bne.n	8006106 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	d00a      	beq.n	80060de <I2C_MasterReceive_BTF+0x86>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d007      	beq.n	80060de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	b29a      	uxth	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006104:	e08e      	b.n	8006224 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d176      	bne.n	80061fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d002      	beq.n	800611c <I2C_MasterReceive_BTF+0xc4>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b10      	cmp	r3, #16
 800611a:	d108      	bne.n	800612e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e019      	b.n	8006162 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b04      	cmp	r3, #4
 8006132:	d002      	beq.n	800613a <I2C_MasterReceive_BTF+0xe2>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d108      	bne.n	800614c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e00a      	b.n	8006162 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b10      	cmp	r3, #16
 8006150:	d007      	beq.n	8006162 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006160:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691a      	ldr	r2, [r3, #16]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b40      	cmp	r3, #64	; 0x40
 80061d0:	d10a      	bne.n	80061e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fce1 	bl	8005ba8 <HAL_I2C_MemRxCpltCallback>
}
 80061e6:	e01d      	b.n	8006224 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2212      	movs	r2, #18
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fd f862 	bl	80032c0 <HAL_I2C_MasterRxCpltCallback>
}
 80061fc:	e012      	b.n	8006224 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006224:	bf00      	nop
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b40      	cmp	r3, #64	; 0x40
 800623e:	d117      	bne.n	8006270 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624c:	b2db      	uxtb	r3, r3
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006258:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800625a:	e067      	b.n	800632c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006260:	b2db      	uxtb	r3, r3
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	b2da      	uxtb	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	611a      	str	r2, [r3, #16]
}
 800626e:	e05d      	b.n	800632c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006278:	d133      	bne.n	80062e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b21      	cmp	r3, #33	; 0x21
 8006284:	d109      	bne.n	800629a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006296:	611a      	str	r2, [r3, #16]
 8006298:	e008      	b.n	80062ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d004      	beq.n	80062be <I2C_Master_SB+0x92>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d108      	bne.n	80062d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d032      	beq.n	800632c <I2C_Master_SB+0x100>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d02d      	beq.n	800632c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062de:	605a      	str	r2, [r3, #4]
}
 80062e0:	e024      	b.n	800632c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10e      	bne.n	8006308 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	11db      	asrs	r3, r3, #7
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 0306 	and.w	r3, r3, #6
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	f063 030f 	orn	r3, r3, #15
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	611a      	str	r2, [r3, #16]
}
 8006306:	e011      	b.n	800632c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630c:	2b01      	cmp	r3, #1
 800630e:	d10d      	bne.n	800632c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006314:	b29b      	uxth	r3, r3
 8006316:	11db      	asrs	r3, r3, #7
 8006318:	b2db      	uxtb	r3, r3
 800631a:	f003 0306 	and.w	r3, r3, #6
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f063 030e 	orn	r3, r3, #14
 8006324:	b2da      	uxtb	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	611a      	str	r2, [r3, #16]
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006344:	b2da      	uxtb	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <I2C_Master_ADD10+0x26>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d108      	bne.n	8006370 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <I2C_Master_ADD10+0x48>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637e:	605a      	str	r2, [r3, #4]
  }
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800638c:	b480      	push	{r7}
 800638e:	b091      	sub	sp, #68	; 0x44
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800639a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b22      	cmp	r3, #34	; 0x22
 80063b4:	f040 8169 	bne.w	800668a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10f      	bne.n	80063e0 <I2C_Master_ADDR+0x54>
 80063c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063c4:	2b40      	cmp	r3, #64	; 0x40
 80063c6:	d10b      	bne.n	80063e0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063c8:	2300      	movs	r3, #0
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	633b      	str	r3, [r7, #48]	; 0x30
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	633b      	str	r3, [r7, #48]	; 0x30
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	e160      	b.n	80066a2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11d      	bne.n	8006424 <I2C_Master_ADDR+0x98>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063f0:	d118      	bne.n	8006424 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f2:	2300      	movs	r3, #0
 80063f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006416:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	651a      	str	r2, [r3, #80]	; 0x50
 8006422:	e13e      	b.n	80066a2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d113      	bne.n	8006456 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800642e:	2300      	movs	r3, #0
 8006430:	62bb      	str	r3, [r7, #40]	; 0x28
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	62bb      	str	r3, [r7, #40]	; 0x28
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	e115      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b01      	cmp	r3, #1
 800645e:	f040 808a 	bne.w	8006576 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006468:	d137      	bne.n	80064da <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006478:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006488:	d113      	bne.n	80064b2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006498:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649a:	2300      	movs	r3, #0
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	e0e7      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e0d3      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80064da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d02e      	beq.n	800653e <I2C_Master_ADDR+0x1b2>
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d02b      	beq.n	800653e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80064e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e8:	2b12      	cmp	r3, #18
 80064ea:	d102      	bne.n	80064f2 <I2C_Master_ADDR+0x166>
 80064ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d125      	bne.n	800653e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f4:	2b04      	cmp	r3, #4
 80064f6:	d00e      	beq.n	8006516 <I2C_Master_ADDR+0x18a>
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d00b      	beq.n	8006516 <I2C_Master_ADDR+0x18a>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	2b10      	cmp	r3, #16
 8006502:	d008      	beq.n	8006516 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	e007      	b.n	8006526 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006524:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	61fb      	str	r3, [r7, #28]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	e0a1      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654e:	2300      	movs	r3, #0
 8006550:	61bb      	str	r3, [r7, #24]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e085      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d14d      	bne.n	800661c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	2b04      	cmp	r3, #4
 8006584:	d016      	beq.n	80065b4 <I2C_Master_ADDR+0x228>
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	2b02      	cmp	r3, #2
 800658a:	d013      	beq.n	80065b4 <I2C_Master_ADDR+0x228>
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	2b10      	cmp	r3, #16
 8006590:	d010      	beq.n	80065b4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065a0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e007      	b.n	80065c4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065c2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d2:	d117      	bne.n	8006604 <I2C_Master_ADDR+0x278>
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065da:	d00b      	beq.n	80065f4 <I2C_Master_ADDR+0x268>
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d008      	beq.n	80065f4 <I2C_Master_ADDR+0x268>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d005      	beq.n	80065f4 <I2C_Master_ADDR+0x268>
 80065e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ea:	2b10      	cmp	r3, #16
 80065ec:	d002      	beq.n	80065f4 <I2C_Master_ADDR+0x268>
 80065ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d107      	bne.n	8006604 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006602:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	617b      	str	r3, [r7, #20]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	e032      	b.n	8006682 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800662a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800663a:	d117      	bne.n	800666c <I2C_Master_ADDR+0x2e0>
 800663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006642:	d00b      	beq.n	800665c <I2C_Master_ADDR+0x2d0>
 8006644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006646:	2b01      	cmp	r3, #1
 8006648:	d008      	beq.n	800665c <I2C_Master_ADDR+0x2d0>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	2b08      	cmp	r3, #8
 800664e:	d005      	beq.n	800665c <I2C_Master_ADDR+0x2d0>
 8006650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006652:	2b10      	cmp	r3, #16
 8006654:	d002      	beq.n	800665c <I2C_Master_ADDR+0x2d0>
 8006656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006658:	2b20      	cmp	r3, #32
 800665a:	d107      	bne.n	800666c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800666a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006688:	e00b      	b.n	80066a2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
}
 80066a0:	e7ff      	b.n	80066a2 <I2C_Master_ADDR+0x316>
 80066a2:	bf00      	nop
 80066a4:	3744      	adds	r7, #68	; 0x44
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d02b      	beq.n	8006720 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d114      	bne.n	8006720 <I2C_SlaveTransmit_TXE+0x72>
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b29      	cmp	r3, #41	; 0x29
 80066fa:	d111      	bne.n	8006720 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2221      	movs	r2, #33	; 0x21
 8006710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2228      	movs	r2, #40	; 0x28
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff fa0e 	bl	8005b3c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d011      	beq.n	800675e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d02c      	beq.n	80067de <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d114      	bne.n	80067de <I2C_SlaveReceive_RXNE+0x74>
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	2b2a      	cmp	r3, #42	; 0x2a
 80067b8:	d111      	bne.n	80067de <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2222      	movs	r2, #34	; 0x22
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2228      	movs	r2, #40	; 0x28
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff f9b9 	bl	8005b50 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d012      	beq.n	800681e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29a      	uxth	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006844:	2b28      	cmp	r3, #40	; 0x28
 8006846:	d127      	bne.n	8006898 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006856:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006864:	2301      	movs	r3, #1
 8006866:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	09db      	lsrs	r3, r3, #7
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	81bb      	strh	r3, [r7, #12]
 800687a:	e002      	b.n	8006882 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800688a:	89ba      	ldrh	r2, [r7, #12]
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff f967 	bl	8005b64 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006896:	e008      	b.n	80068aa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0202 	mvn.w	r2, #2
 80068a0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068d2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80068d4:	2300      	movs	r3, #0
 80068d6:	60bb      	str	r3, [r7, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0201 	orr.w	r2, r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006900:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800690c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006910:	d172      	bne.n	80069f8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b22      	cmp	r3, #34	; 0x22
 8006916:	d002      	beq.n	800691e <I2C_Slave_STOPF+0x6a>
 8006918:	7bfb      	ldrb	r3, [r7, #15]
 800691a:	2b2a      	cmp	r3, #42	; 0x2a
 800691c:	d135      	bne.n	800698a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	b29a      	uxth	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f043 0204 	orr.w	r2, r3, #4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006950:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe f9e6 	bl	8004d28 <HAL_DMA_GetState>
 800695c:	4603      	mov	r3, r0
 800695e:	2b01      	cmp	r3, #1
 8006960:	d049      	beq.n	80069f6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	4a69      	ldr	r2, [pc, #420]	; (8006b0c <I2C_Slave_STOPF+0x258>)
 8006968:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	4618      	mov	r0, r3
 8006970:	f7fe f9b8 	bl	8004ce4 <HAL_DMA_Abort_IT>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d03d      	beq.n	80069f6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006988:	e035      	b.n	80069f6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b29a      	uxth	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	f043 0204 	orr.w	r2, r3, #4
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe f9b0 	bl	8004d28 <HAL_DMA_GetState>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d014      	beq.n	80069f8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d2:	4a4e      	ldr	r2, [pc, #312]	; (8006b0c <I2C_Slave_STOPF+0x258>)
 80069d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe f982 	bl	8004ce4 <HAL_DMA_Abort_IT>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d008      	beq.n	80069f8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
 80069f4:	e000      	b.n	80069f8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069f6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d03e      	beq.n	8006a80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d112      	bne.n	8006a36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691a      	ldr	r2, [r3, #16]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d112      	bne.n	8006a6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a78:	f043 0204 	orr.w	r2, r3, #4
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f8b3 	bl	8006bf4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a8e:	e039      	b.n	8006b04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	2b2a      	cmp	r3, #42	; 0x2a
 8006a94:	d109      	bne.n	8006aaa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2228      	movs	r2, #40	; 0x28
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff f853 	bl	8005b50 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b28      	cmp	r3, #40	; 0x28
 8006ab4:	d111      	bne.n	8006ada <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <I2C_Slave_STOPF+0x25c>)
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff f854 	bl	8005b80 <HAL_I2C_ListenCpltCallback>
}
 8006ad8:	e014      	b.n	8006b04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ade:	2b22      	cmp	r3, #34	; 0x22
 8006ae0:	d002      	beq.n	8006ae8 <I2C_Slave_STOPF+0x234>
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b22      	cmp	r3, #34	; 0x22
 8006ae6:	d10d      	bne.n	8006b04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff f826 	bl	8005b50 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	08006e59 	.word	0x08006e59
 8006b10:	ffff0000 	.word	0xffff0000

08006b14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d002      	beq.n	8006b36 <I2C_Slave_AF+0x22>
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d129      	bne.n	8006b8a <I2C_Slave_AF+0x76>
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	2b28      	cmp	r3, #40	; 0x28
 8006b3a:	d126      	bne.n	8006b8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a2c      	ldr	r2, [pc, #176]	; (8006bf0 <I2C_Slave_AF+0xdc>)
 8006b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fe fffc 	bl	8005b80 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b88:	e02e      	b.n	8006be8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b21      	cmp	r3, #33	; 0x21
 8006b8e:	d126      	bne.n	8006bde <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a17      	ldr	r2, [pc, #92]	; (8006bf0 <I2C_Slave_AF+0xdc>)
 8006b94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2221      	movs	r2, #33	; 0x21
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bc4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fe ffb0 	bl	8005b3c <HAL_I2C_SlaveTxCpltCallback>
}
 8006bdc:	e004      	b.n	8006be8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006be6:	615a      	str	r2, [r3, #20]
}
 8006be8:	bf00      	nop
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	ffff0000 	.word	0xffff0000

08006bf4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c02:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c0a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c0c:	7bbb      	ldrb	r3, [r7, #14]
 8006c0e:	2b10      	cmp	r3, #16
 8006c10:	d002      	beq.n	8006c18 <I2C_ITError+0x24>
 8006c12:	7bbb      	ldrb	r3, [r7, #14]
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d10a      	bne.n	8006c2e <I2C_ITError+0x3a>
 8006c18:	7bfb      	ldrb	r3, [r7, #15]
 8006c1a:	2b22      	cmp	r3, #34	; 0x22
 8006c1c:	d107      	bne.n	8006c2e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c2c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c34:	2b28      	cmp	r3, #40	; 0x28
 8006c36:	d107      	bne.n	8006c48 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2228      	movs	r2, #40	; 0x28
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c46:	e015      	b.n	8006c74 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c56:	d00a      	beq.n	8006c6e <I2C_ITError+0x7a>
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	2b60      	cmp	r3, #96	; 0x60
 8006c5c:	d007      	beq.n	8006c6e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	d162      	bne.n	8006d4a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c92:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d020      	beq.n	8006ce4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca6:	4a6a      	ldr	r2, [pc, #424]	; (8006e50 <I2C_ITError+0x25c>)
 8006ca8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe f818 	bl	8004ce4 <HAL_DMA_Abort_IT>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 8089 	beq.w	8006dce <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0201 	bic.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cde:	4610      	mov	r0, r2
 8006ce0:	4798      	blx	r3
 8006ce2:	e074      	b.n	8006dce <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	4a59      	ldr	r2, [pc, #356]	; (8006e50 <I2C_ITError+0x25c>)
 8006cea:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7fd fff7 	bl	8004ce4 <HAL_DMA_Abort_IT>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d068      	beq.n	8006dce <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d06:	2b40      	cmp	r3, #64	; 0x40
 8006d08:	d10b      	bne.n	8006d22 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d44:	4610      	mov	r0, r2
 8006d46:	4798      	blx	r3
 8006d48:	e041      	b.n	8006dce <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b60      	cmp	r3, #96	; 0x60
 8006d54:	d125      	bne.n	8006da2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	d10b      	bne.n	8006d8a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0201 	bic.w	r2, r2, #1
 8006d98:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fe ff0e 	bl	8005bbc <HAL_I2C_AbortCpltCallback>
 8006da0:	e015      	b.n	8006dce <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b40      	cmp	r3, #64	; 0x40
 8006dae:	d10b      	bne.n	8006dc8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691a      	ldr	r2, [r3, #16]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f7fc faa3 	bl	8003314 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10e      	bne.n	8006dfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d104      	bne.n	8006dfc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685a      	ldr	r2, [r3, #4]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e0a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e12:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d113      	bne.n	8006e48 <I2C_ITError+0x254>
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	2b28      	cmp	r3, #40	; 0x28
 8006e24:	d110      	bne.n	8006e48 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a0a      	ldr	r2, [pc, #40]	; (8006e54 <I2C_ITError+0x260>)
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7fe fe9c 	bl	8005b80 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	08006e59 	.word	0x08006e59
 8006e54:	ffff0000 	.word	0xffff0000

08006e58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e72:	4b4b      	ldr	r3, [pc, #300]	; (8006fa0 <I2C_DMAAbort+0x148>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	4a4a      	ldr	r2, [pc, #296]	; (8006fa4 <I2C_DMAAbort+0x14c>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	0a1a      	lsrs	r2, r3, #8
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	00da      	lsls	r2, r3, #3
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	f043 0220 	orr.w	r2, r3, #32
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e9e:	e00a      	b.n	8006eb6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb4:	d0ea      	beq.n	8006e8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	2200      	movs	r2, #0
 8006efa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	2200      	movs	r2, #0
 8006f0a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b60      	cmp	r3, #96	; 0x60
 8006f26:	d10e      	bne.n	8006f46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f3e:	6978      	ldr	r0, [r7, #20]
 8006f40:	f7fe fe3c 	bl	8005bbc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f44:	e027      	b.n	8006f96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f46:	7cfb      	ldrb	r3, [r7, #19]
 8006f48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f4c:	2b28      	cmp	r3, #40	; 0x28
 8006f4e:	d117      	bne.n	8006f80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0201 	orr.w	r2, r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2228      	movs	r2, #40	; 0x28
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f7e:	e007      	b.n	8006f90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f90:	6978      	ldr	r0, [r7, #20]
 8006f92:	f7fc f9bf 	bl	8003314 <HAL_I2C_ErrorCallback>
}
 8006f96:	bf00      	nop
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000018 	.word	0x20000018
 8006fa4:	14f8b589 	.word	0x14f8b589

08006fa8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fb4:	4b13      	ldr	r3, [pc, #76]	; (8007004 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	08db      	lsrs	r3, r3, #3
 8006fba:	4a13      	ldr	r2, [pc, #76]	; (8007008 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	0a1a      	lsrs	r2, r3, #8
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d107      	bne.n	8006fe6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f043 0220 	orr.w	r2, r3, #32
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e008      	b.n	8006ff8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff4:	d0e9      	beq.n	8006fca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	20000018 	.word	0x20000018
 8007008:	14f8b589 	.word	0x14f8b589

0800700c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800701c:	d103      	bne.n	8007026 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007024:	e007      	b.n	8007036 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800702e:	d102      	bne.n	8007036 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2208      	movs	r2, #8
 8007034:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0cc      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007058:	4b68      	ldr	r3, [pc, #416]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d90c      	bls.n	8007080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007066:	4b65      	ldr	r3, [pc, #404]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800706e:	4b63      	ldr	r3, [pc, #396]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e0b8      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0302 	and.w	r3, r3, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	d020      	beq.n	80070ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007098:	4b59      	ldr	r3, [pc, #356]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	4a58      	ldr	r2, [pc, #352]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 800709e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070b0:	4b53      	ldr	r3, [pc, #332]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	4a52      	ldr	r2, [pc, #328]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070bc:	4b50      	ldr	r3, [pc, #320]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	494d      	ldr	r1, [pc, #308]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d044      	beq.n	8007164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d107      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070e2:	4b47      	ldr	r3, [pc, #284]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d119      	bne.n	8007122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e07f      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d003      	beq.n	8007102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d107      	bne.n	8007112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007102:	4b3f      	ldr	r3, [pc, #252]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e06f      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007112:	4b3b      	ldr	r3, [pc, #236]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e067      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007122:	4b37      	ldr	r3, [pc, #220]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f023 0203 	bic.w	r2, r3, #3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	4934      	ldr	r1, [pc, #208]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	4313      	orrs	r3, r2
 8007132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007134:	f7fc ff44 	bl	8003fc0 <HAL_GetTick>
 8007138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800713a:	e00a      	b.n	8007152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800713c:	f7fc ff40 	bl	8003fc0 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	f241 3288 	movw	r2, #5000	; 0x1388
 800714a:	4293      	cmp	r3, r2
 800714c:	d901      	bls.n	8007152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800714e:	2303      	movs	r3, #3
 8007150:	e04f      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007152:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 020c 	and.w	r2, r3, #12
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	429a      	cmp	r2, r3
 8007162:	d1eb      	bne.n	800713c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007164:	4b25      	ldr	r3, [pc, #148]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 030f 	and.w	r3, r3, #15
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d20c      	bcs.n	800718c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007172:	4b22      	ldr	r3, [pc, #136]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800717a:	4b20      	ldr	r3, [pc, #128]	; (80071fc <HAL_RCC_ClockConfig+0x1b8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d001      	beq.n	800718c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e032      	b.n	80071f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007198:	4b19      	ldr	r3, [pc, #100]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	4916      	ldr	r1, [pc, #88]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d009      	beq.n	80071ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071b6:	4b12      	ldr	r3, [pc, #72]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	490e      	ldr	r1, [pc, #56]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80071ca:	f000 f887 	bl	80072dc <HAL_RCC_GetSysClockFreq>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <HAL_RCC_ClockConfig+0x1bc>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	091b      	lsrs	r3, r3, #4
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	490a      	ldr	r1, [pc, #40]	; (8007204 <HAL_RCC_ClockConfig+0x1c0>)
 80071dc:	5ccb      	ldrb	r3, [r1, r3]
 80071de:	fa22 f303 	lsr.w	r3, r2, r3
 80071e2:	4a09      	ldr	r2, [pc, #36]	; (8007208 <HAL_RCC_ClockConfig+0x1c4>)
 80071e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <HAL_RCC_ClockConfig+0x1c8>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fc fd0c 	bl	8003c08 <HAL_InitTick>

  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	40023c00 	.word	0x40023c00
 8007200:	40023800 	.word	0x40023800
 8007204:	08012e70 	.word	0x08012e70
 8007208:	20000018 	.word	0x20000018
 800720c:	2000001c 	.word	0x2000001c

08007210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007214:	4b03      	ldr	r3, [pc, #12]	; (8007224 <HAL_RCC_GetHCLKFreq+0x14>)
 8007216:	681b      	ldr	r3, [r3, #0]
}
 8007218:	4618      	mov	r0, r3
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000018 	.word	0x20000018

08007228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800722c:	f7ff fff0 	bl	8007210 <HAL_RCC_GetHCLKFreq>
 8007230:	4602      	mov	r2, r0
 8007232:	4b05      	ldr	r3, [pc, #20]	; (8007248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	0a9b      	lsrs	r3, r3, #10
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	4903      	ldr	r1, [pc, #12]	; (800724c <HAL_RCC_GetPCLK1Freq+0x24>)
 800723e:	5ccb      	ldrb	r3, [r1, r3]
 8007240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007244:	4618      	mov	r0, r3
 8007246:	bd80      	pop	{r7, pc}
 8007248:	40023800 	.word	0x40023800
 800724c:	08012e80 	.word	0x08012e80

08007250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007254:	f7ff ffdc 	bl	8007210 <HAL_RCC_GetHCLKFreq>
 8007258:	4602      	mov	r2, r0
 800725a:	4b05      	ldr	r3, [pc, #20]	; (8007270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	0b5b      	lsrs	r3, r3, #13
 8007260:	f003 0307 	and.w	r3, r3, #7
 8007264:	4903      	ldr	r1, [pc, #12]	; (8007274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007266:	5ccb      	ldrb	r3, [r1, r3]
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800726c:	4618      	mov	r0, r3
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40023800 	.word	0x40023800
 8007274:	08012e80 	.word	0x08012e80

08007278 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	220f      	movs	r2, #15
 8007286:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007288:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <HAL_RCC_GetClockConfig+0x5c>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0203 	and.w	r2, r3, #3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007294:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <HAL_RCC_GetClockConfig+0x5c>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <HAL_RCC_GetClockConfig+0x5c>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80072ac:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <HAL_RCC_GetClockConfig+0x5c>)
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	08db      	lsrs	r3, r3, #3
 80072b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072ba:	4b07      	ldr	r3, [pc, #28]	; (80072d8 <HAL_RCC_GetClockConfig+0x60>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 020f 	and.w	r2, r3, #15
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	601a      	str	r2, [r3, #0]
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	40023800 	.word	0x40023800
 80072d8:	40023c00 	.word	0x40023c00

080072dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e0:	b088      	sub	sp, #32
 80072e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072f8:	4bce      	ldr	r3, [pc, #824]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 030c 	and.w	r3, r3, #12
 8007300:	2b0c      	cmp	r3, #12
 8007302:	f200 818d 	bhi.w	8007620 <HAL_RCC_GetSysClockFreq+0x344>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <HAL_RCC_GetSysClockFreq+0x30>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007341 	.word	0x08007341
 8007310:	08007621 	.word	0x08007621
 8007314:	08007621 	.word	0x08007621
 8007318:	08007621 	.word	0x08007621
 800731c:	08007347 	.word	0x08007347
 8007320:	08007621 	.word	0x08007621
 8007324:	08007621 	.word	0x08007621
 8007328:	08007621 	.word	0x08007621
 800732c:	0800734d 	.word	0x0800734d
 8007330:	08007621 	.word	0x08007621
 8007334:	08007621 	.word	0x08007621
 8007338:	08007621 	.word	0x08007621
 800733c:	080074c1 	.word	0x080074c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007340:	4bbd      	ldr	r3, [pc, #756]	; (8007638 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007342:	61bb      	str	r3, [r7, #24]
       break;
 8007344:	e16f      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007346:	4bbd      	ldr	r3, [pc, #756]	; (800763c <HAL_RCC_GetSysClockFreq+0x360>)
 8007348:	61bb      	str	r3, [r7, #24]
      break;
 800734a:	e16c      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800734c:	4bb9      	ldr	r3, [pc, #740]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007354:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007356:	4bb7      	ldr	r3, [pc, #732]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d053      	beq.n	800740a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007362:	4bb4      	ldr	r3, [pc, #720]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	461a      	mov	r2, r3
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007372:	f04f 0100 	mov.w	r1, #0
 8007376:	ea02 0400 	and.w	r4, r2, r0
 800737a:	603c      	str	r4, [r7, #0]
 800737c:	400b      	ands	r3, r1
 800737e:	607b      	str	r3, [r7, #4]
 8007380:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007384:	4620      	mov	r0, r4
 8007386:	4629      	mov	r1, r5
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	014b      	lsls	r3, r1, #5
 8007392:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007396:	0142      	lsls	r2, r0, #5
 8007398:	4610      	mov	r0, r2
 800739a:	4619      	mov	r1, r3
 800739c:	4623      	mov	r3, r4
 800739e:	1ac0      	subs	r0, r0, r3
 80073a0:	462b      	mov	r3, r5
 80073a2:	eb61 0103 	sbc.w	r1, r1, r3
 80073a6:	f04f 0200 	mov.w	r2, #0
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	018b      	lsls	r3, r1, #6
 80073b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80073b4:	0182      	lsls	r2, r0, #6
 80073b6:	1a12      	subs	r2, r2, r0
 80073b8:	eb63 0301 	sbc.w	r3, r3, r1
 80073bc:	f04f 0000 	mov.w	r0, #0
 80073c0:	f04f 0100 	mov.w	r1, #0
 80073c4:	00d9      	lsls	r1, r3, #3
 80073c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073ca:	00d0      	lsls	r0, r2, #3
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4621      	mov	r1, r4
 80073d2:	1852      	adds	r2, r2, r1
 80073d4:	4629      	mov	r1, r5
 80073d6:	eb43 0101 	adc.w	r1, r3, r1
 80073da:	460b      	mov	r3, r1
 80073dc:	f04f 0000 	mov.w	r0, #0
 80073e0:	f04f 0100 	mov.w	r1, #0
 80073e4:	0259      	lsls	r1, r3, #9
 80073e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80073ea:	0250      	lsls	r0, r2, #9
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4610      	mov	r0, r2
 80073f2:	4619      	mov	r1, r3
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	f7f9 fc9c 	bl	8000d38 <__aeabi_uldivmod>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4613      	mov	r3, r2
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	e04c      	b.n	80074a4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800740a:	4b8a      	ldr	r3, [pc, #552]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	099b      	lsrs	r3, r3, #6
 8007410:	461a      	mov	r2, r3
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	f240 10ff 	movw	r0, #511	; 0x1ff
 800741a:	f04f 0100 	mov.w	r1, #0
 800741e:	ea02 0a00 	and.w	sl, r2, r0
 8007422:	ea03 0b01 	and.w	fp, r3, r1
 8007426:	4650      	mov	r0, sl
 8007428:	4659      	mov	r1, fp
 800742a:	f04f 0200 	mov.w	r2, #0
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	014b      	lsls	r3, r1, #5
 8007434:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007438:	0142      	lsls	r2, r0, #5
 800743a:	4610      	mov	r0, r2
 800743c:	4619      	mov	r1, r3
 800743e:	ebb0 000a 	subs.w	r0, r0, sl
 8007442:	eb61 010b 	sbc.w	r1, r1, fp
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	018b      	lsls	r3, r1, #6
 8007450:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007454:	0182      	lsls	r2, r0, #6
 8007456:	1a12      	subs	r2, r2, r0
 8007458:	eb63 0301 	sbc.w	r3, r3, r1
 800745c:	f04f 0000 	mov.w	r0, #0
 8007460:	f04f 0100 	mov.w	r1, #0
 8007464:	00d9      	lsls	r1, r3, #3
 8007466:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800746a:	00d0      	lsls	r0, r2, #3
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	eb12 020a 	adds.w	r2, r2, sl
 8007474:	eb43 030b 	adc.w	r3, r3, fp
 8007478:	f04f 0000 	mov.w	r0, #0
 800747c:	f04f 0100 	mov.w	r1, #0
 8007480:	0299      	lsls	r1, r3, #10
 8007482:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007486:	0290      	lsls	r0, r2, #10
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4610      	mov	r0, r2
 800748e:	4619      	mov	r1, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	461a      	mov	r2, r3
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	f7f9 fc4e 	bl	8000d38 <__aeabi_uldivmod>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4613      	mov	r3, r2
 80074a2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074a4:	4b63      	ldr	r3, [pc, #396]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	3301      	adds	r3, #1
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074bc:	61bb      	str	r3, [r7, #24]
      break;
 80074be:	e0b2      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074c0:	4b5c      	ldr	r3, [pc, #368]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074ca:	4b5a      	ldr	r3, [pc, #360]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d04d      	beq.n	8007572 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074d6:	4b57      	ldr	r3, [pc, #348]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	099b      	lsrs	r3, r3, #6
 80074dc:	461a      	mov	r2, r3
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074e6:	f04f 0100 	mov.w	r1, #0
 80074ea:	ea02 0800 	and.w	r8, r2, r0
 80074ee:	ea03 0901 	and.w	r9, r3, r1
 80074f2:	4640      	mov	r0, r8
 80074f4:	4649      	mov	r1, r9
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	014b      	lsls	r3, r1, #5
 8007500:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007504:	0142      	lsls	r2, r0, #5
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	ebb0 0008 	subs.w	r0, r0, r8
 800750e:	eb61 0109 	sbc.w	r1, r1, r9
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	f04f 0300 	mov.w	r3, #0
 800751a:	018b      	lsls	r3, r1, #6
 800751c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007520:	0182      	lsls	r2, r0, #6
 8007522:	1a12      	subs	r2, r2, r0
 8007524:	eb63 0301 	sbc.w	r3, r3, r1
 8007528:	f04f 0000 	mov.w	r0, #0
 800752c:	f04f 0100 	mov.w	r1, #0
 8007530:	00d9      	lsls	r1, r3, #3
 8007532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007536:	00d0      	lsls	r0, r2, #3
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	eb12 0208 	adds.w	r2, r2, r8
 8007540:	eb43 0309 	adc.w	r3, r3, r9
 8007544:	f04f 0000 	mov.w	r0, #0
 8007548:	f04f 0100 	mov.w	r1, #0
 800754c:	0259      	lsls	r1, r3, #9
 800754e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007552:	0250      	lsls	r0, r2, #9
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4610      	mov	r0, r2
 800755a:	4619      	mov	r1, r3
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	461a      	mov	r2, r3
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	f7f9 fbe8 	bl	8000d38 <__aeabi_uldivmod>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4613      	mov	r3, r2
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e04a      	b.n	8007608 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007572:	4b30      	ldr	r3, [pc, #192]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	099b      	lsrs	r3, r3, #6
 8007578:	461a      	mov	r2, r3
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007582:	f04f 0100 	mov.w	r1, #0
 8007586:	ea02 0400 	and.w	r4, r2, r0
 800758a:	ea03 0501 	and.w	r5, r3, r1
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f04f 0200 	mov.w	r2, #0
 8007596:	f04f 0300 	mov.w	r3, #0
 800759a:	014b      	lsls	r3, r1, #5
 800759c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80075a0:	0142      	lsls	r2, r0, #5
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	1b00      	subs	r0, r0, r4
 80075a8:	eb61 0105 	sbc.w	r1, r1, r5
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	018b      	lsls	r3, r1, #6
 80075b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075ba:	0182      	lsls	r2, r0, #6
 80075bc:	1a12      	subs	r2, r2, r0
 80075be:	eb63 0301 	sbc.w	r3, r3, r1
 80075c2:	f04f 0000 	mov.w	r0, #0
 80075c6:	f04f 0100 	mov.w	r1, #0
 80075ca:	00d9      	lsls	r1, r3, #3
 80075cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075d0:	00d0      	lsls	r0, r2, #3
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	1912      	adds	r2, r2, r4
 80075d8:	eb45 0303 	adc.w	r3, r5, r3
 80075dc:	f04f 0000 	mov.w	r0, #0
 80075e0:	f04f 0100 	mov.w	r1, #0
 80075e4:	0299      	lsls	r1, r3, #10
 80075e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80075ea:	0290      	lsls	r0, r2, #10
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4610      	mov	r0, r2
 80075f2:	4619      	mov	r1, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	f7f9 fb9c 	bl	8000d38 <__aeabi_uldivmod>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4613      	mov	r3, r2
 8007606:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <HAL_RCC_GetSysClockFreq+0x358>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	0f1b      	lsrs	r3, r3, #28
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	61bb      	str	r3, [r7, #24]
      break;
 800761e:	e002      	b.n	8007626 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007620:	4b05      	ldr	r3, [pc, #20]	; (8007638 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007622:	61bb      	str	r3, [r7, #24]
      break;
 8007624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007626:	69bb      	ldr	r3, [r7, #24]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3720      	adds	r7, #32
 800762c:	46bd      	mov	sp, r7
 800762e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007632:	bf00      	nop
 8007634:	40023800 	.word	0x40023800
 8007638:	00f42400 	.word	0x00f42400
 800763c:	007a1200 	.word	0x007a1200

08007640 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e28d      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8083 	beq.w	8007766 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007660:	4b94      	ldr	r3, [pc, #592]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 030c 	and.w	r3, r3, #12
 8007668:	2b04      	cmp	r3, #4
 800766a:	d019      	beq.n	80076a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800766c:	4b91      	ldr	r3, [pc, #580]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007674:	2b08      	cmp	r3, #8
 8007676:	d106      	bne.n	8007686 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007678:	4b8e      	ldr	r3, [pc, #568]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007684:	d00c      	beq.n	80076a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007686:	4b8b      	ldr	r3, [pc, #556]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800768e:	2b0c      	cmp	r3, #12
 8007690:	d112      	bne.n	80076b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007692:	4b88      	ldr	r3, [pc, #544]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800769a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800769e:	d10b      	bne.n	80076b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a0:	4b84      	ldr	r3, [pc, #528]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d05b      	beq.n	8007764 <HAL_RCC_OscConfig+0x124>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d157      	bne.n	8007764 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e25a      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c0:	d106      	bne.n	80076d0 <HAL_RCC_OscConfig+0x90>
 80076c2:	4b7c      	ldr	r3, [pc, #496]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a7b      	ldr	r2, [pc, #492]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	e01d      	b.n	800770c <HAL_RCC_OscConfig+0xcc>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076d8:	d10c      	bne.n	80076f4 <HAL_RCC_OscConfig+0xb4>
 80076da:	4b76      	ldr	r3, [pc, #472]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a75      	ldr	r2, [pc, #468]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	4b73      	ldr	r3, [pc, #460]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a72      	ldr	r2, [pc, #456]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	e00b      	b.n	800770c <HAL_RCC_OscConfig+0xcc>
 80076f4:	4b6f      	ldr	r3, [pc, #444]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a6e      	ldr	r2, [pc, #440]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80076fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	4b6c      	ldr	r3, [pc, #432]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a6b      	ldr	r2, [pc, #428]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800770a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d013      	beq.n	800773c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fc fc54 	bl	8003fc0 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800771c:	f7fc fc50 	bl	8003fc0 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b64      	cmp	r3, #100	; 0x64
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e21f      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800772e:	4b61      	ldr	r3, [pc, #388]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0xdc>
 800773a:	e014      	b.n	8007766 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773c:	f7fc fc40 	bl	8003fc0 <HAL_GetTick>
 8007740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007744:	f7fc fc3c 	bl	8003fc0 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b64      	cmp	r3, #100	; 0x64
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e20b      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007756:	4b57      	ldr	r3, [pc, #348]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f0      	bne.n	8007744 <HAL_RCC_OscConfig+0x104>
 8007762:	e000      	b.n	8007766 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d06f      	beq.n	8007852 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007772:	4b50      	ldr	r3, [pc, #320]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 030c 	and.w	r3, r3, #12
 800777a:	2b00      	cmp	r3, #0
 800777c:	d017      	beq.n	80077ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800777e:	4b4d      	ldr	r3, [pc, #308]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007786:	2b08      	cmp	r3, #8
 8007788:	d105      	bne.n	8007796 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800778a:	4b4a      	ldr	r3, [pc, #296]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007796:	4b47      	ldr	r3, [pc, #284]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800779e:	2b0c      	cmp	r3, #12
 80077a0:	d11c      	bne.n	80077dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077a2:	4b44      	ldr	r3, [pc, #272]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d116      	bne.n	80077dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ae:	4b41      	ldr	r3, [pc, #260]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d005      	beq.n	80077c6 <HAL_RCC_OscConfig+0x186>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d001      	beq.n	80077c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e1d3      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077c6:	4b3b      	ldr	r3, [pc, #236]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	4937      	ldr	r1, [pc, #220]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077da:	e03a      	b.n	8007852 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d020      	beq.n	8007826 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077e4:	4b34      	ldr	r3, [pc, #208]	; (80078b8 <HAL_RCC_OscConfig+0x278>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ea:	f7fc fbe9 	bl	8003fc0 <HAL_GetTick>
 80077ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077f2:	f7fc fbe5 	bl	8003fc0 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e1b4      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007804:	4b2b      	ldr	r3, [pc, #172]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0f0      	beq.n	80077f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007810:	4b28      	ldr	r3, [pc, #160]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	4925      	ldr	r1, [pc, #148]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007820:	4313      	orrs	r3, r2
 8007822:	600b      	str	r3, [r1, #0]
 8007824:	e015      	b.n	8007852 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007826:	4b24      	ldr	r3, [pc, #144]	; (80078b8 <HAL_RCC_OscConfig+0x278>)
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782c:	f7fc fbc8 	bl	8003fc0 <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007832:	e008      	b.n	8007846 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007834:	f7fc fbc4 	bl	8003fc0 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e193      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007846:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1f0      	bne.n	8007834 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d036      	beq.n	80078cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d016      	beq.n	8007894 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007866:	4b15      	ldr	r3, [pc, #84]	; (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007868:	2201      	movs	r2, #1
 800786a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800786c:	f7fc fba8 	bl	8003fc0 <HAL_GetTick>
 8007870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007872:	e008      	b.n	8007886 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007874:	f7fc fba4 	bl	8003fc0 <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d901      	bls.n	8007886 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e173      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <HAL_RCC_OscConfig+0x274>)
 8007888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788a:	f003 0302 	and.w	r3, r3, #2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0f0      	beq.n	8007874 <HAL_RCC_OscConfig+0x234>
 8007892:	e01b      	b.n	80078cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <HAL_RCC_OscConfig+0x27c>)
 8007896:	2200      	movs	r2, #0
 8007898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789a:	f7fc fb91 	bl	8003fc0 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078a0:	e00e      	b.n	80078c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078a2:	f7fc fb8d 	bl	8003fc0 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d907      	bls.n	80078c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e15c      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
 80078b4:	40023800 	.word	0x40023800
 80078b8:	42470000 	.word	0x42470000
 80078bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c0:	4b8a      	ldr	r3, [pc, #552]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 80078c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1ea      	bne.n	80078a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8097 	beq.w	8007a08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078da:	2300      	movs	r3, #0
 80078dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078de:	4b83      	ldr	r3, [pc, #524]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10f      	bne.n	800790a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	60bb      	str	r3, [r7, #8]
 80078ee:	4b7f      	ldr	r3, [pc, #508]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	4a7e      	ldr	r2, [pc, #504]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 80078f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f8:	6413      	str	r3, [r2, #64]	; 0x40
 80078fa:	4b7c      	ldr	r3, [pc, #496]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007902:	60bb      	str	r3, [r7, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800790a:	4b79      	ldr	r3, [pc, #484]	; (8007af0 <HAL_RCC_OscConfig+0x4b0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d118      	bne.n	8007948 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007916:	4b76      	ldr	r3, [pc, #472]	; (8007af0 <HAL_RCC_OscConfig+0x4b0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a75      	ldr	r2, [pc, #468]	; (8007af0 <HAL_RCC_OscConfig+0x4b0>)
 800791c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007922:	f7fc fb4d 	bl	8003fc0 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800792a:	f7fc fb49 	bl	8003fc0 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e118      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800793c:	4b6c      	ldr	r3, [pc, #432]	; (8007af0 <HAL_RCC_OscConfig+0x4b0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0f0      	beq.n	800792a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d106      	bne.n	800795e <HAL_RCC_OscConfig+0x31e>
 8007950:	4b66      	ldr	r3, [pc, #408]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007954:	4a65      	ldr	r2, [pc, #404]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	6713      	str	r3, [r2, #112]	; 0x70
 800795c:	e01c      	b.n	8007998 <HAL_RCC_OscConfig+0x358>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	2b05      	cmp	r3, #5
 8007964:	d10c      	bne.n	8007980 <HAL_RCC_OscConfig+0x340>
 8007966:	4b61      	ldr	r3, [pc, #388]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	4a60      	ldr	r2, [pc, #384]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 800796c:	f043 0304 	orr.w	r3, r3, #4
 8007970:	6713      	str	r3, [r2, #112]	; 0x70
 8007972:	4b5e      	ldr	r3, [pc, #376]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	4a5d      	ldr	r2, [pc, #372]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007978:	f043 0301 	orr.w	r3, r3, #1
 800797c:	6713      	str	r3, [r2, #112]	; 0x70
 800797e:	e00b      	b.n	8007998 <HAL_RCC_OscConfig+0x358>
 8007980:	4b5a      	ldr	r3, [pc, #360]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007984:	4a59      	ldr	r2, [pc, #356]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	6713      	str	r3, [r2, #112]	; 0x70
 800798c:	4b57      	ldr	r3, [pc, #348]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 800798e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007990:	4a56      	ldr	r2, [pc, #344]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007992:	f023 0304 	bic.w	r3, r3, #4
 8007996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d015      	beq.n	80079cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a0:	f7fc fb0e 	bl	8003fc0 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a6:	e00a      	b.n	80079be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a8:	f7fc fb0a 	bl	8003fc0 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e0d7      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079be:	4b4b      	ldr	r3, [pc, #300]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0ee      	beq.n	80079a8 <HAL_RCC_OscConfig+0x368>
 80079ca:	e014      	b.n	80079f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079cc:	f7fc faf8 	bl	8003fc0 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d2:	e00a      	b.n	80079ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079d4:	f7fc faf4 	bl	8003fc0 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e0c1      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ea:	4b40      	ldr	r3, [pc, #256]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 80079ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ee:	f003 0302 	and.w	r3, r3, #2
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1ee      	bne.n	80079d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d105      	bne.n	8007a08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079fc:	4b3b      	ldr	r3, [pc, #236]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 80079fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a00:	4a3a      	ldr	r2, [pc, #232]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	699b      	ldr	r3, [r3, #24]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 80ad 	beq.w	8007b6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a12:	4b36      	ldr	r3, [pc, #216]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f003 030c 	and.w	r3, r3, #12
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d060      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d145      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a26:	4b33      	ldr	r3, [pc, #204]	; (8007af4 <HAL_RCC_OscConfig+0x4b4>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a2c:	f7fc fac8 	bl	8003fc0 <HAL_GetTick>
 8007a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a32:	e008      	b.n	8007a46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a34:	f7fc fac4 	bl	8003fc0 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e093      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a46:	4b29      	ldr	r3, [pc, #164]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1f0      	bne.n	8007a34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69da      	ldr	r2, [r3, #28]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	431a      	orrs	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	019b      	lsls	r3, r3, #6
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	061b      	lsls	r3, r3, #24
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7c:	071b      	lsls	r3, r3, #28
 8007a7e:	491b      	ldr	r1, [pc, #108]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a84:	4b1b      	ldr	r3, [pc, #108]	; (8007af4 <HAL_RCC_OscConfig+0x4b4>)
 8007a86:	2201      	movs	r2, #1
 8007a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8a:	f7fc fa99 	bl	8003fc0 <HAL_GetTick>
 8007a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a92:	f7fc fa95 	bl	8003fc0 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e064      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aa4:	4b11      	ldr	r3, [pc, #68]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d0f0      	beq.n	8007a92 <HAL_RCC_OscConfig+0x452>
 8007ab0:	e05c      	b.n	8007b6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ab2:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <HAL_RCC_OscConfig+0x4b4>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab8:	f7fc fa82 	bl	8003fc0 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ac0:	f7fc fa7e 	bl	8003fc0 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e04d      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad2:	4b06      	ldr	r3, [pc, #24]	; (8007aec <HAL_RCC_OscConfig+0x4ac>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x480>
 8007ade:	e045      	b.n	8007b6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d107      	bne.n	8007af8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e040      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
 8007aec:	40023800 	.word	0x40023800
 8007af0:	40007000 	.word	0x40007000
 8007af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007af8:	4b1f      	ldr	r3, [pc, #124]	; (8007b78 <HAL_RCC_OscConfig+0x538>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d030      	beq.n	8007b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d129      	bne.n	8007b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d122      	bne.n	8007b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d119      	bne.n	8007b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	085b      	lsrs	r3, r3, #1
 8007b40:	3b01      	subs	r3, #1
 8007b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d10f      	bne.n	8007b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d107      	bne.n	8007b68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d001      	beq.n	8007b6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e000      	b.n	8007b6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	40023800 	.word	0x40023800

08007b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e041      	b.n	8007c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d106      	bne.n	8007ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fb ff84 	bl	8003ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	f000 fce2 	bl	8008584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d001      	beq.n	8007c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e04e      	b.n	8007cd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0201 	orr.w	r2, r2, #1
 8007c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a23      	ldr	r2, [pc, #140]	; (8007ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d022      	beq.n	8007c9c <HAL_TIM_Base_Start_IT+0x80>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c5e:	d01d      	beq.n	8007c9c <HAL_TIM_Base_Start_IT+0x80>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a1f      	ldr	r2, [pc, #124]	; (8007ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d018      	beq.n	8007c9c <HAL_TIM_Base_Start_IT+0x80>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d013      	beq.n	8007c9c <HAL_TIM_Base_Start_IT+0x80>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a1c      	ldr	r2, [pc, #112]	; (8007cec <HAL_TIM_Base_Start_IT+0xd0>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00e      	beq.n	8007c9c <HAL_TIM_Base_Start_IT+0x80>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1b      	ldr	r2, [pc, #108]	; (8007cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d009      	beq.n	8007c9c <HAL_TIM_Base_Start_IT+0x80>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a19      	ldr	r2, [pc, #100]	; (8007cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d004      	beq.n	8007c9c <HAL_TIM_Base_Start_IT+0x80>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a18      	ldr	r2, [pc, #96]	; (8007cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d111      	bne.n	8007cc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d010      	beq.n	8007cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f042 0201 	orr.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cbe:	e007      	b.n	8007cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0201 	orr.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40010000 	.word	0x40010000
 8007ce4:	40000400 	.word	0x40000400
 8007ce8:	40000800 	.word	0x40000800
 8007cec:	40000c00 	.word	0x40000c00
 8007cf0:	40010400 	.word	0x40010400
 8007cf4:	40014000 	.word	0x40014000
 8007cf8:	40001800 	.word	0x40001800

08007cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e041      	b.n	8007d92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f839 	bl	8007d9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f000 fc22 	bl	8008584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
	...

08007db0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d109      	bne.n	8007dd4 <HAL_TIM_PWM_Start+0x24>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	bf14      	ite	ne
 8007dcc:	2301      	movne	r3, #1
 8007dce:	2300      	moveq	r3, #0
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	e022      	b.n	8007e1a <HAL_TIM_PWM_Start+0x6a>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d109      	bne.n	8007dee <HAL_TIM_PWM_Start+0x3e>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	bf14      	ite	ne
 8007de6:	2301      	movne	r3, #1
 8007de8:	2300      	moveq	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	e015      	b.n	8007e1a <HAL_TIM_PWM_Start+0x6a>
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d109      	bne.n	8007e08 <HAL_TIM_PWM_Start+0x58>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	bf14      	ite	ne
 8007e00:	2301      	movne	r3, #1
 8007e02:	2300      	moveq	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	e008      	b.n	8007e1a <HAL_TIM_PWM_Start+0x6a>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	bf14      	ite	ne
 8007e14:	2301      	movne	r3, #1
 8007e16:	2300      	moveq	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e07c      	b.n	8007f1c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <HAL_TIM_PWM_Start+0x82>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e30:	e013      	b.n	8007e5a <HAL_TIM_PWM_Start+0xaa>
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	d104      	bne.n	8007e42 <HAL_TIM_PWM_Start+0x92>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e40:	e00b      	b.n	8007e5a <HAL_TIM_PWM_Start+0xaa>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d104      	bne.n	8007e52 <HAL_TIM_PWM_Start+0xa2>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e50:	e003      	b.n	8007e5a <HAL_TIM_PWM_Start+0xaa>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2202      	movs	r2, #2
 8007e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fe78 	bl	8008b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a2d      	ldr	r2, [pc, #180]	; (8007f24 <HAL_TIM_PWM_Start+0x174>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d004      	beq.n	8007e7c <HAL_TIM_PWM_Start+0xcc>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a2c      	ldr	r2, [pc, #176]	; (8007f28 <HAL_TIM_PWM_Start+0x178>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d101      	bne.n	8007e80 <HAL_TIM_PWM_Start+0xd0>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e000      	b.n	8007e82 <HAL_TIM_PWM_Start+0xd2>
 8007e80:	2300      	movs	r3, #0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d007      	beq.n	8007e96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a22      	ldr	r2, [pc, #136]	; (8007f24 <HAL_TIM_PWM_Start+0x174>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d022      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x136>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea8:	d01d      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x136>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <HAL_TIM_PWM_Start+0x17c>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d018      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x136>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	; (8007f30 <HAL_TIM_PWM_Start+0x180>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x136>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1c      	ldr	r2, [pc, #112]	; (8007f34 <HAL_TIM_PWM_Start+0x184>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d00e      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x136>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a16      	ldr	r2, [pc, #88]	; (8007f28 <HAL_TIM_PWM_Start+0x178>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d009      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x136>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	; (8007f38 <HAL_TIM_PWM_Start+0x188>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <HAL_TIM_PWM_Start+0x136>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <HAL_TIM_PWM_Start+0x18c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d111      	bne.n	8007f0a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f003 0307 	and.w	r3, r3, #7
 8007ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b06      	cmp	r3, #6
 8007ef6:	d010      	beq.n	8007f1a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0201 	orr.w	r2, r2, #1
 8007f06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f08:	e007      	b.n	8007f1a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0201 	orr.w	r2, r2, #1
 8007f18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	40010000 	.word	0x40010000
 8007f28:	40010400 	.word	0x40010400
 8007f2c:	40000400 	.word	0x40000400
 8007f30:	40000800 	.word	0x40000800
 8007f34:	40000c00 	.word	0x40000c00
 8007f38:	40014000 	.word	0x40014000
 8007f3c:	40001800 	.word	0x40001800

08007f40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fe00 	bl	8008b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a2e      	ldr	r2, [pc, #184]	; (8008018 <HAL_TIM_PWM_Stop+0xd8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d004      	beq.n	8007f6c <HAL_TIM_PWM_Stop+0x2c>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a2d      	ldr	r2, [pc, #180]	; (800801c <HAL_TIM_PWM_Stop+0xdc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d101      	bne.n	8007f70 <HAL_TIM_PWM_Stop+0x30>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e000      	b.n	8007f72 <HAL_TIM_PWM_Stop+0x32>
 8007f70:	2300      	movs	r3, #0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d017      	beq.n	8007fa6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6a1a      	ldr	r2, [r3, #32]
 8007f7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007f80:	4013      	ands	r3, r2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10f      	bne.n	8007fa6 <HAL_TIM_PWM_Stop+0x66>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a1a      	ldr	r2, [r3, #32]
 8007f8c:	f240 4344 	movw	r3, #1092	; 0x444
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d107      	bne.n	8007fa6 <HAL_TIM_PWM_Stop+0x66>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6a1a      	ldr	r2, [r3, #32]
 8007fac:	f241 1311 	movw	r3, #4369	; 0x1111
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10f      	bne.n	8007fd6 <HAL_TIM_PWM_Stop+0x96>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6a1a      	ldr	r2, [r3, #32]
 8007fbc:	f240 4344 	movw	r3, #1092	; 0x444
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d107      	bne.n	8007fd6 <HAL_TIM_PWM_Stop+0x96>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0201 	bic.w	r2, r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d104      	bne.n	8007fe6 <HAL_TIM_PWM_Stop+0xa6>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fe4:	e013      	b.n	800800e <HAL_TIM_PWM_Stop+0xce>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b04      	cmp	r3, #4
 8007fea:	d104      	bne.n	8007ff6 <HAL_TIM_PWM_Stop+0xb6>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ff4:	e00b      	b.n	800800e <HAL_TIM_PWM_Stop+0xce>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b08      	cmp	r3, #8
 8007ffa:	d104      	bne.n	8008006 <HAL_TIM_PWM_Stop+0xc6>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008004:	e003      	b.n	800800e <HAL_TIM_PWM_Stop+0xce>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	40010000 	.word	0x40010000
 800801c:	40010400 	.word	0x40010400

08008020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b02      	cmp	r3, #2
 8008034:	d122      	bne.n	800807c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b02      	cmp	r3, #2
 8008042:	d11b      	bne.n	800807c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f06f 0202 	mvn.w	r2, #2
 800804c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f003 0303 	and.w	r3, r3, #3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d003      	beq.n	800806a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa70 	bl	8008548 <HAL_TIM_IC_CaptureCallback>
 8008068:	e005      	b.n	8008076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fa62 	bl	8008534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fa73 	bl	800855c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b04      	cmp	r3, #4
 8008088:	d122      	bne.n	80080d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b04      	cmp	r3, #4
 8008096:	d11b      	bne.n	80080d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f06f 0204 	mvn.w	r2, #4
 80080a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2202      	movs	r2, #2
 80080a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fa46 	bl	8008548 <HAL_TIM_IC_CaptureCallback>
 80080bc:	e005      	b.n	80080ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fa38 	bl	8008534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa49 	bl	800855c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b08      	cmp	r3, #8
 80080dc:	d122      	bne.n	8008124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d11b      	bne.n	8008124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0208 	mvn.w	r2, #8
 80080f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2204      	movs	r2, #4
 80080fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fa1c 	bl	8008548 <HAL_TIM_IC_CaptureCallback>
 8008110:	e005      	b.n	800811e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa0e 	bl	8008534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fa1f 	bl	800855c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2b10      	cmp	r3, #16
 8008130:	d122      	bne.n	8008178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0310 	and.w	r3, r3, #16
 800813c:	2b10      	cmp	r3, #16
 800813e:	d11b      	bne.n	8008178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0210 	mvn.w	r2, #16
 8008148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2208      	movs	r2, #8
 800814e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9f2 	bl	8008548 <HAL_TIM_IC_CaptureCallback>
 8008164:	e005      	b.n	8008172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9e4 	bl	8008534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f9f5 	bl	800855c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0301 	and.w	r3, r3, #1
 8008182:	2b01      	cmp	r3, #1
 8008184:	d10e      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b01      	cmp	r3, #1
 8008192:	d107      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0201 	mvn.w	r2, #1
 800819c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fb fba2 	bl	80038e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ae:	2b80      	cmp	r3, #128	; 0x80
 80081b0:	d10e      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081bc:	2b80      	cmp	r3, #128	; 0x80
 80081be:	d107      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fd70 	bl	8008cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d10e      	bne.n	80081fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e8:	2b40      	cmp	r3, #64	; 0x40
 80081ea:	d107      	bne.n	80081fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f9ba 	bl	8008570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f003 0320 	and.w	r3, r3, #32
 8008206:	2b20      	cmp	r3, #32
 8008208:	d10e      	bne.n	8008228 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f003 0320 	and.w	r3, r3, #32
 8008214:	2b20      	cmp	r3, #32
 8008216:	d107      	bne.n	8008228 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f06f 0220 	mvn.w	r2, #32
 8008220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fd3a 	bl	8008c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008246:	2302      	movs	r3, #2
 8008248:	e0ac      	b.n	80083a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b0c      	cmp	r3, #12
 8008256:	f200 809f 	bhi.w	8008398 <HAL_TIM_PWM_ConfigChannel+0x168>
 800825a:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800825c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008260:	08008295 	.word	0x08008295
 8008264:	08008399 	.word	0x08008399
 8008268:	08008399 	.word	0x08008399
 800826c:	08008399 	.word	0x08008399
 8008270:	080082d5 	.word	0x080082d5
 8008274:	08008399 	.word	0x08008399
 8008278:	08008399 	.word	0x08008399
 800827c:	08008399 	.word	0x08008399
 8008280:	08008317 	.word	0x08008317
 8008284:	08008399 	.word	0x08008399
 8008288:	08008399 	.word	0x08008399
 800828c:	08008399 	.word	0x08008399
 8008290:	08008357 	.word	0x08008357
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68b9      	ldr	r1, [r7, #8]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fa12 	bl	80086c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0208 	orr.w	r2, r2, #8
 80082ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699a      	ldr	r2, [r3, #24]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0204 	bic.w	r2, r2, #4
 80082be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6999      	ldr	r1, [r3, #24]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	619a      	str	r2, [r3, #24]
      break;
 80082d2:	e062      	b.n	800839a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 fa62 	bl	80087a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	699a      	ldr	r2, [r3, #24]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6999      	ldr	r1, [r3, #24]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	021a      	lsls	r2, r3, #8
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	619a      	str	r2, [r3, #24]
      break;
 8008314:	e041      	b.n	800839a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68b9      	ldr	r1, [r7, #8]
 800831c:	4618      	mov	r0, r3
 800831e:	f000 fab7 	bl	8008890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69da      	ldr	r2, [r3, #28]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f042 0208 	orr.w	r2, r2, #8
 8008330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69da      	ldr	r2, [r3, #28]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0204 	bic.w	r2, r2, #4
 8008340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	69d9      	ldr	r1, [r3, #28]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	61da      	str	r2, [r3, #28]
      break;
 8008354:	e021      	b.n	800839a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fb0b 	bl	8008978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	69da      	ldr	r2, [r3, #28]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69d9      	ldr	r1, [r3, #28]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	691b      	ldr	r3, [r3, #16]
 800838c:	021a      	lsls	r2, r3, #8
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	61da      	str	r2, [r3, #28]
      break;
 8008396:	e000      	b.n	800839a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d101      	bne.n	80083c4 <HAL_TIM_ConfigClockSource+0x18>
 80083c0:	2302      	movs	r3, #2
 80083c2:	e0b3      	b.n	800852c <HAL_TIM_ConfigClockSource+0x180>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083fc:	d03e      	beq.n	800847c <HAL_TIM_ConfigClockSource+0xd0>
 80083fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008402:	f200 8087 	bhi.w	8008514 <HAL_TIM_ConfigClockSource+0x168>
 8008406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800840a:	f000 8085 	beq.w	8008518 <HAL_TIM_ConfigClockSource+0x16c>
 800840e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008412:	d87f      	bhi.n	8008514 <HAL_TIM_ConfigClockSource+0x168>
 8008414:	2b70      	cmp	r3, #112	; 0x70
 8008416:	d01a      	beq.n	800844e <HAL_TIM_ConfigClockSource+0xa2>
 8008418:	2b70      	cmp	r3, #112	; 0x70
 800841a:	d87b      	bhi.n	8008514 <HAL_TIM_ConfigClockSource+0x168>
 800841c:	2b60      	cmp	r3, #96	; 0x60
 800841e:	d050      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x116>
 8008420:	2b60      	cmp	r3, #96	; 0x60
 8008422:	d877      	bhi.n	8008514 <HAL_TIM_ConfigClockSource+0x168>
 8008424:	2b50      	cmp	r3, #80	; 0x50
 8008426:	d03c      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0xf6>
 8008428:	2b50      	cmp	r3, #80	; 0x50
 800842a:	d873      	bhi.n	8008514 <HAL_TIM_ConfigClockSource+0x168>
 800842c:	2b40      	cmp	r3, #64	; 0x40
 800842e:	d058      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x136>
 8008430:	2b40      	cmp	r3, #64	; 0x40
 8008432:	d86f      	bhi.n	8008514 <HAL_TIM_ConfigClockSource+0x168>
 8008434:	2b30      	cmp	r3, #48	; 0x30
 8008436:	d064      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x156>
 8008438:	2b30      	cmp	r3, #48	; 0x30
 800843a:	d86b      	bhi.n	8008514 <HAL_TIM_ConfigClockSource+0x168>
 800843c:	2b20      	cmp	r3, #32
 800843e:	d060      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x156>
 8008440:	2b20      	cmp	r3, #32
 8008442:	d867      	bhi.n	8008514 <HAL_TIM_ConfigClockSource+0x168>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d05c      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x156>
 8008448:	2b10      	cmp	r3, #16
 800844a:	d05a      	beq.n	8008502 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800844c:	e062      	b.n	8008514 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	6899      	ldr	r1, [r3, #8]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f000 fb5b 	bl	8008b18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008470:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	609a      	str	r2, [r3, #8]
      break;
 800847a:	e04e      	b.n	800851a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	6899      	ldr	r1, [r3, #8]
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685a      	ldr	r2, [r3, #4]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f000 fb44 	bl	8008b18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800849e:	609a      	str	r2, [r3, #8]
      break;
 80084a0:	e03b      	b.n	800851a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6859      	ldr	r1, [r3, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f000 fab8 	bl	8008a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2150      	movs	r1, #80	; 0x50
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 fb11 	bl	8008ae2 <TIM_ITRx_SetConfig>
      break;
 80084c0:	e02b      	b.n	800851a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	6859      	ldr	r1, [r3, #4]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f000 fad7 	bl	8008a82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2160      	movs	r1, #96	; 0x60
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 fb01 	bl	8008ae2 <TIM_ITRx_SetConfig>
      break;
 80084e0:	e01b      	b.n	800851a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6859      	ldr	r1, [r3, #4]
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	461a      	mov	r2, r3
 80084f0:	f000 fa98 	bl	8008a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2140      	movs	r1, #64	; 0x40
 80084fa:	4618      	mov	r0, r3
 80084fc:	f000 faf1 	bl	8008ae2 <TIM_ITRx_SetConfig>
      break;
 8008500:	e00b      	b.n	800851a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4619      	mov	r1, r3
 800850c:	4610      	mov	r0, r2
 800850e:	f000 fae8 	bl	8008ae2 <TIM_ITRx_SetConfig>
        break;
 8008512:	e002      	b.n	800851a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008514:	bf00      	nop
 8008516:	e000      	b.n	800851a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008518:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a40      	ldr	r2, [pc, #256]	; (8008698 <TIM_Base_SetConfig+0x114>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d013      	beq.n	80085c4 <TIM_Base_SetConfig+0x40>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a2:	d00f      	beq.n	80085c4 <TIM_Base_SetConfig+0x40>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a3d      	ldr	r2, [pc, #244]	; (800869c <TIM_Base_SetConfig+0x118>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d00b      	beq.n	80085c4 <TIM_Base_SetConfig+0x40>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4a3c      	ldr	r2, [pc, #240]	; (80086a0 <TIM_Base_SetConfig+0x11c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d007      	beq.n	80085c4 <TIM_Base_SetConfig+0x40>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	4a3b      	ldr	r2, [pc, #236]	; (80086a4 <TIM_Base_SetConfig+0x120>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d003      	beq.n	80085c4 <TIM_Base_SetConfig+0x40>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4a3a      	ldr	r2, [pc, #232]	; (80086a8 <TIM_Base_SetConfig+0x124>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d108      	bne.n	80085d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a2f      	ldr	r2, [pc, #188]	; (8008698 <TIM_Base_SetConfig+0x114>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d02b      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e4:	d027      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a2c      	ldr	r2, [pc, #176]	; (800869c <TIM_Base_SetConfig+0x118>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d023      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a2b      	ldr	r2, [pc, #172]	; (80086a0 <TIM_Base_SetConfig+0x11c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d01f      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a2a      	ldr	r2, [pc, #168]	; (80086a4 <TIM_Base_SetConfig+0x120>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d01b      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a29      	ldr	r2, [pc, #164]	; (80086a8 <TIM_Base_SetConfig+0x124>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d017      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a28      	ldr	r2, [pc, #160]	; (80086ac <TIM_Base_SetConfig+0x128>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d013      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a27      	ldr	r2, [pc, #156]	; (80086b0 <TIM_Base_SetConfig+0x12c>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00f      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a26      	ldr	r2, [pc, #152]	; (80086b4 <TIM_Base_SetConfig+0x130>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d00b      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a25      	ldr	r2, [pc, #148]	; (80086b8 <TIM_Base_SetConfig+0x134>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d007      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a24      	ldr	r2, [pc, #144]	; (80086bc <TIM_Base_SetConfig+0x138>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d003      	beq.n	8008636 <TIM_Base_SetConfig+0xb2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a23      	ldr	r2, [pc, #140]	; (80086c0 <TIM_Base_SetConfig+0x13c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d108      	bne.n	8008648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800863c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	695b      	ldr	r3, [r3, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	689a      	ldr	r2, [r3, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a0a      	ldr	r2, [pc, #40]	; (8008698 <TIM_Base_SetConfig+0x114>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_Base_SetConfig+0xf8>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a0c      	ldr	r2, [pc, #48]	; (80086a8 <TIM_Base_SetConfig+0x124>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d103      	bne.n	8008684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	691a      	ldr	r2, [r3, #16]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	615a      	str	r2, [r3, #20]
}
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40010000 	.word	0x40010000
 800869c:	40000400 	.word	0x40000400
 80086a0:	40000800 	.word	0x40000800
 80086a4:	40000c00 	.word	0x40000c00
 80086a8:	40010400 	.word	0x40010400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	40014400 	.word	0x40014400
 80086b4:	40014800 	.word	0x40014800
 80086b8:	40001800 	.word	0x40001800
 80086bc:	40001c00 	.word	0x40001c00
 80086c0:	40002000 	.word	0x40002000

080086c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f023 0201 	bic.w	r2, r3, #1
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f023 0303 	bic.w	r3, r3, #3
 80086fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f023 0302 	bic.w	r3, r3, #2
 800870c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	4313      	orrs	r3, r2
 8008716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4a20      	ldr	r2, [pc, #128]	; (800879c <TIM_OC1_SetConfig+0xd8>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d003      	beq.n	8008728 <TIM_OC1_SetConfig+0x64>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a1f      	ldr	r2, [pc, #124]	; (80087a0 <TIM_OC1_SetConfig+0xdc>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d10c      	bne.n	8008742 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f023 0308 	bic.w	r3, r3, #8
 800872e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	4313      	orrs	r3, r2
 8008738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f023 0304 	bic.w	r3, r3, #4
 8008740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a15      	ldr	r2, [pc, #84]	; (800879c <TIM_OC1_SetConfig+0xd8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d003      	beq.n	8008752 <TIM_OC1_SetConfig+0x8e>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a14      	ldr	r2, [pc, #80]	; (80087a0 <TIM_OC1_SetConfig+0xdc>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d111      	bne.n	8008776 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	621a      	str	r2, [r3, #32]
}
 8008790:	bf00      	nop
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	40010000 	.word	0x40010000
 80087a0:	40010400 	.word	0x40010400

080087a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f023 0210 	bic.w	r2, r3, #16
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f023 0320 	bic.w	r3, r3, #32
 80087ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	011b      	lsls	r3, r3, #4
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a22      	ldr	r2, [pc, #136]	; (8008888 <TIM_OC2_SetConfig+0xe4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d003      	beq.n	800880c <TIM_OC2_SetConfig+0x68>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a21      	ldr	r2, [pc, #132]	; (800888c <TIM_OC2_SetConfig+0xe8>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d10d      	bne.n	8008828 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	697a      	ldr	r2, [r7, #20]
 800881c:	4313      	orrs	r3, r2
 800881e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a17      	ldr	r2, [pc, #92]	; (8008888 <TIM_OC2_SetConfig+0xe4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d003      	beq.n	8008838 <TIM_OC2_SetConfig+0x94>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a16      	ldr	r2, [pc, #88]	; (800888c <TIM_OC2_SetConfig+0xe8>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d113      	bne.n	8008860 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800883e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	4313      	orrs	r3, r2
 8008852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	699b      	ldr	r3, [r3, #24]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	40010000 	.word	0x40010000
 800888c:	40010400 	.word	0x40010400

08008890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0303 	bic.w	r3, r3, #3
 80088c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	021b      	lsls	r3, r3, #8
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a21      	ldr	r2, [pc, #132]	; (8008970 <TIM_OC3_SetConfig+0xe0>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d003      	beq.n	80088f6 <TIM_OC3_SetConfig+0x66>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a20      	ldr	r2, [pc, #128]	; (8008974 <TIM_OC3_SetConfig+0xe4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d10d      	bne.n	8008912 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a16      	ldr	r2, [pc, #88]	; (8008970 <TIM_OC3_SetConfig+0xe0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d003      	beq.n	8008922 <TIM_OC3_SetConfig+0x92>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a15      	ldr	r2, [pc, #84]	; (8008974 <TIM_OC3_SetConfig+0xe4>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d113      	bne.n	800894a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4313      	orrs	r3, r2
 800893c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	011b      	lsls	r3, r3, #4
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	621a      	str	r2, [r3, #32]
}
 8008964:	bf00      	nop
 8008966:	371c      	adds	r7, #28
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	40010000 	.word	0x40010000
 8008974:	40010400 	.word	0x40010400

08008978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	021b      	lsls	r3, r3, #8
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	031b      	lsls	r3, r3, #12
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a12      	ldr	r2, [pc, #72]	; (8008a1c <TIM_OC4_SetConfig+0xa4>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d003      	beq.n	80089e0 <TIM_OC4_SetConfig+0x68>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a11      	ldr	r2, [pc, #68]	; (8008a20 <TIM_OC4_SetConfig+0xa8>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d109      	bne.n	80089f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	019b      	lsls	r3, r3, #6
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	621a      	str	r2, [r3, #32]
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	40010000 	.word	0x40010000
 8008a20:	40010400 	.word	0x40010400

08008a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f023 0201 	bic.w	r2, r3, #1
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f023 030a 	bic.w	r3, r3, #10
 8008a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	621a      	str	r2, [r3, #32]
}
 8008a76:	bf00      	nop
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b087      	sub	sp, #28
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f023 0210 	bic.w	r2, r3, #16
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	031b      	lsls	r3, r3, #12
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008abe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	697a      	ldr	r2, [r7, #20]
 8008ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	621a      	str	r2, [r3, #32]
}
 8008ad6:	bf00      	nop
 8008ad8:	371c      	adds	r7, #28
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008afa:	683a      	ldr	r2, [r7, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	f043 0307 	orr.w	r3, r3, #7
 8008b04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	609a      	str	r2, [r3, #8]
}
 8008b0c:	bf00      	nop
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b087      	sub	sp, #28
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	021a      	lsls	r2, r3, #8
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	609a      	str	r2, [r3, #8]
}
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f003 031f 	and.w	r3, r3, #31
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a1a      	ldr	r2, [r3, #32]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	43db      	mvns	r3, r3
 8008b7a:	401a      	ands	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6a1a      	ldr	r2, [r3, #32]
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f003 031f 	and.w	r3, r3, #31
 8008b8a:	6879      	ldr	r1, [r7, #4]
 8008b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b90:	431a      	orrs	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	621a      	str	r2, [r3, #32]
}
 8008b96:	bf00      	nop
 8008b98:	371c      	adds	r7, #28
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
	...

08008ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e05a      	b.n	8008c72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a21      	ldr	r2, [pc, #132]	; (8008c80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d022      	beq.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c08:	d01d      	beq.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a1d      	ldr	r2, [pc, #116]	; (8008c84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d018      	beq.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a1b      	ldr	r2, [pc, #108]	; (8008c88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d013      	beq.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a1a      	ldr	r2, [pc, #104]	; (8008c8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d00e      	beq.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a18      	ldr	r2, [pc, #96]	; (8008c90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d009      	beq.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a17      	ldr	r2, [pc, #92]	; (8008c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d004      	beq.n	8008c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d10c      	bne.n	8008c60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40010000 	.word	0x40010000
 8008c84:	40000400 	.word	0x40000400
 8008c88:	40000800 	.word	0x40000800
 8008c8c:	40000c00 	.word	0x40000c00
 8008c90:	40010400 	.word	0x40010400
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40001800 	.word	0x40001800

08008c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e03f      	b.n	8008d56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7fa ff3c 	bl	8003b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2224      	movs	r2, #36	; 0x24
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fc7b 	bl	8009604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	691a      	ldr	r2, [r3, #16]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	695a      	ldr	r2, [r3, #20]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68da      	ldr	r2, [r3, #12]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2220      	movs	r2, #32
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b08a      	sub	sp, #40	; 0x28
 8008d62:	af02      	add	r7, sp, #8
 8008d64:	60f8      	str	r0, [r7, #12]
 8008d66:	60b9      	str	r1, [r7, #8]
 8008d68:	603b      	str	r3, [r7, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b20      	cmp	r3, #32
 8008d7c:	d17c      	bne.n	8008e78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <HAL_UART_Transmit+0x2c>
 8008d84:	88fb      	ldrh	r3, [r7, #6]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e075      	b.n	8008e7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_UART_Transmit+0x3e>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e06e      	b.n	8008e7a <HAL_UART_Transmit+0x11c>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2221      	movs	r2, #33	; 0x21
 8008dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008db2:	f7fb f905 	bl	8003fc0 <HAL_GetTick>
 8008db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	88fa      	ldrh	r2, [r7, #6]
 8008dbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	88fa      	ldrh	r2, [r7, #6]
 8008dc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dcc:	d108      	bne.n	8008de0 <HAL_UART_Transmit+0x82>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	61bb      	str	r3, [r7, #24]
 8008dde:	e003      	b.n	8008de8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008df0:	e02a      	b.n	8008e48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2180      	movs	r1, #128	; 0x80
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fa3d 	bl	800927c <UART_WaitOnFlagUntilTimeout>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e036      	b.n	8008e7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10b      	bne.n	8008e2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	3302      	adds	r3, #2
 8008e26:	61bb      	str	r3, [r7, #24]
 8008e28:	e007      	b.n	8008e3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	3301      	adds	r3, #1
 8008e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1cf      	bne.n	8008df2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2140      	movs	r1, #64	; 0x40
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 fa0d 	bl	800927c <UART_WaitOnFlagUntilTimeout>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e006      	b.n	8008e7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2220      	movs	r2, #32
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	e000      	b.n	8008e7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008e78:	2302      	movs	r3, #2
  }
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b20      	cmp	r3, #32
 8008e9a:	d11d      	bne.n	8008ed8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <HAL_UART_Receive_IT+0x26>
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e016      	b.n	8008eda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_UART_Receive_IT+0x38>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e00f      	b.n	8008eda <HAL_UART_Receive_IT+0x58>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 fa1e 	bl	8009310 <UART_Start_Receive_IT>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	e000      	b.n	8008eda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008ed8:	2302      	movs	r3, #2
  }
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08a      	sub	sp, #40	; 0x28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10d      	bne.n	8008f36 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	f003 0320 	and.w	r3, r3, #32
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d008      	beq.n	8008f36 <HAL_UART_IRQHandler+0x52>
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fad1 	bl	80094d6 <UART_Receive_IT>
      return;
 8008f34:	e17c      	b.n	8009230 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80b1 	beq.w	80090a0 <HAL_UART_IRQHandler+0x1bc>
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d105      	bne.n	8008f54 <HAL_UART_IRQHandler+0x70>
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 80a6 	beq.w	80090a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <HAL_UART_IRQHandler+0x90>
 8008f5e:	6a3b      	ldr	r3, [r7, #32]
 8008f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6c:	f043 0201 	orr.w	r2, r3, #1
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <HAL_UART_IRQHandler+0xb0>
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d005      	beq.n	8008f94 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8c:	f043 0202 	orr.w	r2, r3, #2
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d00a      	beq.n	8008fb4 <HAL_UART_IRQHandler+0xd0>
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d005      	beq.n	8008fb4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	f043 0204 	orr.w	r2, r3, #4
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00f      	beq.n	8008fde <HAL_UART_IRQHandler+0xfa>
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	f003 0320 	and.w	r3, r3, #32
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d104      	bne.n	8008fd2 <HAL_UART_IRQHandler+0xee>
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f043 0208 	orr.w	r2, r3, #8
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 811f 	beq.w	8009226 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	f003 0320 	and.w	r3, r3, #32
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d007      	beq.n	8009002 <HAL_UART_IRQHandler+0x11e>
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	f003 0320 	and.w	r3, r3, #32
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fa6a 	bl	80094d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900c:	2b40      	cmp	r3, #64	; 0x40
 800900e:	bf0c      	ite	eq
 8009010:	2301      	moveq	r3, #1
 8009012:	2300      	movne	r3, #0
 8009014:	b2db      	uxtb	r3, r3
 8009016:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b00      	cmp	r3, #0
 8009022:	d102      	bne.n	800902a <HAL_UART_IRQHandler+0x146>
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d031      	beq.n	800908e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f9aa 	bl	8009384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903a:	2b40      	cmp	r3, #64	; 0x40
 800903c:	d123      	bne.n	8009086 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	695a      	ldr	r2, [r3, #20]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800904c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	2b00      	cmp	r3, #0
 8009054:	d013      	beq.n	800907e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	4a77      	ldr	r2, [pc, #476]	; (8009238 <HAL_UART_IRQHandler+0x354>)
 800905c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009062:	4618      	mov	r0, r3
 8009064:	f7fb fe3e 	bl	8004ce4 <HAL_DMA_Abort_IT>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d016      	beq.n	800909c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009078:	4610      	mov	r0, r2
 800907a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800907c:	e00e      	b.n	800909c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f8e6 	bl	8009250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009084:	e00a      	b.n	800909c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f8e2 	bl	8009250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800908c:	e006      	b.n	800909c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f8de 	bl	8009250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800909a:	e0c4      	b.n	8009226 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800909c:	bf00      	nop
    return;
 800909e:	e0c2      	b.n	8009226 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	f040 80a2 	bne.w	80091ee <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	f003 0310 	and.w	r3, r3, #16
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 809c 	beq.w	80091ee <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	f003 0310 	and.w	r3, r3, #16
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 8096 	beq.w	80091ee <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e2:	2b40      	cmp	r3, #64	; 0x40
 80090e4:	d14f      	bne.n	8009186 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80090f0:	8a3b      	ldrh	r3, [r7, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8099 	beq.w	800922a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090fc:	8a3a      	ldrh	r2, [r7, #16]
 80090fe:	429a      	cmp	r2, r3
 8009100:	f080 8093 	bcs.w	800922a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	8a3a      	ldrh	r2, [r7, #16]
 8009108:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009114:	d02b      	beq.n	800916e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68da      	ldr	r2, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009124:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	695a      	ldr	r2, [r3, #20]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0201 	bic.w	r2, r2, #1
 8009134:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	695a      	ldr	r2, [r3, #20]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009144:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2220      	movs	r2, #32
 800914a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 0210 	bic.w	r2, r2, #16
 8009162:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	4618      	mov	r0, r3
 800916a:	f7fb fd4b 	bl	8004c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009176:	b29b      	uxth	r3, r3
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	b29b      	uxth	r3, r3
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f870 	bl	8009264 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8009184:	e051      	b.n	800922a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800918e:	b29b      	uxth	r3, r3
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009198:	b29b      	uxth	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d047      	beq.n	800922e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800919e:	8a7b      	ldrh	r3, [r7, #18]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d044      	beq.n	800922e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80091b2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	695a      	ldr	r2, [r3, #20]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0201 	bic.w	r2, r2, #1
 80091c2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0210 	bic.w	r2, r2, #16
 80091e0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091e2:	8a7b      	ldrh	r3, [r7, #18]
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f83c 	bl	8009264 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80091ec:	e01f      	b.n	800922e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d008      	beq.n	800920a <HAL_UART_IRQHandler+0x326>
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f8ff 	bl	8009406 <UART_Transmit_IT>
    return;
 8009208:	e012      	b.n	8009230 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800920a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00d      	beq.n	8009230 <HAL_UART_IRQHandler+0x34c>
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d008      	beq.n	8009230 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f941 	bl	80094a6 <UART_EndTransmit_IT>
    return;
 8009224:	e004      	b.n	8009230 <HAL_UART_IRQHandler+0x34c>
    return;
 8009226:	bf00      	nop
 8009228:	e002      	b.n	8009230 <HAL_UART_IRQHandler+0x34c>
      return;
 800922a:	bf00      	nop
 800922c:	e000      	b.n	8009230 <HAL_UART_IRQHandler+0x34c>
      return;
 800922e:	bf00      	nop
  }
}
 8009230:	3728      	adds	r7, #40	; 0x28
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	080093df 	.word	0x080093df

0800923c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	4613      	mov	r3, r2
 800928a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800928c:	e02c      	b.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009294:	d028      	beq.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d007      	beq.n	80092ac <UART_WaitOnFlagUntilTimeout+0x30>
 800929c:	f7fa fe90 	bl	8003fc0 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d21d      	bcs.n	80092e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	68da      	ldr	r2, [r3, #12]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695a      	ldr	r2, [r3, #20]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f022 0201 	bic.w	r2, r2, #1
 80092ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e00f      	b.n	8009308 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	4013      	ands	r3, r2
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	bf0c      	ite	eq
 80092f8:	2301      	moveq	r3, #1
 80092fa:	2300      	movne	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	461a      	mov	r2, r3
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	429a      	cmp	r2, r3
 8009304:	d0c3      	beq.n	800928e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	4613      	mov	r3, r2
 800931c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	88fa      	ldrh	r2, [r7, #6]
 800932e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2222      	movs	r2, #34	; 0x22
 800933a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009354:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695a      	ldr	r2, [r3, #20]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f042 0201 	orr.w	r2, r2, #1
 8009364:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f042 0220 	orr.w	r2, r2, #32
 8009374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009384:	b480      	push	{r7}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800939a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	695a      	ldr	r2, [r3, #20]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0201 	bic.w	r2, r2, #1
 80093aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d107      	bne.n	80093c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f022 0210 	bic.w	r2, r2, #16
 80093c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80093d2:	bf00      	nop
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff ff29 	bl	8009250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009406:	b480      	push	{r7}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b21      	cmp	r3, #33	; 0x21
 8009418:	d13e      	bne.n	8009498 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009422:	d114      	bne.n	800944e <UART_Transmit_IT+0x48>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d110      	bne.n	800944e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a1b      	ldr	r3, [r3, #32]
 8009430:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009440:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	1c9a      	adds	r2, r3, #2
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	621a      	str	r2, [r3, #32]
 800944c:	e008      	b.n	8009460 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	1c59      	adds	r1, r3, #1
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	6211      	str	r1, [r2, #32]
 8009458:	781a      	ldrb	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009464:	b29b      	uxth	r3, r3
 8009466:	3b01      	subs	r3, #1
 8009468:	b29b      	uxth	r3, r3
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	4619      	mov	r1, r3
 800946e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10f      	bne.n	8009494 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009482:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009492:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	e000      	b.n	800949a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009498:	2302      	movs	r3, #2
  }
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b082      	sub	sp, #8
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68da      	ldr	r2, [r3, #12]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff feb8 	bl	800923c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b22      	cmp	r3, #34	; 0x22
 80094e8:	f040 8087 	bne.w	80095fa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094f4:	d117      	bne.n	8009526 <UART_Receive_IT+0x50>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d113      	bne.n	8009526 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	b29b      	uxth	r3, r3
 8009510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009514:	b29a      	uxth	r2, r3
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	1c9a      	adds	r2, r3, #2
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	629a      	str	r2, [r3, #40]	; 0x28
 8009524:	e026      	b.n	8009574 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800952c:	2300      	movs	r3, #0
 800952e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009538:	d007      	beq.n	800954a <UART_Receive_IT+0x74>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <UART_Receive_IT+0x82>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d106      	bne.n	8009558 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	b2da      	uxtb	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	701a      	strb	r2, [r3, #0]
 8009556:	e008      	b.n	800956a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009564:	b2da      	uxtb	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29b      	uxth	r3, r3
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4619      	mov	r1, r3
 8009582:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009584:	2b00      	cmp	r3, #0
 8009586:	d136      	bne.n	80095f6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0220 	bic.w	r2, r2, #32
 8009596:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	695a      	ldr	r2, [r3, #20]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 0201 	bic.w	r2, r2, #1
 80095b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d10e      	bne.n	80095e6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0210 	bic.w	r2, r2, #16
 80095d6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095dc:	4619      	mov	r1, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7ff fe40 	bl	8009264 <HAL_UARTEx_RxEventCallback>
 80095e4:	e002      	b.n	80095ec <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7f9 fcc8 	bl	8002f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	e002      	b.n	80095fc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	e000      	b.n	80095fc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80095fa:	2302      	movs	r3, #2
  }
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	b09f      	sub	sp, #124	; 0x7c
 800960a:	af00      	add	r7, sp, #0
 800960c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800960e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800961a:	68d9      	ldr	r1, [r3, #12]
 800961c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	ea40 0301 	orr.w	r3, r0, r1
 8009624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009628:	689a      	ldr	r2, [r3, #8]
 800962a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	431a      	orrs	r2, r3
 8009630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	431a      	orrs	r2, r3
 8009636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009638:	69db      	ldr	r3, [r3, #28]
 800963a:	4313      	orrs	r3, r2
 800963c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800963e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009648:	f021 010c 	bic.w	r1, r1, #12
 800964c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009652:	430b      	orrs	r3, r1
 8009654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009662:	6999      	ldr	r1, [r3, #24]
 8009664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	ea40 0301 	orr.w	r3, r0, r1
 800966c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800966e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4bc5      	ldr	r3, [pc, #788]	; (8009988 <UART_SetConfig+0x384>)
 8009674:	429a      	cmp	r2, r3
 8009676:	d004      	beq.n	8009682 <UART_SetConfig+0x7e>
 8009678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4bc3      	ldr	r3, [pc, #780]	; (800998c <UART_SetConfig+0x388>)
 800967e:	429a      	cmp	r2, r3
 8009680:	d103      	bne.n	800968a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009682:	f7fd fde5 	bl	8007250 <HAL_RCC_GetPCLK2Freq>
 8009686:	6778      	str	r0, [r7, #116]	; 0x74
 8009688:	e002      	b.n	8009690 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800968a:	f7fd fdcd 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 800968e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009698:	f040 80b6 	bne.w	8009808 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800969c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800969e:	461c      	mov	r4, r3
 80096a0:	f04f 0500 	mov.w	r5, #0
 80096a4:	4622      	mov	r2, r4
 80096a6:	462b      	mov	r3, r5
 80096a8:	1891      	adds	r1, r2, r2
 80096aa:	6439      	str	r1, [r7, #64]	; 0x40
 80096ac:	415b      	adcs	r3, r3
 80096ae:	647b      	str	r3, [r7, #68]	; 0x44
 80096b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096b4:	1912      	adds	r2, r2, r4
 80096b6:	eb45 0303 	adc.w	r3, r5, r3
 80096ba:	f04f 0000 	mov.w	r0, #0
 80096be:	f04f 0100 	mov.w	r1, #0
 80096c2:	00d9      	lsls	r1, r3, #3
 80096c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80096c8:	00d0      	lsls	r0, r2, #3
 80096ca:	4602      	mov	r2, r0
 80096cc:	460b      	mov	r3, r1
 80096ce:	1911      	adds	r1, r2, r4
 80096d0:	6639      	str	r1, [r7, #96]	; 0x60
 80096d2:	416b      	adcs	r3, r5
 80096d4:	667b      	str	r3, [r7, #100]	; 0x64
 80096d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	461a      	mov	r2, r3
 80096dc:	f04f 0300 	mov.w	r3, #0
 80096e0:	1891      	adds	r1, r2, r2
 80096e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80096e4:	415b      	adcs	r3, r3
 80096e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80096f0:	f7f7 fb22 	bl	8000d38 <__aeabi_uldivmod>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	4ba5      	ldr	r3, [pc, #660]	; (8009990 <UART_SetConfig+0x38c>)
 80096fa:	fba3 2302 	umull	r2, r3, r3, r2
 80096fe:	095b      	lsrs	r3, r3, #5
 8009700:	011e      	lsls	r6, r3, #4
 8009702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009704:	461c      	mov	r4, r3
 8009706:	f04f 0500 	mov.w	r5, #0
 800970a:	4622      	mov	r2, r4
 800970c:	462b      	mov	r3, r5
 800970e:	1891      	adds	r1, r2, r2
 8009710:	6339      	str	r1, [r7, #48]	; 0x30
 8009712:	415b      	adcs	r3, r3
 8009714:	637b      	str	r3, [r7, #52]	; 0x34
 8009716:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800971a:	1912      	adds	r2, r2, r4
 800971c:	eb45 0303 	adc.w	r3, r5, r3
 8009720:	f04f 0000 	mov.w	r0, #0
 8009724:	f04f 0100 	mov.w	r1, #0
 8009728:	00d9      	lsls	r1, r3, #3
 800972a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800972e:	00d0      	lsls	r0, r2, #3
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	1911      	adds	r1, r2, r4
 8009736:	65b9      	str	r1, [r7, #88]	; 0x58
 8009738:	416b      	adcs	r3, r5
 800973a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800973c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	461a      	mov	r2, r3
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	1891      	adds	r1, r2, r2
 8009748:	62b9      	str	r1, [r7, #40]	; 0x28
 800974a:	415b      	adcs	r3, r3
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800974e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009752:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009756:	f7f7 faef 	bl	8000d38 <__aeabi_uldivmod>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	4b8c      	ldr	r3, [pc, #560]	; (8009990 <UART_SetConfig+0x38c>)
 8009760:	fba3 1302 	umull	r1, r3, r3, r2
 8009764:	095b      	lsrs	r3, r3, #5
 8009766:	2164      	movs	r1, #100	; 0x64
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	3332      	adds	r3, #50	; 0x32
 8009772:	4a87      	ldr	r2, [pc, #540]	; (8009990 <UART_SetConfig+0x38c>)
 8009774:	fba2 2303 	umull	r2, r3, r2, r3
 8009778:	095b      	lsrs	r3, r3, #5
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009780:	441e      	add	r6, r3
 8009782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009784:	4618      	mov	r0, r3
 8009786:	f04f 0100 	mov.w	r1, #0
 800978a:	4602      	mov	r2, r0
 800978c:	460b      	mov	r3, r1
 800978e:	1894      	adds	r4, r2, r2
 8009790:	623c      	str	r4, [r7, #32]
 8009792:	415b      	adcs	r3, r3
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
 8009796:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800979a:	1812      	adds	r2, r2, r0
 800979c:	eb41 0303 	adc.w	r3, r1, r3
 80097a0:	f04f 0400 	mov.w	r4, #0
 80097a4:	f04f 0500 	mov.w	r5, #0
 80097a8:	00dd      	lsls	r5, r3, #3
 80097aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80097ae:	00d4      	lsls	r4, r2, #3
 80097b0:	4622      	mov	r2, r4
 80097b2:	462b      	mov	r3, r5
 80097b4:	1814      	adds	r4, r2, r0
 80097b6:	653c      	str	r4, [r7, #80]	; 0x50
 80097b8:	414b      	adcs	r3, r1
 80097ba:	657b      	str	r3, [r7, #84]	; 0x54
 80097bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	461a      	mov	r2, r3
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	1891      	adds	r1, r2, r2
 80097c8:	61b9      	str	r1, [r7, #24]
 80097ca:	415b      	adcs	r3, r3
 80097cc:	61fb      	str	r3, [r7, #28]
 80097ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80097d6:	f7f7 faaf 	bl	8000d38 <__aeabi_uldivmod>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4b6c      	ldr	r3, [pc, #432]	; (8009990 <UART_SetConfig+0x38c>)
 80097e0:	fba3 1302 	umull	r1, r3, r3, r2
 80097e4:	095b      	lsrs	r3, r3, #5
 80097e6:	2164      	movs	r1, #100	; 0x64
 80097e8:	fb01 f303 	mul.w	r3, r1, r3
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	3332      	adds	r3, #50	; 0x32
 80097f2:	4a67      	ldr	r2, [pc, #412]	; (8009990 <UART_SetConfig+0x38c>)
 80097f4:	fba2 2303 	umull	r2, r3, r2, r3
 80097f8:	095b      	lsrs	r3, r3, #5
 80097fa:	f003 0207 	and.w	r2, r3, #7
 80097fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4432      	add	r2, r6
 8009804:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009806:	e0b9      	b.n	800997c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800980a:	461c      	mov	r4, r3
 800980c:	f04f 0500 	mov.w	r5, #0
 8009810:	4622      	mov	r2, r4
 8009812:	462b      	mov	r3, r5
 8009814:	1891      	adds	r1, r2, r2
 8009816:	6139      	str	r1, [r7, #16]
 8009818:	415b      	adcs	r3, r3
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009820:	1912      	adds	r2, r2, r4
 8009822:	eb45 0303 	adc.w	r3, r5, r3
 8009826:	f04f 0000 	mov.w	r0, #0
 800982a:	f04f 0100 	mov.w	r1, #0
 800982e:	00d9      	lsls	r1, r3, #3
 8009830:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009834:	00d0      	lsls	r0, r2, #3
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	eb12 0804 	adds.w	r8, r2, r4
 800983e:	eb43 0905 	adc.w	r9, r3, r5
 8009842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	4618      	mov	r0, r3
 8009848:	f04f 0100 	mov.w	r1, #0
 800984c:	f04f 0200 	mov.w	r2, #0
 8009850:	f04f 0300 	mov.w	r3, #0
 8009854:	008b      	lsls	r3, r1, #2
 8009856:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800985a:	0082      	lsls	r2, r0, #2
 800985c:	4640      	mov	r0, r8
 800985e:	4649      	mov	r1, r9
 8009860:	f7f7 fa6a 	bl	8000d38 <__aeabi_uldivmod>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4b49      	ldr	r3, [pc, #292]	; (8009990 <UART_SetConfig+0x38c>)
 800986a:	fba3 2302 	umull	r2, r3, r3, r2
 800986e:	095b      	lsrs	r3, r3, #5
 8009870:	011e      	lsls	r6, r3, #4
 8009872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009874:	4618      	mov	r0, r3
 8009876:	f04f 0100 	mov.w	r1, #0
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	1894      	adds	r4, r2, r2
 8009880:	60bc      	str	r4, [r7, #8]
 8009882:	415b      	adcs	r3, r3
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800988a:	1812      	adds	r2, r2, r0
 800988c:	eb41 0303 	adc.w	r3, r1, r3
 8009890:	f04f 0400 	mov.w	r4, #0
 8009894:	f04f 0500 	mov.w	r5, #0
 8009898:	00dd      	lsls	r5, r3, #3
 800989a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800989e:	00d4      	lsls	r4, r2, #3
 80098a0:	4622      	mov	r2, r4
 80098a2:	462b      	mov	r3, r5
 80098a4:	1814      	adds	r4, r2, r0
 80098a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80098a8:	414b      	adcs	r3, r1
 80098aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f04f 0100 	mov.w	r1, #0
 80098b6:	f04f 0200 	mov.w	r2, #0
 80098ba:	f04f 0300 	mov.w	r3, #0
 80098be:	008b      	lsls	r3, r1, #2
 80098c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80098c4:	0082      	lsls	r2, r0, #2
 80098c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80098ca:	f7f7 fa35 	bl	8000d38 <__aeabi_uldivmod>
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4b2f      	ldr	r3, [pc, #188]	; (8009990 <UART_SetConfig+0x38c>)
 80098d4:	fba3 1302 	umull	r1, r3, r3, r2
 80098d8:	095b      	lsrs	r3, r3, #5
 80098da:	2164      	movs	r1, #100	; 0x64
 80098dc:	fb01 f303 	mul.w	r3, r1, r3
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	3332      	adds	r3, #50	; 0x32
 80098e6:	4a2a      	ldr	r2, [pc, #168]	; (8009990 <UART_SetConfig+0x38c>)
 80098e8:	fba2 2303 	umull	r2, r3, r2, r3
 80098ec:	095b      	lsrs	r3, r3, #5
 80098ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098f2:	441e      	add	r6, r3
 80098f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098f6:	4618      	mov	r0, r3
 80098f8:	f04f 0100 	mov.w	r1, #0
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	1894      	adds	r4, r2, r2
 8009902:	603c      	str	r4, [r7, #0]
 8009904:	415b      	adcs	r3, r3
 8009906:	607b      	str	r3, [r7, #4]
 8009908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800990c:	1812      	adds	r2, r2, r0
 800990e:	eb41 0303 	adc.w	r3, r1, r3
 8009912:	f04f 0400 	mov.w	r4, #0
 8009916:	f04f 0500 	mov.w	r5, #0
 800991a:	00dd      	lsls	r5, r3, #3
 800991c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009920:	00d4      	lsls	r4, r2, #3
 8009922:	4622      	mov	r2, r4
 8009924:	462b      	mov	r3, r5
 8009926:	eb12 0a00 	adds.w	sl, r2, r0
 800992a:	eb43 0b01 	adc.w	fp, r3, r1
 800992e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	4618      	mov	r0, r3
 8009934:	f04f 0100 	mov.w	r1, #0
 8009938:	f04f 0200 	mov.w	r2, #0
 800993c:	f04f 0300 	mov.w	r3, #0
 8009940:	008b      	lsls	r3, r1, #2
 8009942:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009946:	0082      	lsls	r2, r0, #2
 8009948:	4650      	mov	r0, sl
 800994a:	4659      	mov	r1, fp
 800994c:	f7f7 f9f4 	bl	8000d38 <__aeabi_uldivmod>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4b0e      	ldr	r3, [pc, #56]	; (8009990 <UART_SetConfig+0x38c>)
 8009956:	fba3 1302 	umull	r1, r3, r3, r2
 800995a:	095b      	lsrs	r3, r3, #5
 800995c:	2164      	movs	r1, #100	; 0x64
 800995e:	fb01 f303 	mul.w	r3, r1, r3
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	3332      	adds	r3, #50	; 0x32
 8009968:	4a09      	ldr	r2, [pc, #36]	; (8009990 <UART_SetConfig+0x38c>)
 800996a:	fba2 2303 	umull	r2, r3, r2, r3
 800996e:	095b      	lsrs	r3, r3, #5
 8009970:	f003 020f 	and.w	r2, r3, #15
 8009974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4432      	add	r2, r6
 800997a:	609a      	str	r2, [r3, #8]
}
 800997c:	bf00      	nop
 800997e:	377c      	adds	r7, #124	; 0x7c
 8009980:	46bd      	mov	sp, r7
 8009982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009986:	bf00      	nop
 8009988:	40011000 	.word	0x40011000
 800998c:	40011400 	.word	0x40011400
 8009990:	51eb851f 	.word	0x51eb851f

08009994 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f103 0208 	add.w	r2, r3, #8
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f103 0208 	add.w	r2, r3, #8
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f103 0208 	add.w	r2, r3, #8
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099e2:	bf00      	nop
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80099ee:	b480      	push	{r7}
 80099f0:	b085      	sub	sp, #20
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
 80099f6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	689a      	ldr	r2, [r3, #8]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	683a      	ldr	r2, [r7, #0]
 8009a18:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
}
 8009a2a:	bf00      	nop
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8009a36:	b480      	push	{r7}
 8009a38:	b085      	sub	sp, #20
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4c:	d103      	bne.n	8009a56 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	e00c      	b.n	8009a70 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	3308      	adds	r3, #8
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	e002      	b.n	8009a64 <vListInsert+0x2e>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d2f6      	bcs.n	8009a5e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	685a      	ldr	r2, [r3, #4]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	683a      	ldr	r2, [r7, #0]
 8009a7e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	601a      	str	r2, [r3, #0]
}
 8009a9c:	bf00      	nop
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	6892      	ldr	r2, [r2, #8]
 8009abe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	6852      	ldr	r2, [r2, #4]
 8009ac8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d103      	bne.n	8009adc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689a      	ldr	r2, [r3, #8]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	1e5a      	subs	r2, r3, #1
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <xQueueGenericReset+0x2a>
        __asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	60bb      	str	r3, [r7, #8]
    }
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8009b26:	f002 ff35 	bl	800c994 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b32:	68f9      	ldr	r1, [r7, #12]
 8009b34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b36:	fb01 f303 	mul.w	r3, r1, r3
 8009b3a:	441a      	add	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b56:	3b01      	subs	r3, #1
 8009b58:	68f9      	ldr	r1, [r7, #12]
 8009b5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009b5c:	fb01 f303 	mul.w	r3, r1, r3
 8009b60:	441a      	add	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	22ff      	movs	r2, #255	; 0xff
 8009b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	22ff      	movs	r2, #255	; 0xff
 8009b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d114      	bne.n	8009ba6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01a      	beq.n	8009bba <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	3310      	adds	r3, #16
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fc4d 	bl	800b428 <xTaskRemoveFromEventList>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d012      	beq.n	8009bba <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8009b94:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <xQueueGenericReset+0xcc>)
 8009b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	f3bf 8f4f 	dsb	sy
 8009ba0:	f3bf 8f6f 	isb	sy
 8009ba4:	e009      	b.n	8009bba <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	3310      	adds	r3, #16
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff fef2 	bl	8009994 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	3324      	adds	r3, #36	; 0x24
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7ff feed 	bl	8009994 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8009bba:	f002 ff1b 	bl	800c9f4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8009bbe:	2301      	movs	r3, #1
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3710      	adds	r7, #16
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08c      	sub	sp, #48	; 0x30
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xQueueGenericCreate+0x2a>
        __asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	61bb      	str	r3, [r7, #24]
    }
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	fb02 f303 	mul.w	r3, r2, r3
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d006      	beq.n	8009c14 <xQueueGenericCreate+0x48>
 8009c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d101      	bne.n	8009c18 <xQueueGenericCreate+0x4c>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <xQueueGenericCreate+0x4e>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <xQueueGenericCreate+0x68>
        __asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	617b      	str	r3, [r7, #20]
    }
 8009c30:	bf00      	nop
 8009c32:	e7fe      	b.n	8009c32 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8009c3a:	d90a      	bls.n	8009c52 <xQueueGenericCreate+0x86>
        __asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	f383 8811 	msr	BASEPRI, r3
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	f3bf 8f4f 	dsb	sy
 8009c4c:	613b      	str	r3, [r7, #16]
    }
 8009c4e:	bf00      	nop
 8009c50:	e7fe      	b.n	8009c50 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c54:	3350      	adds	r3, #80	; 0x50
 8009c56:	4618      	mov	r0, r3
 8009c58:	f002 ffc8 	bl	800cbec <pvPortMalloc>
 8009c5c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00d      	beq.n	8009c80 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009c64:	6a3b      	ldr	r3, [r7, #32]
 8009c66:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c68:	69fb      	ldr	r3, [r7, #28]
 8009c6a:	3350      	adds	r3, #80	; 0x50
 8009c6c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c6e:	79fa      	ldrb	r2, [r7, #7]
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	4613      	mov	r3, r2
 8009c76:	69fa      	ldr	r2, [r7, #28]
 8009c78:	68b9      	ldr	r1, [r7, #8]
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f805 	bl	8009c8a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8009c80:	6a3b      	ldr	r3, [r7, #32]
    }
 8009c82:	4618      	mov	r0, r3
 8009c84:	3728      	adds	r7, #40	; 0x28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b084      	sub	sp, #16
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	60f8      	str	r0, [r7, #12]
 8009c92:	60b9      	str	r1, [r7, #8]
 8009c94:	607a      	str	r2, [r7, #4]
 8009c96:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d103      	bne.n	8009ca6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c9e:	69bb      	ldr	r3, [r7, #24]
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	e002      	b.n	8009cac <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009cb8:	2101      	movs	r1, #1
 8009cba:	69b8      	ldr	r0, [r7, #24]
 8009cbc:	f7ff ff1e 	bl	8009afc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8009cc0:	69bb      	ldr	r3, [r7, #24]
 8009cc2:	78fa      	ldrb	r2, [r7, #3]
 8009cc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	68f9      	ldr	r1, [r7, #12]
 8009cce:	2073      	movs	r0, #115	; 0x73
 8009cd0:	f004 ff24 	bl	800eb1c <SEGGER_SYSVIEW_RecordU32x3>
}
 8009cd4:	bf00      	nop
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b090      	sub	sp, #64	; 0x40
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009cea:	2300      	movs	r3, #0
 8009cec:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <xQueueGenericSend+0x32>
        __asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d103      	bne.n	8009d1c <xQueueGenericSend+0x40>
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <xQueueGenericSend+0x44>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e000      	b.n	8009d22 <xQueueGenericSend+0x46>
 8009d20:	2300      	movs	r3, #0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10a      	bne.n	8009d3c <xQueueGenericSend+0x60>
        __asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009d38:	bf00      	nop
 8009d3a:	e7fe      	b.n	8009d3a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d103      	bne.n	8009d4a <xQueueGenericSend+0x6e>
 8009d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <xQueueGenericSend+0x72>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e000      	b.n	8009d50 <xQueueGenericSend+0x74>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10a      	bne.n	8009d6a <xQueueGenericSend+0x8e>
        __asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	f383 8811 	msr	BASEPRI, r3
 8009d5c:	f3bf 8f6f 	isb	sy
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	623b      	str	r3, [r7, #32]
    }
 8009d66:	bf00      	nop
 8009d68:	e7fe      	b.n	8009d68 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d6a:	f001 fcfd 	bl	800b768 <xTaskGetSchedulerState>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d102      	bne.n	8009d7a <xQueueGenericSend+0x9e>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d101      	bne.n	8009d7e <xQueueGenericSend+0xa2>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e000      	b.n	8009d80 <xQueueGenericSend+0xa4>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <xQueueGenericSend+0xbe>
        __asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	61fb      	str	r3, [r7, #28]
    }
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8009d9a:	f002 fdfb 	bl	800c994 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d302      	bcc.n	8009db0 <xQueueGenericSend+0xd4>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d136      	bne.n	8009e1e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	4618      	mov	r0, r3
 8009db4:	f005 fd4a 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	6879      	ldr	r1, [r7, #4]
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	205a      	movs	r0, #90	; 0x5a
 8009dc6:	f004 ff1f 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	68b9      	ldr	r1, [r7, #8]
 8009dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd0:	f000 fd47 	bl	800a862 <prvCopyDataToQueue>
 8009dd4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d010      	beq.n	8009e00 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	3324      	adds	r3, #36	; 0x24
 8009de2:	4618      	mov	r0, r3
 8009de4:	f001 fb20 	bl	800b428 <xTaskRemoveFromEventList>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d013      	beq.n	8009e16 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8009dee:	4b4d      	ldr	r3, [pc, #308]	; (8009f24 <xQueueGenericSend+0x248>)
 8009df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	e00a      	b.n	8009e16 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8009e06:	4b47      	ldr	r3, [pc, #284]	; (8009f24 <xQueueGenericSend+0x248>)
 8009e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8009e16:	f002 fded 	bl	800c9f4 <vPortExitCritical>
                return pdPASS;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e07d      	b.n	8009f1a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d110      	bne.n	8009e46 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8009e24:	f002 fde6 	bl	800c9f4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8009e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f005 fd0e 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	6879      	ldr	r1, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4601      	mov	r1, r0
 8009e3c:	205a      	movs	r0, #90	; 0x5a
 8009e3e:	f004 fee3 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	e069      	b.n	8009f1a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009e4c:	f107 0314 	add.w	r3, r7, #20
 8009e50:	4618      	mov	r0, r3
 8009e52:	f001 fb4f 	bl	800b4f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009e56:	2301      	movs	r3, #1
 8009e58:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009e5a:	f002 fdcb 	bl	800c9f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8009e5e:	f001 f89b 	bl	800af98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8009e62:	f002 fd97 	bl	800c994 <vPortEnterCritical>
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e6c:	b25b      	sxtb	r3, r3
 8009e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e72:	d103      	bne.n	8009e7c <xQueueGenericSend+0x1a0>
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e82:	b25b      	sxtb	r3, r3
 8009e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e88:	d103      	bne.n	8009e92 <xQueueGenericSend+0x1b6>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e92:	f002 fdaf 	bl	800c9f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e96:	1d3a      	adds	r2, r7, #4
 8009e98:	f107 0314 	add.w	r3, r7, #20
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 fb3e 	bl	800b520 <xTaskCheckForTimeOut>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d124      	bne.n	8009ef4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eac:	f000 fdd1 	bl	800aa52 <prvIsQueueFull>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d018      	beq.n	8009ee8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	3310      	adds	r3, #16
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f001 fa60 	bl	800b384 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8009ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ec6:	f000 fd5c 	bl	800a982 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8009eca:	f001 f873 	bl	800afb4 <xTaskResumeAll>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f47f af62 	bne.w	8009d9a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8009ed6:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <xQueueGenericSend+0x248>)
 8009ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	e758      	b.n	8009d9a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8009ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eea:	f000 fd4a 	bl	800a982 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009eee:	f001 f861 	bl	800afb4 <xTaskResumeAll>
 8009ef2:	e752      	b.n	8009d9a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8009ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef6:	f000 fd44 	bl	800a982 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009efa:	f001 f85b 	bl	800afb4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	4618      	mov	r0, r3
 8009f02:	f005 fca3 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	460b      	mov	r3, r1
 8009f10:	4601      	mov	r1, r0
 8009f12:	205a      	movs	r0, #90	; 0x5a
 8009f14:	f004 fe78 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8009f18:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3738      	adds	r7, #56	; 0x38
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	e000ed04 	.word	0xe000ed04

08009f28 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b090      	sub	sp, #64	; 0x40
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8009f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10a      	bne.n	8009f56 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d103      	bne.n	8009f64 <xQueueGenericSendFromISR+0x3c>
 8009f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <xQueueGenericSendFromISR+0x40>
 8009f64:	2301      	movs	r3, #1
 8009f66:	e000      	b.n	8009f6a <xQueueGenericSendFromISR+0x42>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10a      	bne.n	8009f84 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8009f80:	bf00      	nop
 8009f82:	e7fe      	b.n	8009f82 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d103      	bne.n	8009f92 <xQueueGenericSendFromISR+0x6a>
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <xQueueGenericSendFromISR+0x6e>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e000      	b.n	8009f98 <xQueueGenericSendFromISR+0x70>
 8009f96:	2300      	movs	r3, #0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	623b      	str	r3, [r7, #32]
    }
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fb2:	f002 fddb 	bl	800cb6c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8009fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	61fa      	str	r2, [r7, #28]
 8009fcc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8009fce:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fd0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d302      	bcc.n	8009fe4 <xQueueGenericSendFromISR+0xbc>
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d148      	bne.n	800a076 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f005 fc28 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 8009ffc:	4601      	mov	r1, r0
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	461a      	mov	r2, r3
 800a002:	2060      	movs	r0, #96	; 0x60
 800a004:	f004 fd30 	bl	800ea68 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a008:	683a      	ldr	r2, [r7, #0]
 800a00a:	68b9      	ldr	r1, [r7, #8]
 800a00c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a00e:	f000 fc28 	bl	800a862 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800a012:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01a:	d112      	bne.n	800a042 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d025      	beq.n	800a070 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	3324      	adds	r3, #36	; 0x24
 800a028:	4618      	mov	r0, r3
 800a02a:	f001 f9fd 	bl	800b428 <xTaskRemoveFromEventList>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d01d      	beq.n	800a070 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d01a      	beq.n	800a070 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	601a      	str	r2, [r3, #0]
 800a040:	e016      	b.n	800a070 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800a042:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a046:	2b7f      	cmp	r3, #127	; 0x7f
 800a048:	d10a      	bne.n	800a060 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	617b      	str	r3, [r7, #20]
    }
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a060:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a064:	3301      	adds	r3, #1
 800a066:	b2db      	uxtb	r3, r3
 800a068:	b25a      	sxtb	r2, r3
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800a070:	2301      	movs	r3, #1
 800a072:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800a074:	e00b      	b.n	800a08e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	4618      	mov	r0, r3
 800a07a:	f005 fbe7 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a07e:	4601      	mov	r1, r0
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	461a      	mov	r2, r3
 800a084:	2060      	movs	r0, #96	; 0x60
 800a086:	f004 fcef 	bl	800ea68 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800a08a:	2300      	movs	r3, #0
 800a08c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a090:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800a098:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3740      	adds	r7, #64	; 0x40
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08e      	sub	sp, #56	; 0x38
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800a0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <xQueueGiveFromISR+0x2a>
        __asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	623b      	str	r3, [r7, #32]
    }
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800a0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00a      	beq.n	800a0ec <xQueueGiveFromISR+0x48>
        __asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	61fb      	str	r3, [r7, #28]
    }
 800a0e8:	bf00      	nop
 800a0ea:	e7fe      	b.n	800a0ea <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <xQueueGiveFromISR+0x58>
 800a0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <xQueueGiveFromISR+0x5c>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e000      	b.n	800a102 <xQueueGiveFromISR+0x5e>
 800a100:	2300      	movs	r3, #0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10a      	bne.n	800a11c <xQueueGiveFromISR+0x78>
        __asm volatile
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	61bb      	str	r3, [r7, #24]
    }
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a11c:	f002 fd26 	bl	800cb6c <vPortValidateInterruptPriority>
        __asm volatile
 800a120:	f3ef 8211 	mrs	r2, BASEPRI
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	617a      	str	r2, [r7, #20]
 800a136:	613b      	str	r3, [r7, #16]
        return ulOriginalBASEPRI;
 800a138:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a140:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800a142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a148:	429a      	cmp	r2, r3
 800a14a:	d244      	bcs.n	800a1d6 <xQueueGiveFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800a156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a158:	4618      	mov	r0, r3
 800a15a:	f005 fb77 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a15e:	4601      	mov	r1, r0
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	2060      	movs	r0, #96	; 0x60
 800a166:	f004 fc7f 	bl	800ea68 <SEGGER_SYSVIEW_RecordU32x2>
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800a172:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17a:	d112      	bne.n	800a1a2 <xQueueGiveFromISR+0xfe>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	2b00      	cmp	r3, #0
 800a182:	d025      	beq.n	800a1d0 <xQueueGiveFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	3324      	adds	r3, #36	; 0x24
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 f94d 	bl	800b428 <xTaskRemoveFromEventList>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d01d      	beq.n	800a1d0 <xQueueGiveFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d01a      	beq.n	800a1d0 <xQueueGiveFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2201      	movs	r2, #1
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	e016      	b.n	800a1d0 <xQueueGiveFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800a1a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1a6:	2b7f      	cmp	r3, #127	; 0x7f
 800a1a8:	d10a      	bne.n	800a1c0 <xQueueGiveFromISR+0x11c>
        __asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	60fb      	str	r3, [r7, #12]
    }
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <xQueueGiveFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	b25a      	sxtb	r2, r3
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d4:	e00b      	b.n	800a1ee <xQueueGiveFromISR+0x14a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f005 fb37 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a1de:	4601      	mov	r1, r0
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	2060      	movs	r0, #96	; 0x60
 800a1e6:	f004 fc3f 	bl	800ea68 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	f383 8811 	msr	BASEPRI, r3
    }
 800a1f8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3738      	adds	r7, #56	; 0x38
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b08f      	sub	sp, #60	; 0x3c
 800a208:	af02      	add	r7, sp, #8
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800a210:	2300      	movs	r3, #0
 800a212:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d10a      	bne.n	800a234 <xQueueReceive+0x30>
        __asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	623b      	str	r3, [r7, #32]
    }
 800a230:	bf00      	nop
 800a232:	e7fe      	b.n	800a232 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d103      	bne.n	800a242 <xQueueReceive+0x3e>
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <xQueueReceive+0x42>
 800a242:	2301      	movs	r3, #1
 800a244:	e000      	b.n	800a248 <xQueueReceive+0x44>
 800a246:	2300      	movs	r3, #0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10a      	bne.n	800a262 <xQueueReceive+0x5e>
        __asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	61fb      	str	r3, [r7, #28]
    }
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a262:	f001 fa81 	bl	800b768 <xTaskGetSchedulerState>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d102      	bne.n	800a272 <xQueueReceive+0x6e>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <xQueueReceive+0x72>
 800a272:	2301      	movs	r3, #1
 800a274:	e000      	b.n	800a278 <xQueueReceive+0x74>
 800a276:	2300      	movs	r3, #0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <xQueueReceive+0x8e>
        __asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	61bb      	str	r3, [r7, #24]
    }
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a292:	f002 fb7f 	bl	800c994 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d02f      	beq.n	800a302 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a6:	f000 fb46 	bl	800a936 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800a2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f005 facd 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	f005 fac9 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2101      	movs	r1, #1
 800a2c0:	9100      	str	r1, [sp, #0]
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	205c      	movs	r0, #92	; 0x5c
 800a2c6:	f004 fc9f 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2cc:	1e5a      	subs	r2, r3, #1
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00f      	beq.n	800a2fa <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2dc:	3310      	adds	r3, #16
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 f8a2 	bl	800b428 <xTaskRemoveFromEventList>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d007      	beq.n	800a2fa <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a2ea:	4b4d      	ldr	r3, [pc, #308]	; (800a420 <xQueueReceive+0x21c>)
 800a2ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a2fa:	f002 fb7b 	bl	800c9f4 <vPortExitCritical>
                return pdPASS;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e08a      	b.n	800a418 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d113      	bne.n	800a330 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800a308:	f002 fb74 	bl	800c9f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	4618      	mov	r0, r3
 800a310:	f005 fa9c 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a314:	4604      	mov	r4, r0
 800a316:	2000      	movs	r0, #0
 800a318:	f005 fa98 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a31c:	4602      	mov	r2, r0
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2101      	movs	r1, #1
 800a322:	9100      	str	r1, [sp, #0]
 800a324:	4621      	mov	r1, r4
 800a326:	205c      	movs	r0, #92	; 0x5c
 800a328:	f004 fc6e 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800a32c:	2300      	movs	r3, #0
 800a32e:	e073      	b.n	800a418 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a332:	2b00      	cmp	r3, #0
 800a334:	d106      	bne.n	800a344 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a336:	f107 0310 	add.w	r3, r7, #16
 800a33a:	4618      	mov	r0, r3
 800a33c:	f001 f8da 	bl	800b4f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a340:	2301      	movs	r3, #1
 800a342:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a344:	f002 fb56 	bl	800c9f4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a348:	f000 fe26 	bl	800af98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a34c:	f002 fb22 	bl	800c994 <vPortEnterCritical>
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a356:	b25b      	sxtb	r3, r3
 800a358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35c:	d103      	bne.n	800a366 <xQueueReceive+0x162>
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a36c:	b25b      	sxtb	r3, r3
 800a36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a372:	d103      	bne.n	800a37c <xQueueReceive+0x178>
 800a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a376:	2200      	movs	r2, #0
 800a378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a37c:	f002 fb3a 	bl	800c9f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a380:	1d3a      	adds	r2, r7, #4
 800a382:	f107 0310 	add.w	r3, r7, #16
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f001 f8c9 	bl	800b520 <xTaskCheckForTimeOut>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d124      	bne.n	800a3de <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a396:	f000 fb46 	bl	800aa26 <prvIsQueueEmpty>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d018      	beq.n	800a3d2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	3324      	adds	r3, #36	; 0x24
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f000 ffeb 	bl	800b384 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a3ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3b0:	f000 fae7 	bl	800a982 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a3b4:	f000 fdfe 	bl	800afb4 <xTaskResumeAll>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	f47f af69 	bne.w	800a292 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800a3c0:	4b17      	ldr	r3, [pc, #92]	; (800a420 <xQueueReceive+0x21c>)
 800a3c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	f3bf 8f6f 	isb	sy
 800a3d0:	e75f      	b.n	800a292 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800a3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3d4:	f000 fad5 	bl	800a982 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a3d8:	f000 fdec 	bl	800afb4 <xTaskResumeAll>
 800a3dc:	e759      	b.n	800a292 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800a3de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e0:	f000 facf 	bl	800a982 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a3e4:	f000 fde6 	bl	800afb4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ea:	f000 fb1c 	bl	800aa26 <prvIsQueueEmpty>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f43f af4e 	beq.w	800a292 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f005 fa27 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a3fe:	4604      	mov	r4, r0
 800a400:	2000      	movs	r0, #0
 800a402:	f005 fa23 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a406:	4602      	mov	r2, r0
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2101      	movs	r1, #1
 800a40c:	9100      	str	r1, [sp, #0]
 800a40e:	4621      	mov	r1, r4
 800a410:	205c      	movs	r0, #92	; 0x5c
 800a412:	f004 fbf9 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800a416:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3734      	adds	r7, #52	; 0x34
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd90      	pop	{r4, r7, pc}
 800a420:	e000ed04 	.word	0xe000ed04

0800a424 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800a424:	b590      	push	{r4, r7, lr}
 800a426:	b091      	sub	sp, #68	; 0x44
 800a428:	af02      	add	r7, sp, #8
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800a42e:	2300      	movs	r3, #0
 800a430:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800a436:	2300      	movs	r3, #0
 800a438:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10a      	bne.n	800a456 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	623b      	str	r3, [r7, #32]
    }
 800a452:	bf00      	nop
 800a454:	e7fe      	b.n	800a454 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	61fb      	str	r3, [r7, #28]
    }
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a474:	f001 f978 	bl	800b768 <xTaskGetSchedulerState>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <xQueueSemaphoreTake+0x60>
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <xQueueSemaphoreTake+0x64>
 800a484:	2301      	movs	r3, #1
 800a486:	e000      	b.n	800a48a <xQueueSemaphoreTake+0x66>
 800a488:	2300      	movs	r3, #0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d10a      	bne.n	800a4a4 <xQueueSemaphoreTake+0x80>
        __asm volatile
 800a48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a492:	f383 8811 	msr	BASEPRI, r3
 800a496:	f3bf 8f6f 	isb	sy
 800a49a:	f3bf 8f4f 	dsb	sy
 800a49e:	61bb      	str	r3, [r7, #24]
    }
 800a4a0:	bf00      	nop
 800a4a2:	e7fe      	b.n	800a4a2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a4a4:	f002 fa76 	bl	800c994 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ac:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d034      	beq.n	800a51e <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f005 f9c8 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a4bc:	4604      	mov	r4, r0
 800a4be:	2000      	movs	r0, #0
 800a4c0:	f005 f9c4 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	9100      	str	r1, [sp, #0]
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	205c      	movs	r0, #92	; 0x5c
 800a4d0:	f004 fb9a 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	1e5a      	subs	r2, r3, #1
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d104      	bne.n	800a4ee <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a4e4:	f001 faf0 	bl	800bac8 <pvTaskIncrementMutexHeldCount>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ec:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00f      	beq.n	800a516 <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	3310      	adds	r3, #16
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 ff94 	bl	800b428 <xTaskRemoveFromEventList>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d007      	beq.n	800a516 <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a506:	4b64      	ldr	r3, [pc, #400]	; (800a698 <xQueueSemaphoreTake+0x274>)
 800a508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a516:	f002 fa6d 	bl	800c9f4 <vPortExitCritical>
                return pdPASS;
 800a51a:	2301      	movs	r3, #1
 800a51c:	e0b7      	b.n	800a68e <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d121      	bne.n	800a568 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 800a52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a52e:	f383 8811 	msr	BASEPRI, r3
 800a532:	f3bf 8f6f 	isb	sy
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	617b      	str	r3, [r7, #20]
    }
 800a53c:	bf00      	nop
 800a53e:	e7fe      	b.n	800a53e <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800a540:	f002 fa58 	bl	800c9f4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	4618      	mov	r0, r3
 800a548:	f005 f980 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a54c:	4604      	mov	r4, r0
 800a54e:	2000      	movs	r0, #0
 800a550:	f005 f97c 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a554:	4602      	mov	r2, r0
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2101      	movs	r1, #1
 800a55a:	9100      	str	r1, [sp, #0]
 800a55c:	4621      	mov	r1, r4
 800a55e:	205c      	movs	r0, #92	; 0x5c
 800a560:	f004 fb52 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800a564:	2300      	movs	r3, #0
 800a566:	e092      	b.n	800a68e <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d106      	bne.n	800a57c <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a56e:	f107 030c 	add.w	r3, r7, #12
 800a572:	4618      	mov	r0, r3
 800a574:	f000 ffbe 	bl	800b4f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a578:	2301      	movs	r3, #1
 800a57a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a57c:	f002 fa3a 	bl	800c9f4 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a580:	f000 fd0a 	bl	800af98 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a584:	f002 fa06 	bl	800c994 <vPortEnterCritical>
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a58e:	b25b      	sxtb	r3, r3
 800a590:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a594:	d103      	bne.n	800a59e <xQueueSemaphoreTake+0x17a>
 800a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5a4:	b25b      	sxtb	r3, r3
 800a5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5aa:	d103      	bne.n	800a5b4 <xQueueSemaphoreTake+0x190>
 800a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5b4:	f002 fa1e 	bl	800c9f4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5b8:	463a      	mov	r2, r7
 800a5ba:	f107 030c 	add.w	r3, r7, #12
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 ffad 	bl	800b520 <xTaskCheckForTimeOut>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d132      	bne.n	800a632 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5ce:	f000 fa2a 	bl	800aa26 <prvIsQueueEmpty>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d026      	beq.n	800a626 <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d109      	bne.n	800a5f4 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 800a5e0:	f002 f9d8 	bl	800c994 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	689b      	ldr	r3, [r3, #8]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f001 f8db 	bl	800b7a4 <xTaskPriorityInherit>
 800a5ee:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 800a5f0:	f002 fa00 	bl	800c9f4 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	3324      	adds	r3, #36	; 0x24
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f000 fec1 	bl	800b384 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a604:	f000 f9bd 	bl	800a982 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a608:	f000 fcd4 	bl	800afb4 <xTaskResumeAll>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f47f af48 	bne.w	800a4a4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 800a614:	4b20      	ldr	r3, [pc, #128]	; (800a698 <xQueueSemaphoreTake+0x274>)
 800a616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	e73e      	b.n	800a4a4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800a626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a628:	f000 f9ab 	bl	800a982 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a62c:	f000 fcc2 	bl	800afb4 <xTaskResumeAll>
 800a630:	e738      	b.n	800a4a4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800a632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a634:	f000 f9a5 	bl	800a982 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a638:	f000 fcbc 	bl	800afb4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a63c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a63e:	f000 f9f2 	bl	800aa26 <prvIsQueueEmpty>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	f43f af2d 	beq.w	800a4a4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00d      	beq.n	800a66c <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 800a650:	f002 f9a0 	bl	800c994 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a656:	f000 f8ec 	bl	800a832 <prvGetDisinheritPriorityAfterTimeout>
 800a65a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a662:	4618      	mov	r0, r3
 800a664:	f001 f998 	bl	800b998 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800a668:	f002 f9c4 	bl	800c9f4 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66e:	4618      	mov	r0, r3
 800a670:	f005 f8ec 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a674:	4604      	mov	r4, r0
 800a676:	2000      	movs	r0, #0
 800a678:	f005 f8e8 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a67c:	4602      	mov	r2, r0
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2101      	movs	r1, #1
 800a682:	9100      	str	r1, [sp, #0]
 800a684:	4621      	mov	r1, r4
 800a686:	205c      	movs	r0, #92	; 0x5c
 800a688:	f004 fabe 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800a68c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800a68e:	4618      	mov	r0, r3
 800a690:	373c      	adds	r7, #60	; 0x3c
 800a692:	46bd      	mov	sp, r7
 800a694:	bd90      	pop	{r4, r7, pc}
 800a696:	bf00      	nop
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a69c:	b590      	push	{r4, r7, lr}
 800a69e:	b091      	sub	sp, #68	; 0x44
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10a      	bne.n	800a6c8 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 800a6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800a6c4:	bf00      	nop
 800a6c6:	e7fe      	b.n	800a6c6 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d103      	bne.n	800a6d6 <xQueueReceiveFromISR+0x3a>
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <xQueueReceiveFromISR+0x3e>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e000      	b.n	800a6dc <xQueueReceiveFromISR+0x40>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800a6f2:	bf00      	nop
 800a6f4:	e7fe      	b.n	800a6f4 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6f6:	f002 fa39 	bl	800cb6c <vPortValidateInterruptPriority>
        __asm volatile
 800a6fa:	f3ef 8211 	mrs	r2, BASEPRI
 800a6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	623a      	str	r2, [r7, #32]
 800a710:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800a712:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a714:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d04d      	beq.n	800a7be <xQueueReceiveFromISR+0x122>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800a72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72e:	4618      	mov	r0, r3
 800a730:	f005 f88c 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a734:	4604      	mov	r4, r0
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4618      	mov	r0, r3
 800a73a:	f005 f887 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a73e:	4602      	mov	r2, r0
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4621      	mov	r1, r4
 800a744:	2062      	movs	r0, #98	; 0x62
 800a746:	f004 f9e9 	bl	800eb1c <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a74a:	68b9      	ldr	r1, [r7, #8]
 800a74c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a74e:	f000 f8f2 	bl	800a936 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	1e5a      	subs	r2, r3, #1
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800a75a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a762:	d112      	bne.n	800a78a <xQueueReceiveFromISR+0xee>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d025      	beq.n	800a7b8 <xQueueReceiveFromISR+0x11c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76e:	3310      	adds	r3, #16
 800a770:	4618      	mov	r0, r3
 800a772:	f000 fe59 	bl	800b428 <xTaskRemoveFromEventList>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d01d      	beq.n	800a7b8 <xQueueReceiveFromISR+0x11c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d01a      	beq.n	800a7b8 <xQueueReceiveFromISR+0x11c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	601a      	str	r2, [r3, #0]
 800a788:	e016      	b.n	800a7b8 <xQueueReceiveFromISR+0x11c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800a78a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a78e:	2b7f      	cmp	r3, #127	; 0x7f
 800a790:	d10a      	bne.n	800a7a8 <xQueueReceiveFromISR+0x10c>
        __asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	61bb      	str	r3, [r7, #24]
    }
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <xQueueReceiveFromISR+0x10a>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a7a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	b25a      	sxtb	r2, r3
 800a7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7bc:	e010      	b.n	800a7e0 <xQueueReceiveFromISR+0x144>
        }
        else
        {
            xReturn = pdFAIL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f005 f841 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f005 f83c 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4621      	mov	r1, r4
 800a7da:	2062      	movs	r0, #98	; 0x62
 800a7dc:	f004 f99e 	bl	800eb1c <SEGGER_SYSVIEW_RecordU32x3>
 800a7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e2:	617b      	str	r3, [r7, #20]
        __asm volatile
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	f383 8811 	msr	BASEPRI, r3
    }
 800a7ea:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3744      	adds	r7, #68	; 0x44
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd90      	pop	{r4, r7, pc}

0800a7f6 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10a      	bne.n	800a81a <uxQueueMessagesWaiting+0x24>
        __asm volatile
 800a804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a808:	f383 8811 	msr	BASEPRI, r3
 800a80c:	f3bf 8f6f 	isb	sy
 800a810:	f3bf 8f4f 	dsb	sy
 800a814:	60bb      	str	r3, [r7, #8]
    }
 800a816:	bf00      	nop
 800a818:	e7fe      	b.n	800a818 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800a81a:	f002 f8bb 	bl	800c994 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a822:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800a824:	f002 f8e6 	bl	800c9f4 <vPortExitCritical>

    return uxReturn;
 800a828:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800a832:	b480      	push	{r7}
 800a834:	b085      	sub	sp, #20
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d006      	beq.n	800a850 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f1c3 0305 	rsb	r3, r3, #5
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e001      	b.n	800a854 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800a854:	68fb      	ldr	r3, [r7, #12]
    }
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b086      	sub	sp, #24
 800a866:	af00      	add	r7, sp, #0
 800a868:	60f8      	str	r0, [r7, #12]
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a86e:	2300      	movs	r3, #0
 800a870:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a876:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10d      	bne.n	800a89c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d14d      	bne.n	800a924 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f001 f803 	bl	800b898 <xTaskPriorityDisinherit>
 800a892:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	609a      	str	r2, [r3, #8]
 800a89a:	e043      	b.n	800a924 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d119      	bne.n	800a8d6 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6858      	ldr	r0, [r3, #4]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	f005 f9a1 	bl	800fbf4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ba:	441a      	add	r2, r3
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d32b      	bcc.n	800a924 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	605a      	str	r2, [r3, #4]
 800a8d4:	e026      	b.n	800a924 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	68d8      	ldr	r0, [r3, #12]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8de:	461a      	mov	r2, r3
 800a8e0:	68b9      	ldr	r1, [r7, #8]
 800a8e2:	f005 f987 	bl	800fbf4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ee:	425b      	negs	r3, r3
 800a8f0:	441a      	add	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	68da      	ldr	r2, [r3, #12]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d207      	bcs.n	800a912 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689a      	ldr	r2, [r3, #8]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	425b      	negs	r3, r3
 800a90c:	441a      	add	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2b02      	cmp	r3, #2
 800a916:	d105      	bne.n	800a924 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d002      	beq.n	800a924 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	3b01      	subs	r3, #1
 800a922:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	1c5a      	adds	r2, r3, #1
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800a92c:	697b      	ldr	r3, [r7, #20]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d018      	beq.n	800a97a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a950:	441a      	add	r2, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	68da      	ldr	r2, [r3, #12]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d303      	bcc.n	800a96a <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	68d9      	ldr	r1, [r3, #12]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a972:	461a      	mov	r2, r3
 800a974:	6838      	ldr	r0, [r7, #0]
 800a976:	f005 f93d 	bl	800fbf4 <memcpy>
    }
}
 800a97a:	bf00      	nop
 800a97c:	3708      	adds	r7, #8
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800a98a:	f002 f803 	bl	800c994 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a994:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a996:	e011      	b.n	800a9bc <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d012      	beq.n	800a9c6 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3324      	adds	r3, #36	; 0x24
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fd3f 	bl	800b428 <xTaskRemoveFromEventList>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800a9b0:	f000 fe1c 	bl	800b5ec <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dce9      	bgt.n	800a998 <prvUnlockQueue+0x16>
 800a9c4:	e000      	b.n	800a9c8 <prvUnlockQueue+0x46>
                        break;
 800a9c6:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	22ff      	movs	r2, #255	; 0xff
 800a9cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800a9d0:	f002 f810 	bl	800c9f4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800a9d4:	f001 ffde 	bl	800c994 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9de:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9e0:	e011      	b.n	800aa06 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d012      	beq.n	800aa10 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	3310      	adds	r3, #16
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fd1a 	bl	800b428 <xTaskRemoveFromEventList>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800a9fa:	f000 fdf7 	bl	800b5ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	dce9      	bgt.n	800a9e2 <prvUnlockQueue+0x60>
 800aa0e:	e000      	b.n	800aa12 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800aa10:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	22ff      	movs	r2, #255	; 0xff
 800aa16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800aa1a:	f001 ffeb 	bl	800c9f4 <vPortExitCritical>
}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800aa2e:	f001 ffb1 	bl	800c994 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d102      	bne.n	800aa40 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	60fb      	str	r3, [r7, #12]
 800aa3e:	e001      	b.n	800aa44 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800aa44:	f001 ffd6 	bl	800c9f4 <vPortExitCritical>

    return xReturn;
 800aa48:	68fb      	ldr	r3, [r7, #12]
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800aa5a:	f001 ff9b 	bl	800c994 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d102      	bne.n	800aa70 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	60fb      	str	r3, [r7, #12]
 800aa6e:	e001      	b.n	800aa74 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800aa74:	f001 ffbe 	bl	800c9f4 <vPortExitCritical>

    return xReturn;
 800aa78:	68fb      	ldr	r3, [r7, #12]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800aa82:	b480      	push	{r7}
 800aa84:	b087      	sub	sp, #28
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	60fb      	str	r3, [r7, #12]
    }
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d102      	bne.n	800aabc <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 800aab6:	2301      	movs	r3, #1
 800aab8:	617b      	str	r3, [r7, #20]
 800aaba:	e001      	b.n	800aac0 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800aac0:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aac2:	4618      	mov	r0, r3
 800aac4:	371c      	adds	r7, #28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
	...

0800aad0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aada:	2300      	movs	r3, #0
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	e01e      	b.n	800ab1e <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aae0:	4a13      	ldr	r2, [pc, #76]	; (800ab30 <vQueueAddToRegistry+0x60>)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d115      	bne.n	800ab18 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aaec:	4910      	ldr	r1, [pc, #64]	; (800ab30 <vQueueAddToRegistry+0x60>)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800aaf6:	4a0e      	ldr	r2, [pc, #56]	; (800ab30 <vQueueAddToRegistry+0x60>)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	00db      	lsls	r3, r3, #3
 800aafc:	4413      	add	r3, r2
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f004 fea1 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	2071      	movs	r0, #113	; 0x71
 800ab12:	f003 ffa9 	bl	800ea68 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800ab16:	e006      	b.n	800ab26 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	60fb      	str	r3, [r7, #12]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2b07      	cmp	r3, #7
 800ab22:	d9dd      	bls.n	800aae0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	2001ac34 	.word	0x2001ac34

0800ab34 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800ab44:	f001 ff26 	bl	800c994 <vPortEnterCritical>
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab4e:	b25b      	sxtb	r3, r3
 800ab50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab54:	d103      	bne.n	800ab5e <vQueueWaitForMessageRestricted+0x2a>
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab64:	b25b      	sxtb	r3, r3
 800ab66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6a:	d103      	bne.n	800ab74 <vQueueWaitForMessageRestricted+0x40>
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab74:	f001 ff3e 	bl	800c9f4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d106      	bne.n	800ab8e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	3324      	adds	r3, #36	; 0x24
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	68b9      	ldr	r1, [r7, #8]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fc1f 	bl	800b3cc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800ab8e:	6978      	ldr	r0, [r7, #20]
 800ab90:	f7ff fef7 	bl	800a982 <prvUnlockQueue>
    }
 800ab94:	bf00      	nop
 800ab96:	3718      	adds	r7, #24
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08c      	sub	sp, #48	; 0x30
 800aba0:	af04      	add	r7, sp, #16
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	603b      	str	r3, [r7, #0]
 800aba8:	4613      	mov	r3, r2
 800abaa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abac:	88fb      	ldrh	r3, [r7, #6]
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f002 f81b 	bl	800cbec <pvPortMalloc>
 800abb6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00e      	beq.n	800abdc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abbe:	2058      	movs	r0, #88	; 0x58
 800abc0:	f002 f814 	bl	800cbec <pvPortMalloc>
 800abc4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800abc6:	69fb      	ldr	r3, [r7, #28]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d003      	beq.n	800abd4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	631a      	str	r2, [r3, #48]	; 0x30
 800abd2:	e005      	b.n	800abe0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800abd4:	6978      	ldr	r0, [r7, #20]
 800abd6:	f002 f8e9 	bl	800cdac <vPortFree>
 800abda:	e001      	b.n	800abe0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800abdc:	2300      	movs	r3, #0
 800abde:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d013      	beq.n	800ac0e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abe6:	88fa      	ldrh	r2, [r7, #6]
 800abe8:	2300      	movs	r3, #0
 800abea:	9303      	str	r3, [sp, #12]
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	9302      	str	r3, [sp, #8]
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf2:	9301      	str	r3, [sp, #4]
 800abf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	68b9      	ldr	r1, [r7, #8]
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 f80e 	bl	800ac1e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800ac02:	69f8      	ldr	r0, [r7, #28]
 800ac04:	f000 f8a2 	bl	800ad4c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	61bb      	str	r3, [r7, #24]
 800ac0c:	e002      	b.n	800ac14 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800ac14:	69bb      	ldr	r3, [r7, #24]
    }
 800ac16:	4618      	mov	r0, r3
 800ac18:	3720      	adds	r7, #32
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b088      	sub	sp, #32
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	461a      	mov	r2, r3
 800ac36:	21a5      	movs	r1, #165	; 0xa5
 800ac38:	f004 ffea 	bl	800fc10 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac46:	3b01      	subs	r3, #1
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	f023 0307 	bic.w	r3, r3, #7
 800ac54:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac56:	69bb      	ldr	r3, [r7, #24]
 800ac58:	f003 0307 	and.w	r3, r3, #7
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00a      	beq.n	800ac76 <prvInitialiseNewTask+0x58>
        __asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	617b      	str	r3, [r7, #20]
    }
 800ac72:	bf00      	nop
 800ac74:	e7fe      	b.n	800ac74 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d01f      	beq.n	800acbc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	61fb      	str	r3, [r7, #28]
 800ac80:	e012      	b.n	800aca8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac82:	68ba      	ldr	r2, [r7, #8]
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	4413      	add	r3, r2
 800ac88:	7819      	ldrb	r1, [r3, #0]
 800ac8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	4413      	add	r3, r2
 800ac90:	3334      	adds	r3, #52	; 0x34
 800ac92:	460a      	mov	r2, r1
 800ac94:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d006      	beq.n	800acb0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	3301      	adds	r3, #1
 800aca6:	61fb      	str	r3, [r7, #28]
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	2b09      	cmp	r3, #9
 800acac:	d9e9      	bls.n	800ac82 <prvInitialiseNewTask+0x64>
 800acae:	e000      	b.n	800acb2 <prvInitialiseNewTask+0x94>
            {
                break;
 800acb0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800acba:	e003      	b.n	800acc4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	d901      	bls.n	800acce <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acca:	2304      	movs	r3, #4
 800accc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acd8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800acda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acdc:	2200      	movs	r2, #0
 800acde:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	3304      	adds	r3, #4
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7fe fe75 	bl	80099d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acec:	3318      	adds	r3, #24
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fe70 	bl	80099d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acf8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfc:	f1c3 0205 	rsb	r2, r3, #5
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad08:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	3350      	adds	r3, #80	; 0x50
 800ad0e:	2204      	movs	r2, #4
 800ad10:	2100      	movs	r1, #0
 800ad12:	4618      	mov	r0, r3
 800ad14:	f004 ff7c 	bl	800fc10 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	3354      	adds	r3, #84	; 0x54
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f004 ff75 	bl	800fc10 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad26:	683a      	ldr	r2, [r7, #0]
 800ad28:	68f9      	ldr	r1, [r7, #12]
 800ad2a:	69b8      	ldr	r0, [r7, #24]
 800ad2c:	f001 fc84 	bl	800c638 <pxPortInitialiseStack>
 800ad30:	4602      	mov	r2, r0
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d002      	beq.n	800ad42 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ad42:	bf00      	nop
 800ad44:	3720      	adds	r7, #32
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800ad4c:	b5b0      	push	{r4, r5, r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af02      	add	r7, sp, #8
 800ad52:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800ad54:	f001 fe1e 	bl	800c994 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800ad58:	4b3b      	ldr	r3, [pc, #236]	; (800ae48 <prvAddNewTaskToReadyList+0xfc>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	4a3a      	ldr	r2, [pc, #232]	; (800ae48 <prvAddNewTaskToReadyList+0xfc>)
 800ad60:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800ad62:	4b3a      	ldr	r3, [pc, #232]	; (800ae4c <prvAddNewTaskToReadyList+0x100>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d109      	bne.n	800ad7e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800ad6a:	4a38      	ldr	r2, [pc, #224]	; (800ae4c <prvAddNewTaskToReadyList+0x100>)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad70:	4b35      	ldr	r3, [pc, #212]	; (800ae48 <prvAddNewTaskToReadyList+0xfc>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d110      	bne.n	800ad9a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800ad78:	f000 fc5c 	bl	800b634 <prvInitialiseTaskLists>
 800ad7c:	e00d      	b.n	800ad9a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800ad7e:	4b34      	ldr	r3, [pc, #208]	; (800ae50 <prvAddNewTaskToReadyList+0x104>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad86:	4b31      	ldr	r3, [pc, #196]	; (800ae4c <prvAddNewTaskToReadyList+0x100>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d802      	bhi.n	800ad9a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800ad94:	4a2d      	ldr	r2, [pc, #180]	; (800ae4c <prvAddNewTaskToReadyList+0x100>)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800ad9a:	4b2e      	ldr	r3, [pc, #184]	; (800ae54 <prvAddNewTaskToReadyList+0x108>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	4a2c      	ldr	r2, [pc, #176]	; (800ae54 <prvAddNewTaskToReadyList+0x108>)
 800ada2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ada4:	4b2b      	ldr	r3, [pc, #172]	; (800ae54 <prvAddNewTaskToReadyList+0x108>)
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d016      	beq.n	800ade0 <prvAddNewTaskToReadyList+0x94>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f004 fc23 	bl	800f600 <SEGGER_SYSVIEW_OnTaskCreate>
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	461d      	mov	r5, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	461c      	mov	r4, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add6:	1ae3      	subs	r3, r4, r3
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	462b      	mov	r3, r5
 800addc:	f002 f9ac 	bl	800d138 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f004 fc90 	bl	800f708 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	2201      	movs	r2, #1
 800adee:	409a      	lsls	r2, r3
 800adf0:	4b19      	ldr	r3, [pc, #100]	; (800ae58 <prvAddNewTaskToReadyList+0x10c>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	4a18      	ldr	r2, [pc, #96]	; (800ae58 <prvAddNewTaskToReadyList+0x10c>)
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfe:	4613      	mov	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4a15      	ldr	r2, [pc, #84]	; (800ae5c <prvAddNewTaskToReadyList+0x110>)
 800ae08:	441a      	add	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4610      	mov	r0, r2
 800ae12:	f7fe fdec 	bl	80099ee <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800ae16:	f001 fded 	bl	800c9f4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	; (800ae50 <prvAddNewTaskToReadyList+0x104>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00e      	beq.n	800ae40 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae22:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <prvAddNewTaskToReadyList+0x100>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d207      	bcs.n	800ae40 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800ae30:	4b0b      	ldr	r3, [pc, #44]	; (800ae60 <prvAddNewTaskToReadyList+0x114>)
 800ae32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bdb0      	pop	{r4, r5, r7, pc}
 800ae48:	200003d4 	.word	0x200003d4
 800ae4c:	200002fc 	.word	0x200002fc
 800ae50:	200003e0 	.word	0x200003e0
 800ae54:	200003f0 	.word	0x200003f0
 800ae58:	200003dc 	.word	0x200003dc
 800ae5c:	20000300 	.word	0x20000300
 800ae60:	e000ed04 	.word	0xe000ed04

0800ae64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d01b      	beq.n	800aeae <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800ae76:	4b15      	ldr	r3, [pc, #84]	; (800aecc <vTaskDelay+0x68>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00a      	beq.n	800ae94 <vTaskDelay+0x30>
        __asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	60bb      	str	r3, [r7, #8]
    }
 800ae90:	bf00      	nop
 800ae92:	e7fe      	b.n	800ae92 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800ae94:	f000 f880 	bl	800af98 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	2023      	movs	r0, #35	; 0x23
 800ae9c:	f003 fda8 	bl	800e9f0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aea0:	2100      	movs	r1, #0
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 ffc2 	bl	800be2c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800aea8:	f000 f884 	bl	800afb4 <xTaskResumeAll>
 800aeac:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d107      	bne.n	800aec4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800aeb4:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <vTaskDelay+0x6c>)
 800aeb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800aec4:	bf00      	nop
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	200003fc 	.word	0x200003fc
 800aed0:	e000ed04 	.word	0xe000ed04

0800aed4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800aeda:	4b27      	ldr	r3, [pc, #156]	; (800af78 <vTaskStartScheduler+0xa4>)
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	2300      	movs	r3, #0
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	2300      	movs	r3, #0
 800aee4:	2282      	movs	r2, #130	; 0x82
 800aee6:	4925      	ldr	r1, [pc, #148]	; (800af7c <vTaskStartScheduler+0xa8>)
 800aee8:	4825      	ldr	r0, [pc, #148]	; (800af80 <vTaskStartScheduler+0xac>)
 800aeea:	f7ff fe57 	bl	800ab9c <xTaskCreate>
 800aeee:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d102      	bne.n	800aefc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800aef6:	f001 f811 	bl	800bf1c <xTimerCreateTimerTask>
 800aefa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d124      	bne.n	800af4c <vTaskStartScheduler+0x78>
        __asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	60bb      	str	r3, [r7, #8]
    }
 800af14:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800af16:	4b1b      	ldr	r3, [pc, #108]	; (800af84 <vTaskStartScheduler+0xb0>)
 800af18:	f04f 32ff 	mov.w	r2, #4294967295
 800af1c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800af1e:	4b1a      	ldr	r3, [pc, #104]	; (800af88 <vTaskStartScheduler+0xb4>)
 800af20:	2201      	movs	r2, #1
 800af22:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af24:	4b19      	ldr	r3, [pc, #100]	; (800af8c <vTaskStartScheduler+0xb8>)
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800af2a:	4b19      	ldr	r3, [pc, #100]	; (800af90 <vTaskStartScheduler+0xbc>)
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	4b12      	ldr	r3, [pc, #72]	; (800af78 <vTaskStartScheduler+0xa4>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d102      	bne.n	800af3c <vTaskStartScheduler+0x68>
 800af36:	f004 fb47 	bl	800f5c8 <SEGGER_SYSVIEW_OnIdle>
 800af3a:	e004      	b.n	800af46 <vTaskStartScheduler+0x72>
 800af3c:	4b14      	ldr	r3, [pc, #80]	; (800af90 <vTaskStartScheduler+0xbc>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4618      	mov	r0, r3
 800af42:	f004 fb9f 	bl	800f684 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800af46:	f001 fc05 	bl	800c754 <xPortStartScheduler>
 800af4a:	e00e      	b.n	800af6a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af52:	d10a      	bne.n	800af6a <vTaskStartScheduler+0x96>
        __asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	607b      	str	r3, [r7, #4]
    }
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800af6a:	4b0a      	ldr	r3, [pc, #40]	; (800af94 <vTaskStartScheduler+0xc0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
}
 800af6e:	bf00      	nop
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200003f8 	.word	0x200003f8
 800af7c:	08012d90 	.word	0x08012d90
 800af80:	0800b605 	.word	0x0800b605
 800af84:	200003f4 	.word	0x200003f4
 800af88:	200003e0 	.word	0x200003e0
 800af8c:	200003d8 	.word	0x200003d8
 800af90:	200002fc 	.word	0x200002fc
 800af94:	20000024 	.word	0x20000024

0800af98 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800af98:	b480      	push	{r7}
 800af9a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800af9c:	4b04      	ldr	r3, [pc, #16]	; (800afb0 <vTaskSuspendAll+0x18>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	3301      	adds	r3, #1
 800afa2:	4a03      	ldr	r2, [pc, #12]	; (800afb0 <vTaskSuspendAll+0x18>)
 800afa4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800afa6:	bf00      	nop
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	200003fc 	.word	0x200003fc

0800afb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800afba:	2300      	movs	r3, #0
 800afbc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800afc2:	4b43      	ldr	r3, [pc, #268]	; (800b0d0 <xTaskResumeAll+0x11c>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10a      	bne.n	800afe0 <xTaskResumeAll+0x2c>
        __asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	603b      	str	r3, [r7, #0]
    }
 800afdc:	bf00      	nop
 800afde:	e7fe      	b.n	800afde <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800afe0:	f001 fcd8 	bl	800c994 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800afe4:	4b3a      	ldr	r3, [pc, #232]	; (800b0d0 <xTaskResumeAll+0x11c>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3b01      	subs	r3, #1
 800afea:	4a39      	ldr	r2, [pc, #228]	; (800b0d0 <xTaskResumeAll+0x11c>)
 800afec:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afee:	4b38      	ldr	r3, [pc, #224]	; (800b0d0 <xTaskResumeAll+0x11c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d165      	bne.n	800b0c2 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aff6:	4b37      	ldr	r3, [pc, #220]	; (800b0d4 <xTaskResumeAll+0x120>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d061      	beq.n	800b0c2 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800affe:	e032      	b.n	800b066 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b000:	4b35      	ldr	r3, [pc, #212]	; (800b0d8 <xTaskResumeAll+0x124>)
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3318      	adds	r3, #24
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7fe fd4b 	bl	8009aa8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3304      	adds	r3, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fd46 	bl	8009aa8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4618      	mov	r0, r3
 800b020:	f004 fb72 	bl	800f708 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b028:	2201      	movs	r2, #1
 800b02a:	409a      	lsls	r2, r3
 800b02c:	4b2b      	ldr	r3, [pc, #172]	; (800b0dc <xTaskResumeAll+0x128>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4313      	orrs	r3, r2
 800b032:	4a2a      	ldr	r2, [pc, #168]	; (800b0dc <xTaskResumeAll+0x128>)
 800b034:	6013      	str	r3, [r2, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03a:	4613      	mov	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4413      	add	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4a27      	ldr	r2, [pc, #156]	; (800b0e0 <xTaskResumeAll+0x12c>)
 800b044:	441a      	add	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	3304      	adds	r3, #4
 800b04a:	4619      	mov	r1, r3
 800b04c:	4610      	mov	r0, r2
 800b04e:	f7fe fcce 	bl	80099ee <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b056:	4b23      	ldr	r3, [pc, #140]	; (800b0e4 <xTaskResumeAll+0x130>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d302      	bcc.n	800b066 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800b060:	4b21      	ldr	r3, [pc, #132]	; (800b0e8 <xTaskResumeAll+0x134>)
 800b062:	2201      	movs	r2, #1
 800b064:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b066:	4b1c      	ldr	r3, [pc, #112]	; (800b0d8 <xTaskResumeAll+0x124>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d1c8      	bne.n	800b000 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d001      	beq.n	800b078 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800b074:	f000 fb5c 	bl	800b730 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b078:	4b1c      	ldr	r3, [pc, #112]	; (800b0ec <xTaskResumeAll+0x138>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d010      	beq.n	800b0a6 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800b084:	f000 f858 	bl	800b138 <xTaskIncrementTick>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d002      	beq.n	800b094 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800b08e:	4b16      	ldr	r3, [pc, #88]	; (800b0e8 <xTaskResumeAll+0x134>)
 800b090:	2201      	movs	r2, #1
 800b092:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3b01      	subs	r3, #1
 800b098:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d1f1      	bne.n	800b084 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800b0a0:	4b12      	ldr	r3, [pc, #72]	; (800b0ec <xTaskResumeAll+0x138>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800b0a6:	4b10      	ldr	r3, [pc, #64]	; (800b0e8 <xTaskResumeAll+0x134>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d009      	beq.n	800b0c2 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800b0b2:	4b0f      	ldr	r3, [pc, #60]	; (800b0f0 <xTaskResumeAll+0x13c>)
 800b0b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0b8:	601a      	str	r2, [r3, #0]
 800b0ba:	f3bf 8f4f 	dsb	sy
 800b0be:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800b0c2:	f001 fc97 	bl	800c9f4 <vPortExitCritical>

    return xAlreadyYielded;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	200003fc 	.word	0x200003fc
 800b0d4:	200003d4 	.word	0x200003d4
 800b0d8:	20000394 	.word	0x20000394
 800b0dc:	200003dc 	.word	0x200003dc
 800b0e0:	20000300 	.word	0x20000300
 800b0e4:	200002fc 	.word	0x200002fc
 800b0e8:	200003e8 	.word	0x200003e8
 800b0ec:	200003e4 	.word	0x200003e4
 800b0f0:	e000ed04 	.word	0xe000ed04

0800b0f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <xTaskGetTickCount+0x1c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800b100:	687b      	ldr	r3, [r7, #4]
}
 800b102:	4618      	mov	r0, r3
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	200003d8 	.word	0x200003d8

0800b114 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b11a:	f001 fd27 	bl	800cb6c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b11e:	2300      	movs	r3, #0
 800b120:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800b122:	4b04      	ldr	r3, [pc, #16]	; (800b134 <xTaskGetTickCountFromISR+0x20>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800b128:	683b      	ldr	r3, [r7, #0]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	200003d8 	.word	0x200003d8

0800b138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800b13e:	2300      	movs	r3, #0
 800b140:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b142:	4b50      	ldr	r3, [pc, #320]	; (800b284 <xTaskIncrementTick+0x14c>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	f040 8092 	bne.w	800b270 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b14c:	4b4e      	ldr	r3, [pc, #312]	; (800b288 <xTaskIncrementTick+0x150>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3301      	adds	r3, #1
 800b152:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800b154:	4a4c      	ldr	r2, [pc, #304]	; (800b288 <xTaskIncrementTick+0x150>)
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d120      	bne.n	800b1a2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800b160:	4b4a      	ldr	r3, [pc, #296]	; (800b28c <xTaskIncrementTick+0x154>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <xTaskIncrementTick+0x48>
        __asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	603b      	str	r3, [r7, #0]
    }
 800b17c:	bf00      	nop
 800b17e:	e7fe      	b.n	800b17e <xTaskIncrementTick+0x46>
 800b180:	4b42      	ldr	r3, [pc, #264]	; (800b28c <xTaskIncrementTick+0x154>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]
 800b186:	4b42      	ldr	r3, [pc, #264]	; (800b290 <xTaskIncrementTick+0x158>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a40      	ldr	r2, [pc, #256]	; (800b28c <xTaskIncrementTick+0x154>)
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	4a40      	ldr	r2, [pc, #256]	; (800b290 <xTaskIncrementTick+0x158>)
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6013      	str	r3, [r2, #0]
 800b194:	4b3f      	ldr	r3, [pc, #252]	; (800b294 <xTaskIncrementTick+0x15c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3301      	adds	r3, #1
 800b19a:	4a3e      	ldr	r2, [pc, #248]	; (800b294 <xTaskIncrementTick+0x15c>)
 800b19c:	6013      	str	r3, [r2, #0]
 800b19e:	f000 fac7 	bl	800b730 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800b1a2:	4b3d      	ldr	r3, [pc, #244]	; (800b298 <xTaskIncrementTick+0x160>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	693a      	ldr	r2, [r7, #16]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d34c      	bcc.n	800b246 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1ac:	4b37      	ldr	r3, [pc, #220]	; (800b28c <xTaskIncrementTick+0x154>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d104      	bne.n	800b1c0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1b6:	4b38      	ldr	r3, [pc, #224]	; (800b298 <xTaskIncrementTick+0x160>)
 800b1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1bc:	601a      	str	r2, [r3, #0]
                    break;
 800b1be:	e042      	b.n	800b246 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c0:	4b32      	ldr	r3, [pc, #200]	; (800b28c <xTaskIncrementTick+0x154>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d203      	bcs.n	800b1e0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800b1d8:	4a2f      	ldr	r2, [pc, #188]	; (800b298 <xTaskIncrementTick+0x160>)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1de:	e032      	b.n	800b246 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7fe fc5f 	bl	8009aa8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	3318      	adds	r3, #24
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7fe fc56 	bl	8009aa8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f004 fa82 	bl	800f708 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b208:	2201      	movs	r2, #1
 800b20a:	409a      	lsls	r2, r3
 800b20c:	4b23      	ldr	r3, [pc, #140]	; (800b29c <xTaskIncrementTick+0x164>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4313      	orrs	r3, r2
 800b212:	4a22      	ldr	r2, [pc, #136]	; (800b29c <xTaskIncrementTick+0x164>)
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21a:	4613      	mov	r3, r2
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4a1f      	ldr	r2, [pc, #124]	; (800b2a0 <xTaskIncrementTick+0x168>)
 800b224:	441a      	add	r2, r3
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	3304      	adds	r3, #4
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f7fe fbde 	bl	80099ee <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	4b1b      	ldr	r3, [pc, #108]	; (800b2a4 <xTaskIncrementTick+0x16c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d3b5      	bcc.n	800b1ac <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800b240:	2301      	movs	r3, #1
 800b242:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b244:	e7b2      	b.n	800b1ac <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b246:	4b17      	ldr	r3, [pc, #92]	; (800b2a4 <xTaskIncrementTick+0x16c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24c:	4914      	ldr	r1, [pc, #80]	; (800b2a0 <xTaskIncrementTick+0x168>)
 800b24e:	4613      	mov	r3, r2
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4413      	add	r3, r2
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	440b      	add	r3, r1
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d901      	bls.n	800b262 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800b25e:	2301      	movs	r3, #1
 800b260:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800b262:	4b11      	ldr	r3, [pc, #68]	; (800b2a8 <xTaskIncrementTick+0x170>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d007      	beq.n	800b27a <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800b26a:	2301      	movs	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
 800b26e:	e004      	b.n	800b27a <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800b270:	4b0e      	ldr	r3, [pc, #56]	; (800b2ac <xTaskIncrementTick+0x174>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	4a0d      	ldr	r2, [pc, #52]	; (800b2ac <xTaskIncrementTick+0x174>)
 800b278:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800b27a:	697b      	ldr	r3, [r7, #20]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	200003fc 	.word	0x200003fc
 800b288:	200003d8 	.word	0x200003d8
 800b28c:	2000038c 	.word	0x2000038c
 800b290:	20000390 	.word	0x20000390
 800b294:	200003ec 	.word	0x200003ec
 800b298:	200003f4 	.word	0x200003f4
 800b29c:	200003dc 	.word	0x200003dc
 800b2a0:	20000300 	.word	0x20000300
 800b2a4:	200002fc 	.word	0x200002fc
 800b2a8:	200003e8 	.word	0x200003e8
 800b2ac:	200003e4 	.word	0x200003e4

0800b2b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2b6:	4b2d      	ldr	r3, [pc, #180]	; (800b36c <vTaskSwitchContext+0xbc>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d003      	beq.n	800b2c6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800b2be:	4b2c      	ldr	r3, [pc, #176]	; (800b370 <vTaskSwitchContext+0xc0>)
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800b2c4:	e04d      	b.n	800b362 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800b2c6:	4b2a      	ldr	r3, [pc, #168]	; (800b370 <vTaskSwitchContext+0xc0>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2cc:	4b29      	ldr	r3, [pc, #164]	; (800b374 <vTaskSwitchContext+0xc4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	fab3 f383 	clz	r3, r3
 800b2d8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800b2da:	7afb      	ldrb	r3, [r7, #11]
 800b2dc:	f1c3 031f 	rsb	r3, r3, #31
 800b2e0:	617b      	str	r3, [r7, #20]
 800b2e2:	4925      	ldr	r1, [pc, #148]	; (800b378 <vTaskSwitchContext+0xc8>)
 800b2e4:	697a      	ldr	r2, [r7, #20]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	4413      	add	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	440b      	add	r3, r1
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10a      	bne.n	800b30c <vTaskSwitchContext+0x5c>
        __asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	607b      	str	r3, [r7, #4]
    }
 800b308:	bf00      	nop
 800b30a:	e7fe      	b.n	800b30a <vTaskSwitchContext+0x5a>
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	4613      	mov	r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	4413      	add	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4a18      	ldr	r2, [pc, #96]	; (800b378 <vTaskSwitchContext+0xc8>)
 800b318:	4413      	add	r3, r2
 800b31a:	613b      	str	r3, [r7, #16]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	605a      	str	r2, [r3, #4]
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	3308      	adds	r3, #8
 800b32e:	429a      	cmp	r2, r3
 800b330:	d104      	bne.n	800b33c <vTaskSwitchContext+0x8c>
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	605a      	str	r2, [r3, #4]
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	4a0e      	ldr	r2, [pc, #56]	; (800b37c <vTaskSwitchContext+0xcc>)
 800b344:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800b346:	4b0d      	ldr	r3, [pc, #52]	; (800b37c <vTaskSwitchContext+0xcc>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	4b0d      	ldr	r3, [pc, #52]	; (800b380 <vTaskSwitchContext+0xd0>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d102      	bne.n	800b358 <vTaskSwitchContext+0xa8>
 800b352:	f004 f939 	bl	800f5c8 <SEGGER_SYSVIEW_OnIdle>
}
 800b356:	e004      	b.n	800b362 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800b358:	4b08      	ldr	r3, [pc, #32]	; (800b37c <vTaskSwitchContext+0xcc>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f004 f991 	bl	800f684 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800b362:	bf00      	nop
 800b364:	3718      	adds	r7, #24
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	200003fc 	.word	0x200003fc
 800b370:	200003e8 	.word	0x200003e8
 800b374:	200003dc 	.word	0x200003dc
 800b378:	20000300 	.word	0x20000300
 800b37c:	200002fc 	.word	0x200002fc
 800b380:	200003f8 	.word	0x200003f8

0800b384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d10a      	bne.n	800b3aa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800b394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	60fb      	str	r3, [r7, #12]
    }
 800b3a6:	bf00      	nop
 800b3a8:	e7fe      	b.n	800b3a8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3aa:	4b07      	ldr	r3, [pc, #28]	; (800b3c8 <vTaskPlaceOnEventList+0x44>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3318      	adds	r3, #24
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7fe fb3f 	bl	8009a36 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	6838      	ldr	r0, [r7, #0]
 800b3bc:	f000 fd36 	bl	800be2c <prvAddCurrentTaskToDelayedList>
}
 800b3c0:	bf00      	nop
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	200002fc 	.word	0x200002fc

0800b3cc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10a      	bne.n	800b3f4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800b3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e2:	f383 8811 	msr	BASEPRI, r3
 800b3e6:	f3bf 8f6f 	isb	sy
 800b3ea:	f3bf 8f4f 	dsb	sy
 800b3ee:	617b      	str	r3, [r7, #20]
    }
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3f4:	4b0b      	ldr	r3, [pc, #44]	; (800b424 <vTaskPlaceOnEventListRestricted+0x58>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3318      	adds	r3, #24
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f7fe faf6 	bl	80099ee <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800b408:	f04f 33ff 	mov.w	r3, #4294967295
 800b40c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800b40e:	2024      	movs	r0, #36	; 0x24
 800b410:	f003 fad0 	bl	800e9b4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	68b8      	ldr	r0, [r7, #8]
 800b418:	f000 fd08 	bl	800be2c <prvAddCurrentTaskToDelayedList>
    }
 800b41c:	bf00      	nop
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	200002fc 	.word	0x200002fc

0800b428 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b086      	sub	sp, #24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10a      	bne.n	800b454 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	60fb      	str	r3, [r7, #12]
    }
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	3318      	adds	r3, #24
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe fb25 	bl	8009aa8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b45e:	4b1f      	ldr	r3, [pc, #124]	; (800b4dc <xTaskRemoveFromEventList+0xb4>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d120      	bne.n	800b4a8 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	3304      	adds	r3, #4
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fe fb1c 	bl	8009aa8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	4618      	mov	r0, r3
 800b474:	f004 f948 	bl	800f708 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	2201      	movs	r2, #1
 800b47e:	409a      	lsls	r2, r3
 800b480:	4b17      	ldr	r3, [pc, #92]	; (800b4e0 <xTaskRemoveFromEventList+0xb8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4313      	orrs	r3, r2
 800b486:	4a16      	ldr	r2, [pc, #88]	; (800b4e0 <xTaskRemoveFromEventList+0xb8>)
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48e:	4613      	mov	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4a13      	ldr	r2, [pc, #76]	; (800b4e4 <xTaskRemoveFromEventList+0xbc>)
 800b498:	441a      	add	r2, r3
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	3304      	adds	r3, #4
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	f7fe faa4 	bl	80099ee <vListInsertEnd>
 800b4a6:	e005      	b.n	800b4b4 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	3318      	adds	r3, #24
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	480e      	ldr	r0, [pc, #56]	; (800b4e8 <xTaskRemoveFromEventList+0xc0>)
 800b4b0:	f7fe fa9d 	bl	80099ee <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b8:	4b0c      	ldr	r3, [pc, #48]	; (800b4ec <xTaskRemoveFromEventList+0xc4>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d905      	bls.n	800b4ce <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800b4c6:	4b0a      	ldr	r3, [pc, #40]	; (800b4f0 <xTaskRemoveFromEventList+0xc8>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e001      	b.n	800b4d2 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b4d2:	697b      	ldr	r3, [r7, #20]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3718      	adds	r7, #24
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	200003fc 	.word	0x200003fc
 800b4e0:	200003dc 	.word	0x200003dc
 800b4e4:	20000300 	.word	0x20000300
 800b4e8:	20000394 	.word	0x20000394
 800b4ec:	200002fc 	.word	0x200002fc
 800b4f0:	200003e8 	.word	0x200003e8

0800b4f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b4fc:	4b06      	ldr	r3, [pc, #24]	; (800b518 <vTaskInternalSetTimeOutState+0x24>)
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <vTaskInternalSetTimeOutState+0x28>)
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	605a      	str	r2, [r3, #4]
}
 800b50c:	bf00      	nop
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	200003ec 	.word	0x200003ec
 800b51c:	200003d8 	.word	0x200003d8

0800b520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d10a      	bne.n	800b546 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800b530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b534:	f383 8811 	msr	BASEPRI, r3
 800b538:	f3bf 8f6f 	isb	sy
 800b53c:	f3bf 8f4f 	dsb	sy
 800b540:	613b      	str	r3, [r7, #16]
    }
 800b542:	bf00      	nop
 800b544:	e7fe      	b.n	800b544 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10a      	bne.n	800b562 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	60fb      	str	r3, [r7, #12]
    }
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800b562:	f001 fa17 	bl	800c994 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800b566:	4b1f      	ldr	r3, [pc, #124]	; (800b5e4 <xTaskCheckForTimeOut+0xc4>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	69ba      	ldr	r2, [r7, #24]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57e:	d102      	bne.n	800b586 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800b580:	2300      	movs	r3, #0
 800b582:	61fb      	str	r3, [r7, #28]
 800b584:	e026      	b.n	800b5d4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b17      	ldr	r3, [pc, #92]	; (800b5e8 <xTaskCheckForTimeOut+0xc8>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d00a      	beq.n	800b5a8 <xTaskCheckForTimeOut+0x88>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	69ba      	ldr	r2, [r7, #24]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d305      	bcc.n	800b5a8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800b59c:	2301      	movs	r3, #1
 800b59e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	e015      	b.n	800b5d4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	697a      	ldr	r2, [r7, #20]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d20b      	bcs.n	800b5ca <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	1ad2      	subs	r2, r2, r3
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7ff ff98 	bl	800b4f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	e004      	b.n	800b5d4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800b5d4:	f001 fa0e 	bl	800c9f4 <vPortExitCritical>

    return xReturn;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3720      	adds	r7, #32
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	200003d8 	.word	0x200003d8
 800b5e8:	200003ec 	.word	0x200003ec

0800b5ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800b5f0:	4b03      	ldr	r3, [pc, #12]	; (800b600 <vTaskMissedYield+0x14>)
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	601a      	str	r2, [r3, #0]
}
 800b5f6:	bf00      	nop
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr
 800b600:	200003e8 	.word	0x200003e8

0800b604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800b60c:	f000 f852 	bl	800b6b4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b610:	4b06      	ldr	r3, [pc, #24]	; (800b62c <prvIdleTask+0x28>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d9f9      	bls.n	800b60c <prvIdleTask+0x8>
                {
                    taskYIELD();
 800b618:	4b05      	ldr	r3, [pc, #20]	; (800b630 <prvIdleTask+0x2c>)
 800b61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b61e:	601a      	str	r2, [r3, #0]
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800b628:	e7f0      	b.n	800b60c <prvIdleTask+0x8>
 800b62a:	bf00      	nop
 800b62c:	20000300 	.word	0x20000300
 800b630:	e000ed04 	.word	0xe000ed04

0800b634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b63a:	2300      	movs	r3, #0
 800b63c:	607b      	str	r3, [r7, #4]
 800b63e:	e00c      	b.n	800b65a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4a12      	ldr	r2, [pc, #72]	; (800b694 <prvInitialiseTaskLists+0x60>)
 800b64c:	4413      	add	r3, r2
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fe f9a0 	bl	8009994 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3301      	adds	r3, #1
 800b658:	607b      	str	r3, [r7, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b04      	cmp	r3, #4
 800b65e:	d9ef      	bls.n	800b640 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800b660:	480d      	ldr	r0, [pc, #52]	; (800b698 <prvInitialiseTaskLists+0x64>)
 800b662:	f7fe f997 	bl	8009994 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800b666:	480d      	ldr	r0, [pc, #52]	; (800b69c <prvInitialiseTaskLists+0x68>)
 800b668:	f7fe f994 	bl	8009994 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800b66c:	480c      	ldr	r0, [pc, #48]	; (800b6a0 <prvInitialiseTaskLists+0x6c>)
 800b66e:	f7fe f991 	bl	8009994 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800b672:	480c      	ldr	r0, [pc, #48]	; (800b6a4 <prvInitialiseTaskLists+0x70>)
 800b674:	f7fe f98e 	bl	8009994 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800b678:	480b      	ldr	r0, [pc, #44]	; (800b6a8 <prvInitialiseTaskLists+0x74>)
 800b67a:	f7fe f98b 	bl	8009994 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800b67e:	4b0b      	ldr	r3, [pc, #44]	; (800b6ac <prvInitialiseTaskLists+0x78>)
 800b680:	4a05      	ldr	r2, [pc, #20]	; (800b698 <prvInitialiseTaskLists+0x64>)
 800b682:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b684:	4b0a      	ldr	r3, [pc, #40]	; (800b6b0 <prvInitialiseTaskLists+0x7c>)
 800b686:	4a05      	ldr	r2, [pc, #20]	; (800b69c <prvInitialiseTaskLists+0x68>)
 800b688:	601a      	str	r2, [r3, #0]
}
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20000300 	.word	0x20000300
 800b698:	20000364 	.word	0x20000364
 800b69c:	20000378 	.word	0x20000378
 800b6a0:	20000394 	.word	0x20000394
 800b6a4:	200003a8 	.word	0x200003a8
 800b6a8:	200003c0 	.word	0x200003c0
 800b6ac:	2000038c 	.word	0x2000038c
 800b6b0:	20000390 	.word	0x20000390

0800b6b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6ba:	e019      	b.n	800b6f0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800b6bc:	f001 f96a 	bl	800c994 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6c0:	4b10      	ldr	r3, [pc, #64]	; (800b704 <prvCheckTasksWaitingTermination+0x50>)
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe f9eb 	bl	8009aa8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800b6d2:	4b0d      	ldr	r3, [pc, #52]	; (800b708 <prvCheckTasksWaitingTermination+0x54>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	4a0b      	ldr	r2, [pc, #44]	; (800b708 <prvCheckTasksWaitingTermination+0x54>)
 800b6da:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800b6dc:	4b0b      	ldr	r3, [pc, #44]	; (800b70c <prvCheckTasksWaitingTermination+0x58>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <prvCheckTasksWaitingTermination+0x58>)
 800b6e4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800b6e6:	f001 f985 	bl	800c9f4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f810 	bl	800b710 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6f0:	4b06      	ldr	r3, [pc, #24]	; (800b70c <prvCheckTasksWaitingTermination+0x58>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e1      	bne.n	800b6bc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	200003a8 	.word	0x200003a8
 800b708:	200003d4 	.word	0x200003d4
 800b70c:	200003bc 	.word	0x200003bc

0800b710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800b710:	b580      	push	{r7, lr}
 800b712:	b082      	sub	sp, #8
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71c:	4618      	mov	r0, r3
 800b71e:	f001 fb45 	bl	800cdac <vPortFree>
                vPortFree( pxTCB );
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f001 fb42 	bl	800cdac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800b728:	bf00      	nop
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b730:	b480      	push	{r7}
 800b732:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b734:	4b0a      	ldr	r3, [pc, #40]	; (800b760 <prvResetNextTaskUnblockTime+0x30>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d104      	bne.n	800b748 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800b73e:	4b09      	ldr	r3, [pc, #36]	; (800b764 <prvResetNextTaskUnblockTime+0x34>)
 800b740:	f04f 32ff 	mov.w	r2, #4294967295
 800b744:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800b746:	e005      	b.n	800b754 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b748:	4b05      	ldr	r3, [pc, #20]	; (800b760 <prvResetNextTaskUnblockTime+0x30>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a04      	ldr	r2, [pc, #16]	; (800b764 <prvResetNextTaskUnblockTime+0x34>)
 800b752:	6013      	str	r3, [r2, #0]
}
 800b754:	bf00      	nop
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	2000038c 	.word	0x2000038c
 800b764:	200003f4 	.word	0x200003f4

0800b768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800b76e:	4b0b      	ldr	r3, [pc, #44]	; (800b79c <xTaskGetSchedulerState+0x34>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d102      	bne.n	800b77c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b776:	2301      	movs	r3, #1
 800b778:	607b      	str	r3, [r7, #4]
 800b77a:	e008      	b.n	800b78e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b77c:	4b08      	ldr	r3, [pc, #32]	; (800b7a0 <xTaskGetSchedulerState+0x38>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d102      	bne.n	800b78a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800b784:	2302      	movs	r3, #2
 800b786:	607b      	str	r3, [r7, #4]
 800b788:	e001      	b.n	800b78e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800b78a:	2300      	movs	r3, #0
 800b78c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800b78e:	687b      	ldr	r3, [r7, #4]
    }
 800b790:	4618      	mov	r0, r3
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	200003e0 	.word	0x200003e0
 800b7a0:	200003fc 	.word	0x200003fc

0800b7a4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d063      	beq.n	800b882 <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7be:	4b33      	ldr	r3, [pc, #204]	; (800b88c <xTaskPriorityInherit+0xe8>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d253      	bcs.n	800b870 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	db06      	blt.n	800b7de <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d0:	4b2e      	ldr	r3, [pc, #184]	; (800b88c <xTaskPriorityInherit+0xe8>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d6:	f1c3 0205 	rsb	r2, r3, #5
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	6959      	ldr	r1, [r3, #20]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	4413      	add	r3, r2
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	4a28      	ldr	r2, [pc, #160]	; (800b890 <xTaskPriorityInherit+0xec>)
 800b7f0:	4413      	add	r3, r2
 800b7f2:	4299      	cmp	r1, r3
 800b7f4:	d12f      	bne.n	800b856 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe f954 	bl	8009aa8 <uxListRemove>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10a      	bne.n	800b81c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80a:	2201      	movs	r2, #1
 800b80c:	fa02 f303 	lsl.w	r3, r2, r3
 800b810:	43da      	mvns	r2, r3
 800b812:	4b20      	ldr	r3, [pc, #128]	; (800b894 <xTaskPriorityInherit+0xf0>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4013      	ands	r3, r2
 800b818:	4a1e      	ldr	r2, [pc, #120]	; (800b894 <xTaskPriorityInherit+0xf0>)
 800b81a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b81c:	4b1b      	ldr	r3, [pc, #108]	; (800b88c <xTaskPriorityInherit+0xe8>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82a:	2201      	movs	r2, #1
 800b82c:	409a      	lsls	r2, r3
 800b82e:	4b19      	ldr	r3, [pc, #100]	; (800b894 <xTaskPriorityInherit+0xf0>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4313      	orrs	r3, r2
 800b834:	4a17      	ldr	r2, [pc, #92]	; (800b894 <xTaskPriorityInherit+0xf0>)
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4a12      	ldr	r2, [pc, #72]	; (800b890 <xTaskPriorityInherit+0xec>)
 800b846:	441a      	add	r2, r3
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	3304      	adds	r3, #4
 800b84c:	4619      	mov	r1, r3
 800b84e:	4610      	mov	r0, r2
 800b850:	f7fe f8cd 	bl	80099ee <vListInsertEnd>
 800b854:	e004      	b.n	800b860 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b856:	4b0d      	ldr	r3, [pc, #52]	; (800b88c <xTaskPriorityInherit+0xe8>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4619      	mov	r1, r3
 800b864:	2049      	movs	r0, #73	; 0x49
 800b866:	f003 f8c3 	bl	800e9f0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800b86a:	2301      	movs	r3, #1
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	e008      	b.n	800b882 <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b874:	4b05      	ldr	r3, [pc, #20]	; (800b88c <xTaskPriorityInherit+0xe8>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d201      	bcs.n	800b882 <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800b87e:	2301      	movs	r3, #1
 800b880:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b882:	68fb      	ldr	r3, [r7, #12]
    }
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	200002fc 	.word	0x200002fc
 800b890:	20000300 	.word	0x20000300
 800b894:	200003dc 	.word	0x200003dc

0800b898 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d068      	beq.n	800b980 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800b8ae:	4b37      	ldr	r3, [pc, #220]	; (800b98c <xTaskPriorityDisinherit+0xf4>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d00a      	beq.n	800b8ce <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	60fb      	str	r3, [r7, #12]
    }
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10a      	bne.n	800b8ec <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800b8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	60bb      	str	r3, [r7, #8]
    }
 800b8e8:	bf00      	nop
 800b8ea:	e7fe      	b.n	800b8ea <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8f0:	1e5a      	subs	r2, r3, #1
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d03e      	beq.n	800b980 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b906:	2b00      	cmp	r3, #0
 800b908:	d13a      	bne.n	800b980 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe f8ca 	bl	8009aa8 <uxListRemove>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d10a      	bne.n	800b930 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91e:	2201      	movs	r2, #1
 800b920:	fa02 f303 	lsl.w	r3, r2, r3
 800b924:	43da      	mvns	r2, r3
 800b926:	4b1a      	ldr	r3, [pc, #104]	; (800b990 <xTaskPriorityDisinherit+0xf8>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4013      	ands	r3, r2
 800b92c:	4a18      	ldr	r2, [pc, #96]	; (800b990 <xTaskPriorityDisinherit+0xf8>)
 800b92e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4619      	mov	r1, r3
 800b934:	204a      	movs	r0, #74	; 0x4a
 800b936:	f003 f85b 	bl	800e9f0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b946:	f1c3 0205 	rsb	r2, r3, #5
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b952:	2201      	movs	r2, #1
 800b954:	409a      	lsls	r2, r3
 800b956:	4b0e      	ldr	r3, [pc, #56]	; (800b990 <xTaskPriorityDisinherit+0xf8>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	4a0c      	ldr	r2, [pc, #48]	; (800b990 <xTaskPriorityDisinherit+0xf8>)
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	4a09      	ldr	r2, [pc, #36]	; (800b994 <xTaskPriorityDisinherit+0xfc>)
 800b96e:	441a      	add	r2, r3
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	3304      	adds	r3, #4
 800b974:	4619      	mov	r1, r3
 800b976:	4610      	mov	r0, r2
 800b978:	f7fe f839 	bl	80099ee <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800b97c:	2301      	movs	r3, #1
 800b97e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b980:	697b      	ldr	r3, [r7, #20]
    }
 800b982:	4618      	mov	r0, r3
 800b984:	3718      	adds	r7, #24
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	200002fc 	.word	0x200002fc
 800b990:	200003dc 	.word	0x200003dc
 800b994:	20000300 	.word	0x20000300

0800b998 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800b998:	b580      	push	{r7, lr}
 800b99a:	b088      	sub	sp, #32
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 8081 	beq.w	800bab4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800b9b2:	69bb      	ldr	r3, [r7, #24]
 800b9b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10a      	bne.n	800b9d0 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	60fb      	str	r3, [r7, #12]
    }
 800b9cc:	bf00      	nop
 800b9ce:	e7fe      	b.n	800b9ce <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d902      	bls.n	800b9e0 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	61fb      	str	r3, [r7, #28]
 800b9de:	e002      	b.n	800b9e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9e4:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ea:	69fa      	ldr	r2, [r7, #28]
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	d061      	beq.n	800bab4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d15c      	bne.n	800bab4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800b9fa:	4b30      	ldr	r3, [pc, #192]	; (800babc <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69ba      	ldr	r2, [r7, #24]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d10a      	bne.n	800ba1a <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 800ba04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba08:	f383 8811 	msr	BASEPRI, r3
 800ba0c:	f3bf 8f6f 	isb	sy
 800ba10:	f3bf 8f4f 	dsb	sy
 800ba14:	60bb      	str	r3, [r7, #8]
    }
 800ba16:	bf00      	nop
 800ba18:	e7fe      	b.n	800ba18 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	204a      	movs	r0, #74	; 0x4a
 800ba20:	f002 ffe6 	bl	800e9f0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	69fa      	ldr	r2, [r7, #28]
 800ba2e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	db04      	blt.n	800ba42 <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	f1c3 0205 	rsb	r2, r3, #5
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	6959      	ldr	r1, [r3, #20]
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	4413      	add	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4a1b      	ldr	r2, [pc, #108]	; (800bac0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800ba52:	4413      	add	r3, r2
 800ba54:	4299      	cmp	r1, r3
 800ba56:	d12d      	bne.n	800bab4 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe f823 	bl	8009aa8 <uxListRemove>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10a      	bne.n	800ba7e <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba72:	43da      	mvns	r2, r3
 800ba74:	4b13      	ldr	r3, [pc, #76]	; (800bac4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4013      	ands	r3, r2
 800ba7a:	4a12      	ldr	r2, [pc, #72]	; (800bac4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ba7c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f003 fe41 	bl	800f708 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	409a      	lsls	r2, r3
 800ba8e:	4b0d      	ldr	r3, [pc, #52]	; (800bac4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	4a0b      	ldr	r2, [pc, #44]	; (800bac4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4a06      	ldr	r2, [pc, #24]	; (800bac0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800baa6:	441a      	add	r2, r3
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	3304      	adds	r3, #4
 800baac:	4619      	mov	r1, r3
 800baae:	4610      	mov	r0, r2
 800bab0:	f7fd ff9d 	bl	80099ee <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800bab4:	bf00      	nop
 800bab6:	3720      	adds	r7, #32
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	200002fc 	.word	0x200002fc
 800bac0:	20000300 	.word	0x20000300
 800bac4:	200003dc 	.word	0x200003dc

0800bac8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800bac8:	b480      	push	{r7}
 800baca:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800bacc:	4b07      	ldr	r3, [pc, #28]	; (800baec <pvTaskIncrementMutexHeldCount+0x24>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d004      	beq.n	800bade <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800bad4:	4b05      	ldr	r3, [pc, #20]	; (800baec <pvTaskIncrementMutexHeldCount+0x24>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bada:	3201      	adds	r2, #1
 800badc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800bade:	4b03      	ldr	r3, [pc, #12]	; (800baec <pvTaskIncrementMutexHeldCount+0x24>)
 800bae0:	681b      	ldr	r3, [r3, #0]
    }
 800bae2:	4618      	mov	r0, r3
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	200002fc 	.word	0x200002fc

0800baf0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af02      	add	r7, sp, #8
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00a      	beq.n	800bb1a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	613b      	str	r3, [r7, #16]
    }
 800bb16:	bf00      	nop
 800bb18:	e7fe      	b.n	800bb18 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800bb1a:	f000 ff3b 	bl	800c994 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800bb1e:	4b36      	ldr	r3, [pc, #216]	; (800bbf8 <xTaskGenericNotifyWait+0x108>)
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	4413      	add	r3, r2
 800bb26:	3354      	adds	r3, #84	; 0x54
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d022      	beq.n	800bb76 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800bb30:	4b31      	ldr	r3, [pc, #196]	; (800bbf8 <xTaskGenericNotifyWait+0x108>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	3214      	adds	r2, #20
 800bb38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	43d2      	mvns	r2, r2
 800bb40:	4011      	ands	r1, r2
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	3214      	adds	r2, #20
 800bb46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800bb4a:	4b2b      	ldr	r3, [pc, #172]	; (800bbf8 <xTaskGenericNotifyWait+0x108>)
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	3354      	adds	r3, #84	; 0x54
 800bb54:	2201      	movs	r2, #1
 800bb56:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800bb58:	6a3b      	ldr	r3, [r7, #32]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00b      	beq.n	800bb76 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb5e:	2101      	movs	r1, #1
 800bb60:	6a38      	ldr	r0, [r7, #32]
 800bb62:	f000 f963 	bl	800be2c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800bb66:	4b25      	ldr	r3, [pc, #148]	; (800bbfc <xTaskGenericNotifyWait+0x10c>)
 800bb68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800bb76:	f000 ff3d 	bl	800c9f4 <vPortExitCritical>

        taskENTER_CRITICAL();
 800bb7a:	f000 ff0b 	bl	800c994 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800bb7e:	683a      	ldr	r2, [r7, #0]
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	4613      	mov	r3, r2
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	2040      	movs	r0, #64	; 0x40
 800bb8c:	f003 f83c 	bl	800ec08 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d007      	beq.n	800bba6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800bb96:	4b18      	ldr	r3, [pc, #96]	; (800bbf8 <xTaskGenericNotifyWait+0x108>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	3214      	adds	r2, #20
 800bb9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800bba6:	4b14      	ldr	r3, [pc, #80]	; (800bbf8 <xTaskGenericNotifyWait+0x108>)
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4413      	add	r3, r2
 800bbae:	3354      	adds	r3, #84	; 0x54
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d002      	beq.n	800bbbe <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	617b      	str	r3, [r7, #20]
 800bbbc:	e00e      	b.n	800bbdc <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800bbbe:	4b0e      	ldr	r3, [pc, #56]	; (800bbf8 <xTaskGenericNotifyWait+0x108>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	3214      	adds	r2, #20
 800bbc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	43d2      	mvns	r2, r2
 800bbce:	4011      	ands	r1, r2
 800bbd0:	68fa      	ldr	r2, [r7, #12]
 800bbd2:	3214      	adds	r2, #20
 800bbd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800bbdc:	4b06      	ldr	r3, [pc, #24]	; (800bbf8 <xTaskGenericNotifyWait+0x108>)
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	3354      	adds	r3, #84	; 0x54
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800bbea:	f000 ff03 	bl	800c9f4 <vPortExitCritical>

        return xReturn;
 800bbee:	697b      	ldr	r3, [r7, #20]
    }
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	200002fc 	.word	0x200002fc
 800bbfc:	e000ed04 	.word	0xe000ed04

0800bc00 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b092      	sub	sp, #72	; 0x48
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
 800bc0c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10a      	bne.n	800bc2e <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800bc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800bc2a:	bf00      	nop
 800bc2c:	e7fe      	b.n	800bc2c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00a      	beq.n	800bc4a <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800bc46:	bf00      	nop
 800bc48:	e7fe      	b.n	800bc48 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc4a:	f000 ff8f 	bl	800cb6c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 800bc52:	f3ef 8211 	mrs	r2, BASEPRI
 800bc56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	627a      	str	r2, [r7, #36]	; 0x24
 800bc68:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc6c:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800bc6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d006      	beq.n	800bc82 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800bc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	3214      	adds	r2, #20
 800bc7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc80:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800bc82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	4413      	add	r3, r2
 800bc88:	3354      	adds	r3, #84	; 0x54
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800bc90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	4413      	add	r3, r2
 800bc96:	3354      	adds	r3, #84	; 0x54
 800bc98:	2202      	movs	r2, #2
 800bc9a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800bc9c:	78fb      	ldrb	r3, [r7, #3]
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d83b      	bhi.n	800bd1a <xTaskGenericNotifyFromISR+0x11a>
 800bca2:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <xTaskGenericNotifyFromISR+0xa8>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bd39 	.word	0x0800bd39
 800bcac:	0800bcbd 	.word	0x0800bcbd
 800bcb0:	0800bcd9 	.word	0x0800bcd9
 800bcb4:	0800bcf1 	.word	0x0800bcf1
 800bcb8:	0800bcff 	.word	0x0800bcff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800bcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	3214      	adds	r2, #20
 800bcc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	ea42 0103 	orr.w	r1, r2, r3
 800bccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	3214      	adds	r2, #20
 800bcd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800bcd6:	e032      	b.n	800bd3e <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800bcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	3214      	adds	r2, #20
 800bcde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce2:	1c59      	adds	r1, r3, #1
 800bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce6:	68ba      	ldr	r2, [r7, #8]
 800bce8:	3214      	adds	r2, #20
 800bcea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800bcee:	e026      	b.n	800bd3e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800bcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	3214      	adds	r2, #20
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800bcfc:	e01f      	b.n	800bd3e <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bcfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	d006      	beq.n	800bd14 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800bd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd08:	68ba      	ldr	r2, [r7, #8]
 800bd0a:	3214      	adds	r2, #20
 800bd0c:	6879      	ldr	r1, [r7, #4]
 800bd0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800bd12:	e014      	b.n	800bd3e <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 800bd14:	2300      	movs	r3, #0
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800bd18:	e011      	b.n	800bd3e <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800bd1a:	4b3d      	ldr	r3, [pc, #244]	; (800be10 <xTaskGenericNotifyFromISR+0x210>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00c      	beq.n	800bd3c <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	61fb      	str	r3, [r7, #28]
    }
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <xTaskGenericNotifyFromISR+0x136>
                    break;
 800bd38:	bf00      	nop
 800bd3a:	e000      	b.n	800bd3e <xTaskGenericNotifyFromISR+0x13e>
                    break;
 800bd3c:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800bd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd40:	4618      	mov	r0, r3
 800bd42:	f003 fd83 	bl	800f84c <SEGGER_SYSVIEW_ShrinkId>
 800bd46:	78f9      	ldrb	r1, [r7, #3]
 800bd48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd4c:	9201      	str	r2, [sp, #4]
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	460b      	mov	r3, r1
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	4601      	mov	r1, r0
 800bd56:	203f      	movs	r0, #63	; 0x3f
 800bd58:	f002 ffe8 	bl	800ed2c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bd5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d149      	bne.n	800bdf8 <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00a      	beq.n	800bd82 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	f383 8811 	msr	BASEPRI, r3
 800bd74:	f3bf 8f6f 	isb	sy
 800bd78:	f3bf 8f4f 	dsb	sy
 800bd7c:	61bb      	str	r3, [r7, #24]
    }
 800bd7e:	bf00      	nop
 800bd80:	e7fe      	b.n	800bd80 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd82:	4b24      	ldr	r3, [pc, #144]	; (800be14 <xTaskGenericNotifyFromISR+0x214>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d120      	bne.n	800bdcc <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fd fe8a 	bl	8009aa8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	4618      	mov	r0, r3
 800bd98:	f003 fcb6 	bl	800f708 <SEGGER_SYSVIEW_OnTaskStartReady>
 800bd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda0:	2201      	movs	r2, #1
 800bda2:	409a      	lsls	r2, r3
 800bda4:	4b1c      	ldr	r3, [pc, #112]	; (800be18 <xTaskGenericNotifyFromISR+0x218>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	4a1b      	ldr	r2, [pc, #108]	; (800be18 <xTaskGenericNotifyFromISR+0x218>)
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4a18      	ldr	r2, [pc, #96]	; (800be1c <xTaskGenericNotifyFromISR+0x21c>)
 800bdbc:	441a      	add	r2, r3
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	3304      	adds	r3, #4
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	f7fd fe12 	bl	80099ee <vListInsertEnd>
 800bdca:	e005      	b.n	800bdd8 <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	3318      	adds	r3, #24
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4813      	ldr	r0, [pc, #76]	; (800be20 <xTaskGenericNotifyFromISR+0x220>)
 800bdd4:	f7fd fe0b 	bl	80099ee <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bddc:	4b11      	ldr	r3, [pc, #68]	; (800be24 <xTaskGenericNotifyFromISR+0x224>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d908      	bls.n	800bdf8 <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800bde6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d002      	beq.n	800bdf2 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800bdec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdee:	2201      	movs	r2, #1
 800bdf0:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800bdf2:	4b0d      	ldr	r3, [pc, #52]	; (800be28 <xTaskGenericNotifyFromISR+0x228>)
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfa:	617b      	str	r3, [r7, #20]
        __asm volatile
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f383 8811 	msr	BASEPRI, r3
    }
 800be02:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800be04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800be06:	4618      	mov	r0, r3
 800be08:	3740      	adds	r7, #64	; 0x40
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	200003d8 	.word	0x200003d8
 800be14:	200003fc 	.word	0x200003fc
 800be18:	200003dc 	.word	0x200003dc
 800be1c:	20000300 	.word	0x20000300
 800be20:	20000394 	.word	0x20000394
 800be24:	200002fc 	.word	0x200002fc
 800be28:	200003e8 	.word	0x200003e8

0800be2c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b084      	sub	sp, #16
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800be36:	4b32      	ldr	r3, [pc, #200]	; (800bf00 <prvAddCurrentTaskToDelayedList+0xd4>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be3c:	4b31      	ldr	r3, [pc, #196]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	3304      	adds	r3, #4
 800be42:	4618      	mov	r0, r3
 800be44:	f7fd fe30 	bl	8009aa8 <uxListRemove>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10b      	bne.n	800be66 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800be4e:	4b2d      	ldr	r3, [pc, #180]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be54:	2201      	movs	r2, #1
 800be56:	fa02 f303 	lsl.w	r3, r2, r3
 800be5a:	43da      	mvns	r2, r3
 800be5c:	4b2a      	ldr	r3, [pc, #168]	; (800bf08 <prvAddCurrentTaskToDelayedList+0xdc>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4013      	ands	r3, r2
 800be62:	4a29      	ldr	r2, [pc, #164]	; (800bf08 <prvAddCurrentTaskToDelayedList+0xdc>)
 800be64:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6c:	d110      	bne.n	800be90 <prvAddCurrentTaskToDelayedList+0x64>
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00d      	beq.n	800be90 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800be74:	4b23      	ldr	r3, [pc, #140]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	211b      	movs	r1, #27
 800be7a:	4618      	mov	r0, r3
 800be7c:	f003 fc86 	bl	800f78c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be80:	4b20      	ldr	r3, [pc, #128]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3304      	adds	r3, #4
 800be86:	4619      	mov	r1, r3
 800be88:	4820      	ldr	r0, [pc, #128]	; (800bf0c <prvAddCurrentTaskToDelayedList+0xe0>)
 800be8a:	f7fd fdb0 	bl	80099ee <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800be8e:	e032      	b.n	800bef6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4413      	add	r3, r2
 800be96:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be98:	4b1a      	ldr	r3, [pc, #104]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d20f      	bcs.n	800bec8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800bea8:	4b16      	ldr	r3, [pc, #88]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2104      	movs	r1, #4
 800beae:	4618      	mov	r0, r3
 800beb0:	f003 fc6c 	bl	800f78c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beb4:	4b16      	ldr	r3, [pc, #88]	; (800bf10 <prvAddCurrentTaskToDelayedList+0xe4>)
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	4b12      	ldr	r3, [pc, #72]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3304      	adds	r3, #4
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7fd fdb8 	bl	8009a36 <vListInsert>
}
 800bec6:	e016      	b.n	800bef6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800bec8:	4b0e      	ldr	r3, [pc, #56]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2104      	movs	r1, #4
 800bece:	4618      	mov	r0, r3
 800bed0:	f003 fc5c 	bl	800f78c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bed4:	4b0f      	ldr	r3, [pc, #60]	; (800bf14 <prvAddCurrentTaskToDelayedList+0xe8>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	4b0a      	ldr	r3, [pc, #40]	; (800bf04 <prvAddCurrentTaskToDelayedList+0xd8>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	3304      	adds	r3, #4
 800bede:	4619      	mov	r1, r3
 800bee0:	4610      	mov	r0, r2
 800bee2:	f7fd fda8 	bl	8009a36 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800bee6:	4b0c      	ldr	r3, [pc, #48]	; (800bf18 <prvAddCurrentTaskToDelayedList+0xec>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	429a      	cmp	r2, r3
 800beee:	d202      	bcs.n	800bef6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800bef0:	4a09      	ldr	r2, [pc, #36]	; (800bf18 <prvAddCurrentTaskToDelayedList+0xec>)
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	6013      	str	r3, [r2, #0]
}
 800bef6:	bf00      	nop
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	200003d8 	.word	0x200003d8
 800bf04:	200002fc 	.word	0x200002fc
 800bf08:	200003dc 	.word	0x200003dc
 800bf0c:	200003c0 	.word	0x200003c0
 800bf10:	20000390 	.word	0x20000390
 800bf14:	2000038c 	.word	0x2000038c
 800bf18:	200003f4 	.word	0x200003f4

0800bf1c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800bf26:	f000 fb31 	bl	800c58c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800bf2a:	4b11      	ldr	r3, [pc, #68]	; (800bf70 <xTimerCreateTimerTask+0x54>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00b      	beq.n	800bf4a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800bf32:	4b10      	ldr	r3, [pc, #64]	; (800bf74 <xTimerCreateTimerTask+0x58>)
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	2302      	movs	r3, #2
 800bf38:	9300      	str	r3, [sp, #0]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800bf40:	490d      	ldr	r1, [pc, #52]	; (800bf78 <xTimerCreateTimerTask+0x5c>)
 800bf42:	480e      	ldr	r0, [pc, #56]	; (800bf7c <xTimerCreateTimerTask+0x60>)
 800bf44:	f7fe fe2a 	bl	800ab9c <xTaskCreate>
 800bf48:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	603b      	str	r3, [r7, #0]
    }
 800bf62:	bf00      	nop
 800bf64:	e7fe      	b.n	800bf64 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800bf66:	687b      	ldr	r3, [r7, #4]
    }
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	20000430 	.word	0x20000430
 800bf74:	20000434 	.word	0x20000434
 800bf78:	08012d98 	.word	0x08012d98
 800bf7c:	0800c16d 	.word	0x0800c16d

0800bf80 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b088      	sub	sp, #32
 800bf84:	af02      	add	r7, sp, #8
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
 800bf8c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800bf8e:	202c      	movs	r0, #44	; 0x2c
 800bf90:	f000 fe2c 	bl	800cbec <pvPortMalloc>
 800bf94:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00d      	beq.n	800bfb8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	9301      	str	r3, [sp, #4]
 800bfa8:	6a3b      	ldr	r3, [r7, #32]
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	68b9      	ldr	r1, [r7, #8]
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f000 f805 	bl	800bfc2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800bfb8:	697b      	ldr	r3, [r7, #20]
        }
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b086      	sub	sp, #24
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	60f8      	str	r0, [r7, #12]
 800bfca:	60b9      	str	r1, [r7, #8]
 800bfcc:	607a      	str	r2, [r7, #4]
 800bfce:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d10a      	bne.n	800bfec <prvInitialiseNewTimer+0x2a>
        __asm volatile
 800bfd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfda:	f383 8811 	msr	BASEPRI, r3
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f3bf 8f4f 	dsb	sy
 800bfe6:	617b      	str	r3, [r7, #20]
    }
 800bfe8:	bf00      	nop
 800bfea:	e7fe      	b.n	800bfea <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800bfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d01e      	beq.n	800c030 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800bff2:	f000 facb 	bl	800c58c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800bff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00a:	6a3a      	ldr	r2, [r7, #32]
 800c00c:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c010:	3304      	adds	r3, #4
 800c012:	4618      	mov	r0, r3
 800c014:	f7fd fcde 	bl	80099d4 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d008      	beq.n	800c030 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c024:	f043 0304 	orr.w	r3, r3, #4
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800c030:	bf00      	nop
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08a      	sub	sp, #40	; 0x28
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
 800c044:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800c046:	2300      	movs	r3, #0
 800c048:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10a      	bne.n	800c066 <xTimerGenericCommand+0x2e>
        __asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	623b      	str	r3, [r7, #32]
    }
 800c062:	bf00      	nop
 800c064:	e7fe      	b.n	800c064 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800c066:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <xTimerGenericCommand+0x98>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d02a      	beq.n	800c0c4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	2b05      	cmp	r3, #5
 800c07e:	dc18      	bgt.n	800c0b2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c080:	f7ff fb72 	bl	800b768 <xTaskGetSchedulerState>
 800c084:	4603      	mov	r3, r0
 800c086:	2b02      	cmp	r3, #2
 800c088:	d109      	bne.n	800c09e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c08a:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <xTimerGenericCommand+0x98>)
 800c08c:	6818      	ldr	r0, [r3, #0]
 800c08e:	f107 0114 	add.w	r1, r7, #20
 800c092:	2300      	movs	r3, #0
 800c094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c096:	f7fd fe21 	bl	8009cdc <xQueueGenericSend>
 800c09a:	6278      	str	r0, [r7, #36]	; 0x24
 800c09c:	e012      	b.n	800c0c4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c09e:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <xTimerGenericCommand+0x98>)
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	f107 0114 	add.w	r1, r7, #20
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f7fd fe17 	bl	8009cdc <xQueueGenericSend>
 800c0ae:	6278      	str	r0, [r7, #36]	; 0x24
 800c0b0:	e008      	b.n	800c0c4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <xTimerGenericCommand+0x98>)
 800c0b4:	6818      	ldr	r0, [r3, #0]
 800c0b6:	f107 0114 	add.w	r1, r7, #20
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	683a      	ldr	r2, [r7, #0]
 800c0be:	f7fd ff33 	bl	8009f28 <xQueueGenericSendFromISR>
 800c0c2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3728      	adds	r7, #40	; 0x28
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20000430 	.word	0x20000430

0800c0d4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b088      	sub	sp, #32
 800c0d8:	af02      	add	r7, sp, #8
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0de:	4b22      	ldr	r3, [pc, #136]	; (800c168 <prvProcessExpiredTimer+0x94>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68db      	ldr	r3, [r3, #12]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fd fcdb 	bl	8009aa8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c0f8:	f003 0304 	and.w	r3, r3, #4
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d022      	beq.n	800c146 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	699a      	ldr	r2, [r3, #24]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	18d1      	adds	r1, r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	6978      	ldr	r0, [r7, #20]
 800c10e:	f000 f8d1 	bl	800c2b4 <prvInsertTimerInActiveList>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d01f      	beq.n	800c158 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c118:	2300      	movs	r3, #0
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	2300      	movs	r3, #0
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	2100      	movs	r1, #0
 800c122:	6978      	ldr	r0, [r7, #20]
 800c124:	f7ff ff88 	bl	800c038 <xTimerGenericCommand>
 800c128:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d113      	bne.n	800c158 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
    }
 800c142:	bf00      	nop
 800c144:	e7fe      	b.n	800c144 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c14c:	f023 0301 	bic.w	r3, r3, #1
 800c150:	b2da      	uxtb	r2, r3
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	6a1b      	ldr	r3, [r3, #32]
 800c15c:	6978      	ldr	r0, [r7, #20]
 800c15e:	4798      	blx	r3
    }
 800c160:	bf00      	nop
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}
 800c168:	20000428 	.word	0x20000428

0800c16c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c174:	f107 0308 	add.w	r3, r7, #8
 800c178:	4618      	mov	r0, r3
 800c17a:	f000 f857 	bl	800c22c <prvGetNextExpireTime>
 800c17e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	4619      	mov	r1, r3
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	f000 f803 	bl	800c190 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800c18a:	f000 f8d5 	bl	800c338 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c18e:	e7f1      	b.n	800c174 <prvTimerTask+0x8>

0800c190 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800c19a:	f7fe fefd 	bl	800af98 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c19e:	f107 0308 	add.w	r3, r7, #8
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 f866 	bl	800c274 <prvSampleTimeNow>
 800c1a8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d130      	bne.n	800c212 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10a      	bne.n	800c1cc <prvProcessTimerOrBlockTask+0x3c>
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d806      	bhi.n	800c1cc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800c1be:	f7fe fef9 	bl	800afb4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1c2:	68f9      	ldr	r1, [r7, #12]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff ff85 	bl	800c0d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800c1ca:	e024      	b.n	800c216 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d008      	beq.n	800c1e4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1d2:	4b13      	ldr	r3, [pc, #76]	; (800c220 <prvProcessTimerOrBlockTask+0x90>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d101      	bne.n	800c1e0 <prvProcessTimerOrBlockTask+0x50>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e000      	b.n	800c1e2 <prvProcessTimerOrBlockTask+0x52>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1e4:	4b0f      	ldr	r3, [pc, #60]	; (800c224 <prvProcessTimerOrBlockTask+0x94>)
 800c1e6:	6818      	ldr	r0, [r3, #0]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	f7fe fc9f 	bl	800ab34 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c1f6:	f7fe fedd 	bl	800afb4 <xTaskResumeAll>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10a      	bne.n	800c216 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800c200:	4b09      	ldr	r3, [pc, #36]	; (800c228 <prvProcessTimerOrBlockTask+0x98>)
 800c202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	f3bf 8f6f 	isb	sy
    }
 800c210:	e001      	b.n	800c216 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800c212:	f7fe fecf 	bl	800afb4 <xTaskResumeAll>
    }
 800c216:	bf00      	nop
 800c218:	3710      	adds	r7, #16
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	2000042c 	.word	0x2000042c
 800c224:	20000430 	.word	0x20000430
 800c228:	e000ed04 	.word	0xe000ed04

0800c22c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c234:	4b0e      	ldr	r3, [pc, #56]	; (800c270 <prvGetNextExpireTime+0x44>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <prvGetNextExpireTime+0x16>
 800c23e:	2201      	movs	r2, #1
 800c240:	e000      	b.n	800c244 <prvGetNextExpireTime+0x18>
 800c242:	2200      	movs	r2, #0
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d105      	bne.n	800c25c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c250:	4b07      	ldr	r3, [pc, #28]	; (800c270 <prvGetNextExpireTime+0x44>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	e001      	b.n	800c260 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800c25c:	2300      	movs	r3, #0
 800c25e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800c260:	68fb      	ldr	r3, [r7, #12]
    }
 800c262:	4618      	mov	r0, r3
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000428 	.word	0x20000428

0800c274 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800c27c:	f7fe ff3a 	bl	800b0f4 <xTaskGetTickCount>
 800c280:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800c282:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <prvSampleTimeNow+0x3c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d205      	bcs.n	800c298 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800c28c:	f000 f91a 	bl	800c4c4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	601a      	str	r2, [r3, #0]
 800c296:	e002      	b.n	800c29e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800c29e:	4a04      	ldr	r2, [pc, #16]	; (800c2b0 <prvSampleTimeNow+0x3c>)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
    }
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3710      	adds	r7, #16
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20000438 	.word	0x20000438

0800c2b4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	60b9      	str	r1, [r7, #8]
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	68ba      	ldr	r2, [r7, #8]
 800c2ca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800c2d2:	68ba      	ldr	r2, [r7, #8]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d812      	bhi.n	800c300 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	1ad2      	subs	r2, r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d302      	bcc.n	800c2ee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	617b      	str	r3, [r7, #20]
 800c2ec:	e01b      	b.n	800c326 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2ee:	4b10      	ldr	r3, [pc, #64]	; (800c330 <prvInsertTimerInActiveList+0x7c>)
 800c2f0:	681a      	ldr	r2, [r3, #0]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3304      	adds	r3, #4
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	f7fd fb9c 	bl	8009a36 <vListInsert>
 800c2fe:	e012      	b.n	800c326 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	429a      	cmp	r2, r3
 800c306:	d206      	bcs.n	800c316 <prvInsertTimerInActiveList+0x62>
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d302      	bcc.n	800c316 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800c310:	2301      	movs	r3, #1
 800c312:	617b      	str	r3, [r7, #20]
 800c314:	e007      	b.n	800c326 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c316:	4b07      	ldr	r3, [pc, #28]	; (800c334 <prvInsertTimerInActiveList+0x80>)
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3304      	adds	r3, #4
 800c31e:	4619      	mov	r1, r3
 800c320:	4610      	mov	r0, r2
 800c322:	f7fd fb88 	bl	8009a36 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800c326:	697b      	ldr	r3, [r7, #20]
    }
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	2000042c 	.word	0x2000042c
 800c334:	20000428 	.word	0x20000428

0800c338 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800c338:	b580      	push	{r7, lr}
 800c33a:	b08c      	sub	sp, #48	; 0x30
 800c33c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c33e:	e0ae      	b.n	800c49e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	2b00      	cmp	r3, #0
 800c344:	f2c0 80aa 	blt.w	800c49c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d004      	beq.n	800c35e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c356:	3304      	adds	r3, #4
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fd fba5 	bl	8009aa8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c35e:	1d3b      	adds	r3, r7, #4
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff ff87 	bl	800c274 <prvSampleTimeNow>
 800c366:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	f200 8097 	bhi.w	800c49e <prvProcessReceivedCommands+0x166>
 800c370:	a201      	add	r2, pc, #4	; (adr r2, 800c378 <prvProcessReceivedCommands+0x40>)
 800c372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c376:	bf00      	nop
 800c378:	0800c3a1 	.word	0x0800c3a1
 800c37c:	0800c3a1 	.word	0x0800c3a1
 800c380:	0800c3a1 	.word	0x0800c3a1
 800c384:	0800c415 	.word	0x0800c415
 800c388:	0800c429 	.word	0x0800c429
 800c38c:	0800c473 	.word	0x0800c473
 800c390:	0800c3a1 	.word	0x0800c3a1
 800c394:	0800c3a1 	.word	0x0800c3a1
 800c398:	0800c415 	.word	0x0800c415
 800c39c:	0800c429 	.word	0x0800c429
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3a6:	f043 0301 	orr.w	r3, r3, #1
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3b2:	68fa      	ldr	r2, [r7, #12]
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	18d1      	adds	r1, r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	6a3a      	ldr	r2, [r7, #32]
 800c3be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3c0:	f7ff ff78 	bl	800c2b4 <prvInsertTimerInActiveList>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d069      	beq.n	800c49e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
 800c3ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3d0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d05e      	beq.n	800c49e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	441a      	add	r2, r3
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3f2:	f7ff fe21 	bl	800c038 <xTimerGenericCommand>
 800c3f6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d14f      	bne.n	800c49e <prvProcessReceivedCommands+0x166>
        __asm volatile
 800c3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c402:	f383 8811 	msr	BASEPRI, r3
 800c406:	f3bf 8f6f 	isb	sy
 800c40a:	f3bf 8f4f 	dsb	sy
 800c40e:	61bb      	str	r3, [r7, #24]
    }
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c41a:	f023 0301 	bic.w	r3, r3, #1
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800c426:	e03a      	b.n	800c49e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c42e:	f043 0301 	orr.w	r3, r3, #1
 800c432:	b2da      	uxtb	r2, r3
 800c434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	699b      	ldr	r3, [r3, #24]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10a      	bne.n	800c45e <prvProcessReceivedCommands+0x126>
        __asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	617b      	str	r3, [r7, #20]
    }
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c460:	699a      	ldr	r2, [r3, #24]
 800c462:	6a3b      	ldr	r3, [r7, #32]
 800c464:	18d1      	adds	r1, r2, r3
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	6a3a      	ldr	r2, [r7, #32]
 800c46a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c46c:	f7ff ff22 	bl	800c2b4 <prvInsertTimerInActiveList>
                        break;
 800c470:	e015      	b.n	800c49e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d103      	bne.n	800c488 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800c480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c482:	f000 fc93 	bl	800cdac <vPortFree>
 800c486:	e00a      	b.n	800c49e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c48e:	f023 0301 	bic.w	r3, r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800c49a:	e000      	b.n	800c49e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800c49c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c49e:	4b08      	ldr	r3, [pc, #32]	; (800c4c0 <prvProcessReceivedCommands+0x188>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f107 0108 	add.w	r1, r7, #8
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7fd feab 	bl	800a204 <xQueueReceive>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f47f af45 	bne.w	800c340 <prvProcessReceivedCommands+0x8>
        }
    }
 800c4b6:	bf00      	nop
 800c4b8:	bf00      	nop
 800c4ba:	3728      	adds	r7, #40	; 0x28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20000430 	.word	0x20000430

0800c4c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4ca:	e048      	b.n	800c55e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4cc:	4b2d      	ldr	r3, [pc, #180]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4d6:	4b2b      	ldr	r3, [pc, #172]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fd fadf 	bl	8009aa8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6a1b      	ldr	r3, [r3, #32]
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4f8:	f003 0304 	and.w	r3, r3, #4
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d02e      	beq.n	800c55e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	4413      	add	r3, r2
 800c508:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d90e      	bls.n	800c530 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c51e:	4b19      	ldr	r3, [pc, #100]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	3304      	adds	r3, #4
 800c526:	4619      	mov	r1, r3
 800c528:	4610      	mov	r0, r2
 800c52a:	f7fd fa84 	bl	8009a36 <vListInsert>
 800c52e:	e016      	b.n	800c55e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c530:	2300      	movs	r3, #0
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	2300      	movs	r3, #0
 800c536:	693a      	ldr	r2, [r7, #16]
 800c538:	2100      	movs	r1, #0
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f7ff fd7c 	bl	800c038 <xTimerGenericCommand>
 800c540:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d10a      	bne.n	800c55e <prvSwitchTimerLists+0x9a>
        __asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54c:	f383 8811 	msr	BASEPRI, r3
 800c550:	f3bf 8f6f 	isb	sy
 800c554:	f3bf 8f4f 	dsb	sy
 800c558:	603b      	str	r3, [r7, #0]
    }
 800c55a:	bf00      	nop
 800c55c:	e7fe      	b.n	800c55c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c55e:	4b09      	ldr	r3, [pc, #36]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1b1      	bne.n	800c4cc <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800c568:	4b06      	ldr	r3, [pc, #24]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800c56e:	4b06      	ldr	r3, [pc, #24]	; (800c588 <prvSwitchTimerLists+0xc4>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a04      	ldr	r2, [pc, #16]	; (800c584 <prvSwitchTimerLists+0xc0>)
 800c574:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800c576:	4a04      	ldr	r2, [pc, #16]	; (800c588 <prvSwitchTimerLists+0xc4>)
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	6013      	str	r3, [r2, #0]
    }
 800c57c:	bf00      	nop
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	20000428 	.word	0x20000428
 800c588:	2000042c 	.word	0x2000042c

0800c58c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c58c:	b580      	push	{r7, lr}
 800c58e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800c590:	f000 fa00 	bl	800c994 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800c594:	4b12      	ldr	r3, [pc, #72]	; (800c5e0 <prvCheckForValidListAndQueue+0x54>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d11d      	bne.n	800c5d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800c59c:	4811      	ldr	r0, [pc, #68]	; (800c5e4 <prvCheckForValidListAndQueue+0x58>)
 800c59e:	f7fd f9f9 	bl	8009994 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c5a2:	4811      	ldr	r0, [pc, #68]	; (800c5e8 <prvCheckForValidListAndQueue+0x5c>)
 800c5a4:	f7fd f9f6 	bl	8009994 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c5a8:	4b10      	ldr	r3, [pc, #64]	; (800c5ec <prvCheckForValidListAndQueue+0x60>)
 800c5aa:	4a0e      	ldr	r2, [pc, #56]	; (800c5e4 <prvCheckForValidListAndQueue+0x58>)
 800c5ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c5ae:	4b10      	ldr	r3, [pc, #64]	; (800c5f0 <prvCheckForValidListAndQueue+0x64>)
 800c5b0:	4a0d      	ldr	r2, [pc, #52]	; (800c5e8 <prvCheckForValidListAndQueue+0x5c>)
 800c5b2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	210c      	movs	r1, #12
 800c5b8:	200a      	movs	r0, #10
 800c5ba:	f7fd fb07 	bl	8009bcc <xQueueGenericCreate>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	4a07      	ldr	r2, [pc, #28]	; (800c5e0 <prvCheckForValidListAndQueue+0x54>)
 800c5c2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800c5c4:	4b06      	ldr	r3, [pc, #24]	; (800c5e0 <prvCheckForValidListAndQueue+0x54>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d005      	beq.n	800c5d8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5cc:	4b04      	ldr	r3, [pc, #16]	; (800c5e0 <prvCheckForValidListAndQueue+0x54>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4908      	ldr	r1, [pc, #32]	; (800c5f4 <prvCheckForValidListAndQueue+0x68>)
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fe fa7c 	bl	800aad0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800c5d8:	f000 fa0c 	bl	800c9f4 <vPortExitCritical>
    }
 800c5dc:	bf00      	nop
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20000430 	.word	0x20000430
 800c5e4:	20000400 	.word	0x20000400
 800c5e8:	20000414 	.word	0x20000414
 800c5ec:	20000428 	.word	0x20000428
 800c5f0:	2000042c 	.word	0x2000042c
 800c5f4:	08012da0 	.word	0x08012da0

0800c5f8 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10a      	bne.n	800c620 <pvTimerGetTimerID+0x28>
        __asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	60fb      	str	r3, [r7, #12]
    }
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800c620:	f000 f9b8 	bl	800c994 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	69db      	ldr	r3, [r3, #28]
 800c628:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800c62a:	f000 f9e3 	bl	800c9f4 <vPortExitCritical>

        return pvReturn;
 800c62e:	693b      	ldr	r3, [r7, #16]
    }
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	3b04      	subs	r3, #4
 800c648:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c650:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3b04      	subs	r3, #4
 800c656:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	f023 0201 	bic.w	r2, r3, #1
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	3b04      	subs	r3, #4
 800c666:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800c668:	4a0c      	ldr	r2, [pc, #48]	; (800c69c <pxPortInitialiseStack+0x64>)
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3b14      	subs	r3, #20
 800c672:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	3b04      	subs	r3, #4
 800c67e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	f06f 0202 	mvn.w	r2, #2
 800c686:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	3b20      	subs	r3, #32
 800c68c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800c68e:	68fb      	ldr	r3, [r7, #12]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3714      	adds	r7, #20
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	0800c6a1 	.word	0x0800c6a1

0800c6a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800c6aa:	4b12      	ldr	r3, [pc, #72]	; (800c6f4 <prvTaskExitError+0x54>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b2:	d00a      	beq.n	800c6ca <prvTaskExitError+0x2a>
        __asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	60fb      	str	r3, [r7, #12]
    }
 800c6c6:	bf00      	nop
 800c6c8:	e7fe      	b.n	800c6c8 <prvTaskExitError+0x28>
        __asm volatile
 800c6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ce:	f383 8811 	msr	BASEPRI, r3
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	f3bf 8f4f 	dsb	sy
 800c6da:	60bb      	str	r3, [r7, #8]
    }
 800c6dc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800c6de:	bf00      	nop
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d0fc      	beq.n	800c6e0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800c6e6:	bf00      	nop
 800c6e8:	bf00      	nop
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr
 800c6f4:	20000028 	.word	0x20000028
	...

0800c700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <pxCurrentTCBConst2>)
 800c702:	6819      	ldr	r1, [r3, #0]
 800c704:	6808      	ldr	r0, [r1, #0]
 800c706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70a:	f380 8809 	msr	PSP, r0
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8811 	msr	BASEPRI, r0
 800c71a:	4770      	bx	lr
 800c71c:	f3af 8000 	nop.w

0800c720 <pxCurrentTCBConst2>:
 800c720:	200002fc 	.word	0x200002fc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800c724:	bf00      	nop
 800c726:	bf00      	nop

0800c728 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800c728:	4808      	ldr	r0, [pc, #32]	; (800c74c <prvPortStartFirstTask+0x24>)
 800c72a:	6800      	ldr	r0, [r0, #0]
 800c72c:	6800      	ldr	r0, [r0, #0]
 800c72e:	f380 8808 	msr	MSP, r0
 800c732:	f04f 0000 	mov.w	r0, #0
 800c736:	f380 8814 	msr	CONTROL, r0
 800c73a:	b662      	cpsie	i
 800c73c:	b661      	cpsie	f
 800c73e:	f3bf 8f4f 	dsb	sy
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	df00      	svc	0
 800c748:	bf00      	nop
 800c74a:	0000      	.short	0x0000
 800c74c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop

0800c754 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c75a:	4b46      	ldr	r3, [pc, #280]	; (800c874 <xPortStartScheduler+0x120>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4a46      	ldr	r2, [pc, #280]	; (800c878 <xPortStartScheduler+0x124>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d10a      	bne.n	800c77a <xPortStartScheduler+0x26>
        __asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	613b      	str	r3, [r7, #16]
    }
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c77a:	4b3e      	ldr	r3, [pc, #248]	; (800c874 <xPortStartScheduler+0x120>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a3f      	ldr	r2, [pc, #252]	; (800c87c <xPortStartScheduler+0x128>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d10a      	bne.n	800c79a <xPortStartScheduler+0x46>
        __asm volatile
 800c784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	60fb      	str	r3, [r7, #12]
    }
 800c796:	bf00      	nop
 800c798:	e7fe      	b.n	800c798 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c79a:	4b39      	ldr	r3, [pc, #228]	; (800c880 <xPortStartScheduler+0x12c>)
 800c79c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	22ff      	movs	r2, #255	; 0xff
 800c7aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	4b31      	ldr	r3, [pc, #196]	; (800c884 <xPortStartScheduler+0x130>)
 800c7c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7c2:	4b31      	ldr	r3, [pc, #196]	; (800c888 <xPortStartScheduler+0x134>)
 800c7c4:	2207      	movs	r2, #7
 800c7c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7c8:	e009      	b.n	800c7de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800c7ca:	4b2f      	ldr	r3, [pc, #188]	; (800c888 <xPortStartScheduler+0x134>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	4a2d      	ldr	r2, [pc, #180]	; (800c888 <xPortStartScheduler+0x134>)
 800c7d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7d4:	78fb      	ldrb	r3, [r7, #3]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7de:	78fb      	ldrb	r3, [r7, #3]
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e6:	2b80      	cmp	r3, #128	; 0x80
 800c7e8:	d0ef      	beq.n	800c7ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7ea:	4b27      	ldr	r3, [pc, #156]	; (800c888 <xPortStartScheduler+0x134>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f1c3 0307 	rsb	r3, r3, #7
 800c7f2:	2b04      	cmp	r3, #4
 800c7f4:	d00a      	beq.n	800c80c <xPortStartScheduler+0xb8>
        __asm volatile
 800c7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fa:	f383 8811 	msr	BASEPRI, r3
 800c7fe:	f3bf 8f6f 	isb	sy
 800c802:	f3bf 8f4f 	dsb	sy
 800c806:	60bb      	str	r3, [r7, #8]
    }
 800c808:	bf00      	nop
 800c80a:	e7fe      	b.n	800c80a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c80c:	4b1e      	ldr	r3, [pc, #120]	; (800c888 <xPortStartScheduler+0x134>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	021b      	lsls	r3, r3, #8
 800c812:	4a1d      	ldr	r2, [pc, #116]	; (800c888 <xPortStartScheduler+0x134>)
 800c814:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c816:	4b1c      	ldr	r3, [pc, #112]	; (800c888 <xPortStartScheduler+0x134>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c81e:	4a1a      	ldr	r2, [pc, #104]	; (800c888 <xPortStartScheduler+0x134>)
 800c820:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	b2da      	uxtb	r2, r3
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800c82a:	4b18      	ldr	r3, [pc, #96]	; (800c88c <xPortStartScheduler+0x138>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a17      	ldr	r2, [pc, #92]	; (800c88c <xPortStartScheduler+0x138>)
 800c830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c834:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800c836:	4b15      	ldr	r3, [pc, #84]	; (800c88c <xPortStartScheduler+0x138>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a14      	ldr	r2, [pc, #80]	; (800c88c <xPortStartScheduler+0x138>)
 800c83c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c840:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800c842:	f000 f963 	bl	800cb0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800c846:	4b12      	ldr	r3, [pc, #72]	; (800c890 <xPortStartScheduler+0x13c>)
 800c848:	2200      	movs	r2, #0
 800c84a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800c84c:	f000 f982 	bl	800cb54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c850:	4b10      	ldr	r3, [pc, #64]	; (800c894 <xPortStartScheduler+0x140>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a0f      	ldr	r2, [pc, #60]	; (800c894 <xPortStartScheduler+0x140>)
 800c856:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c85a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800c85c:	f7ff ff64 	bl	800c728 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800c860:	f7fe fd26 	bl	800b2b0 <vTaskSwitchContext>
    prvTaskExitError();
 800c864:	f7ff ff1c 	bl	800c6a0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3718      	adds	r7, #24
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	e000ed00 	.word	0xe000ed00
 800c878:	410fc271 	.word	0x410fc271
 800c87c:	410fc270 	.word	0x410fc270
 800c880:	e000e400 	.word	0xe000e400
 800c884:	2000043c 	.word	0x2000043c
 800c888:	20000440 	.word	0x20000440
 800c88c:	e000ed20 	.word	0xe000ed20
 800c890:	20000028 	.word	0x20000028
 800c894:	e000ef34 	.word	0xe000ef34

0800c898 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c89e:	4b37      	ldr	r3, [pc, #220]	; (800c97c <vInitPrioGroupValue+0xe4>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a37      	ldr	r2, [pc, #220]	; (800c980 <vInitPrioGroupValue+0xe8>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d10a      	bne.n	800c8be <vInitPrioGroupValue+0x26>
        __asm volatile
 800c8a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ac:	f383 8811 	msr	BASEPRI, r3
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	613b      	str	r3, [r7, #16]
    }
 800c8ba:	bf00      	nop
 800c8bc:	e7fe      	b.n	800c8bc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c8be:	4b2f      	ldr	r3, [pc, #188]	; (800c97c <vInitPrioGroupValue+0xe4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a30      	ldr	r2, [pc, #192]	; (800c984 <vInitPrioGroupValue+0xec>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d10a      	bne.n	800c8de <vInitPrioGroupValue+0x46>
        __asm volatile
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	60fb      	str	r3, [r7, #12]
    }
 800c8da:	bf00      	nop
 800c8dc:	e7fe      	b.n	800c8dc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c8de:	4b2a      	ldr	r3, [pc, #168]	; (800c988 <vInitPrioGroupValue+0xf0>)
 800c8e0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	22ff      	movs	r2, #255	; 0xff
 800c8ee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c8f8:	78fb      	ldrb	r3, [r7, #3]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c900:	b2da      	uxtb	r2, r3
 800c902:	4b22      	ldr	r3, [pc, #136]	; (800c98c <vInitPrioGroupValue+0xf4>)
 800c904:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c906:	4b22      	ldr	r3, [pc, #136]	; (800c990 <vInitPrioGroupValue+0xf8>)
 800c908:	2207      	movs	r2, #7
 800c90a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c90c:	e009      	b.n	800c922 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800c90e:	4b20      	ldr	r3, [pc, #128]	; (800c990 <vInitPrioGroupValue+0xf8>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3b01      	subs	r3, #1
 800c914:	4a1e      	ldr	r2, [pc, #120]	; (800c990 <vInitPrioGroupValue+0xf8>)
 800c916:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c918:	78fb      	ldrb	r3, [r7, #3]
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	005b      	lsls	r3, r3, #1
 800c91e:	b2db      	uxtb	r3, r3
 800c920:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c922:	78fb      	ldrb	r3, [r7, #3]
 800c924:	b2db      	uxtb	r3, r3
 800c926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c92a:	2b80      	cmp	r3, #128	; 0x80
 800c92c:	d0ef      	beq.n	800c90e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c92e:	4b18      	ldr	r3, [pc, #96]	; (800c990 <vInitPrioGroupValue+0xf8>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f1c3 0307 	rsb	r3, r3, #7
 800c936:	2b04      	cmp	r3, #4
 800c938:	d00a      	beq.n	800c950 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800c93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c93e:	f383 8811 	msr	BASEPRI, r3
 800c942:	f3bf 8f6f 	isb	sy
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	60bb      	str	r3, [r7, #8]
    }
 800c94c:	bf00      	nop
 800c94e:	e7fe      	b.n	800c94e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c950:	4b0f      	ldr	r3, [pc, #60]	; (800c990 <vInitPrioGroupValue+0xf8>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	021b      	lsls	r3, r3, #8
 800c956:	4a0e      	ldr	r2, [pc, #56]	; (800c990 <vInitPrioGroupValue+0xf8>)
 800c958:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c95a:	4b0d      	ldr	r3, [pc, #52]	; (800c990 <vInitPrioGroupValue+0xf8>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c962:	4a0b      	ldr	r2, [pc, #44]	; (800c990 <vInitPrioGroupValue+0xf8>)
 800c964:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800c96e:	bf00      	nop
 800c970:	371c      	adds	r7, #28
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	e000ed00 	.word	0xe000ed00
 800c980:	410fc271 	.word	0x410fc271
 800c984:	410fc270 	.word	0x410fc270
 800c988:	e000e400 	.word	0xe000e400
 800c98c:	2000043c 	.word	0x2000043c
 800c990:	20000440 	.word	0x20000440

0800c994 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c994:	b480      	push	{r7}
 800c996:	b083      	sub	sp, #12
 800c998:	af00      	add	r7, sp, #0
        __asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	607b      	str	r3, [r7, #4]
    }
 800c9ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800c9ae:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	4a0d      	ldr	r2, [pc, #52]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800c9b8:	4b0c      	ldr	r3, [pc, #48]	; (800c9ec <vPortEnterCritical+0x58>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	d10f      	bne.n	800c9e0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c9c0:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <vPortEnterCritical+0x5c>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00a      	beq.n	800c9e0 <vPortEnterCritical+0x4c>
        __asm volatile
 800c9ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	603b      	str	r3, [r7, #0]
    }
 800c9dc:	bf00      	nop
 800c9de:	e7fe      	b.n	800c9de <vPortEnterCritical+0x4a>
    }
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	20000028 	.word	0x20000028
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800c9fa:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <vPortExitCritical+0x50>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10a      	bne.n	800ca18 <vPortExitCritical+0x24>
        __asm volatile
 800ca02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca06:	f383 8811 	msr	BASEPRI, r3
 800ca0a:	f3bf 8f6f 	isb	sy
 800ca0e:	f3bf 8f4f 	dsb	sy
 800ca12:	607b      	str	r3, [r7, #4]
    }
 800ca14:	bf00      	nop
 800ca16:	e7fe      	b.n	800ca16 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800ca18:	4b0a      	ldr	r3, [pc, #40]	; (800ca44 <vPortExitCritical+0x50>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	4a09      	ldr	r2, [pc, #36]	; (800ca44 <vPortExitCritical+0x50>)
 800ca20:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800ca22:	4b08      	ldr	r3, [pc, #32]	; (800ca44 <vPortExitCritical+0x50>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d105      	bne.n	800ca36 <vPortExitCritical+0x42>
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	f383 8811 	msr	BASEPRI, r3
    }
 800ca34:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800ca36:	bf00      	nop
 800ca38:	370c      	adds	r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
 800ca42:	bf00      	nop
 800ca44:	20000028 	.word	0x20000028
	...

0800ca50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800ca50:	f3ef 8009 	mrs	r0, PSP
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	4b15      	ldr	r3, [pc, #84]	; (800cab0 <pxCurrentTCBConst>)
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	f01e 0f10 	tst.w	lr, #16
 800ca60:	bf08      	it	eq
 800ca62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	6010      	str	r0, [r2, #0]
 800ca6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca74:	f380 8811 	msr	BASEPRI, r0
 800ca78:	f3bf 8f4f 	dsb	sy
 800ca7c:	f3bf 8f6f 	isb	sy
 800ca80:	f7fe fc16 	bl	800b2b0 <vTaskSwitchContext>
 800ca84:	f04f 0000 	mov.w	r0, #0
 800ca88:	f380 8811 	msr	BASEPRI, r0
 800ca8c:	bc09      	pop	{r0, r3}
 800ca8e:	6819      	ldr	r1, [r3, #0]
 800ca90:	6808      	ldr	r0, [r1, #0]
 800ca92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca96:	f01e 0f10 	tst.w	lr, #16
 800ca9a:	bf08      	it	eq
 800ca9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800caa0:	f380 8809 	msr	PSP, r0
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	f3af 8000 	nop.w

0800cab0 <pxCurrentTCBConst>:
 800cab0:	200002fc 	.word	0x200002fc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800cab4:	bf00      	nop
 800cab6:	bf00      	nop

0800cab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
        __asm volatile
 800cabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	607b      	str	r3, [r7, #4]
    }
 800cad0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800cad2:	f002 fca3 	bl	800f41c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800cad6:	f7fe fb2f 	bl	800b138 <xTaskIncrementTick>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d006      	beq.n	800caee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800cae0:	f002 fcfa 	bl	800f4d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cae4:	4b08      	ldr	r3, [pc, #32]	; (800cb08 <SysTick_Handler+0x50>)
 800cae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	e001      	b.n	800caf2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800caee:	f002 fcd7 	bl	800f4a0 <SEGGER_SYSVIEW_RecordExitISR>
 800caf2:	2300      	movs	r3, #0
 800caf4:	603b      	str	r3, [r7, #0]
        __asm volatile
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	f383 8811 	msr	BASEPRI, r3
    }
 800cafc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800cafe:	bf00      	nop
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	e000ed04 	.word	0xe000ed04

0800cb0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cb10:	4b0b      	ldr	r3, [pc, #44]	; (800cb40 <vPortSetupTimerInterrupt+0x34>)
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cb16:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <vPortSetupTimerInterrupt+0x38>)
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <vPortSetupTimerInterrupt+0x3c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a0a      	ldr	r2, [pc, #40]	; (800cb4c <vPortSetupTimerInterrupt+0x40>)
 800cb22:	fba2 2303 	umull	r2, r3, r2, r3
 800cb26:	099b      	lsrs	r3, r3, #6
 800cb28:	4a09      	ldr	r2, [pc, #36]	; (800cb50 <vPortSetupTimerInterrupt+0x44>)
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cb2e:	4b04      	ldr	r3, [pc, #16]	; (800cb40 <vPortSetupTimerInterrupt+0x34>)
 800cb30:	2207      	movs	r2, #7
 800cb32:	601a      	str	r2, [r3, #0]
}
 800cb34:	bf00      	nop
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	e000e010 	.word	0xe000e010
 800cb44:	e000e018 	.word	0xe000e018
 800cb48:	20000018 	.word	0x20000018
 800cb4c:	10624dd3 	.word	0x10624dd3
 800cb50:	e000e014 	.word	0xe000e014

0800cb54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800cb54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb64 <vPortEnableVFP+0x10>
 800cb58:	6801      	ldr	r1, [r0, #0]
 800cb5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb5e:	6001      	str	r1, [r0, #0]
 800cb60:	4770      	bx	lr
 800cb62:	0000      	.short	0x0000
 800cb64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop

0800cb6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800cb72:	f3ef 8305 	mrs	r3, IPSR
 800cb76:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b0f      	cmp	r3, #15
 800cb7c:	d914      	bls.n	800cba8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb7e:	4a17      	ldr	r2, [pc, #92]	; (800cbdc <vPortValidateInterruptPriority+0x70>)
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4413      	add	r3, r2
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb88:	4b15      	ldr	r3, [pc, #84]	; (800cbe0 <vPortValidateInterruptPriority+0x74>)
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	7afa      	ldrb	r2, [r7, #11]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d20a      	bcs.n	800cba8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	607b      	str	r3, [r7, #4]
    }
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cba8:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <vPortValidateInterruptPriority+0x78>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cbb0:	4b0d      	ldr	r3, [pc, #52]	; (800cbe8 <vPortValidateInterruptPriority+0x7c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d90a      	bls.n	800cbce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	603b      	str	r3, [r7, #0]
    }
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <vPortValidateInterruptPriority+0x60>
    }
 800cbce:	bf00      	nop
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	e000e3f0 	.word	0xe000e3f0
 800cbe0:	2000043c 	.word	0x2000043c
 800cbe4:	e000ed0c 	.word	0xe000ed0c
 800cbe8:	20000440 	.word	0x20000440

0800cbec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08a      	sub	sp, #40	; 0x28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800cbf8:	f7fe f9ce 	bl	800af98 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800cbfc:	4b65      	ldr	r3, [pc, #404]	; (800cd94 <pvPortMalloc+0x1a8>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800cc04:	f000 f934 	bl	800ce70 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cc08:	4b63      	ldr	r3, [pc, #396]	; (800cd98 <pvPortMalloc+0x1ac>)
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4013      	ands	r3, r2
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f040 80a7 	bne.w	800cd64 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d02d      	beq.n	800cc78 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800cc1c:	2208      	movs	r2, #8
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d227      	bcs.n	800cc78 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800cc28:	2208      	movs	r2, #8
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f003 0307 	and.w	r3, r3, #7
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d021      	beq.n	800cc7e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f023 0307 	bic.w	r3, r3, #7
 800cc40:	3308      	adds	r3, #8
 800cc42:	687a      	ldr	r2, [r7, #4]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d214      	bcs.n	800cc72 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f023 0307 	bic.w	r3, r3, #7
 800cc4e:	3308      	adds	r3, #8
 800cc50:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f003 0307 	and.w	r3, r3, #7
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d010      	beq.n	800cc7e <pvPortMalloc+0x92>
        __asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	617b      	str	r3, [r7, #20]
    }
 800cc6e:	bf00      	nop
 800cc70:	e7fe      	b.n	800cc70 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc76:	e002      	b.n	800cc7e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	607b      	str	r3, [r7, #4]
 800cc7c:	e000      	b.n	800cc80 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cc7e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d06e      	beq.n	800cd64 <pvPortMalloc+0x178>
 800cc86:	4b45      	ldr	r3, [pc, #276]	; (800cd9c <pvPortMalloc+0x1b0>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d869      	bhi.n	800cd64 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800cc90:	4b43      	ldr	r3, [pc, #268]	; (800cda0 <pvPortMalloc+0x1b4>)
 800cc92:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800cc94:	4b42      	ldr	r3, [pc, #264]	; (800cda0 <pvPortMalloc+0x1b4>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc9a:	e004      	b.n	800cca6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800cc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800cca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d903      	bls.n	800ccb8 <pvPortMalloc+0xcc>
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1f1      	bne.n	800cc9c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800ccb8:	4b36      	ldr	r3, [pc, #216]	; (800cd94 <pvPortMalloc+0x1a8>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d050      	beq.n	800cd64 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ccc2:	6a3b      	ldr	r3, [r7, #32]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2208      	movs	r2, #8
 800ccc8:	4413      	add	r3, r2
 800ccca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	6a3b      	ldr	r3, [r7, #32]
 800ccd2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	1ad2      	subs	r2, r2, r3
 800ccdc:	2308      	movs	r3, #8
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d91f      	bls.n	800cd24 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	4413      	add	r3, r2
 800ccea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	f003 0307 	and.w	r3, r3, #7
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00a      	beq.n	800cd0c <pvPortMalloc+0x120>
        __asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfa:	f383 8811 	msr	BASEPRI, r3
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	613b      	str	r3, [r7, #16]
    }
 800cd08:	bf00      	nop
 800cd0a:	e7fe      	b.n	800cd0a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	685a      	ldr	r2, [r3, #4]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	1ad2      	subs	r2, r2, r3
 800cd14:	69bb      	ldr	r3, [r7, #24]
 800cd16:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd1e:	69b8      	ldr	r0, [r7, #24]
 800cd20:	f000 f908 	bl	800cf34 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd24:	4b1d      	ldr	r3, [pc, #116]	; (800cd9c <pvPortMalloc+0x1b0>)
 800cd26:	681a      	ldr	r2, [r3, #0]
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	685b      	ldr	r3, [r3, #4]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	4a1b      	ldr	r2, [pc, #108]	; (800cd9c <pvPortMalloc+0x1b0>)
 800cd30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd32:	4b1a      	ldr	r3, [pc, #104]	; (800cd9c <pvPortMalloc+0x1b0>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	4b1b      	ldr	r3, [pc, #108]	; (800cda4 <pvPortMalloc+0x1b8>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d203      	bcs.n	800cd46 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd3e:	4b17      	ldr	r3, [pc, #92]	; (800cd9c <pvPortMalloc+0x1b0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a18      	ldr	r2, [pc, #96]	; (800cda4 <pvPortMalloc+0x1b8>)
 800cd44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	4b13      	ldr	r3, [pc, #76]	; (800cd98 <pvPortMalloc+0x1ac>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd52:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800cd5a:	4b13      	ldr	r3, [pc, #76]	; (800cda8 <pvPortMalloc+0x1bc>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	3301      	adds	r3, #1
 800cd60:	4a11      	ldr	r2, [pc, #68]	; (800cda8 <pvPortMalloc+0x1bc>)
 800cd62:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800cd64:	f7fe f926 	bl	800afb4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	f003 0307 	and.w	r3, r3, #7
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00a      	beq.n	800cd88 <pvPortMalloc+0x19c>
        __asm volatile
 800cd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd76:	f383 8811 	msr	BASEPRI, r3
 800cd7a:	f3bf 8f6f 	isb	sy
 800cd7e:	f3bf 8f4f 	dsb	sy
 800cd82:	60fb      	str	r3, [r7, #12]
    }
 800cd84:	bf00      	nop
 800cd86:	e7fe      	b.n	800cd86 <pvPortMalloc+0x19a>
    return pvReturn;
 800cd88:	69fb      	ldr	r3, [r7, #28]
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3728      	adds	r7, #40	; 0x28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bd80      	pop	{r7, pc}
 800cd92:	bf00      	nop
 800cd94:	2001944c 	.word	0x2001944c
 800cd98:	20019460 	.word	0x20019460
 800cd9c:	20019450 	.word	0x20019450
 800cda0:	20019444 	.word	0x20019444
 800cda4:	20019454 	.word	0x20019454
 800cda8:	20019458 	.word	0x20019458

0800cdac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d04d      	beq.n	800ce5a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800cdbe:	2308      	movs	r3, #8
 800cdc0:	425b      	negs	r3, r3
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	685a      	ldr	r2, [r3, #4]
 800cdd0:	4b24      	ldr	r3, [pc, #144]	; (800ce64 <vPortFree+0xb8>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10a      	bne.n	800cdf0 <vPortFree+0x44>
        __asm volatile
 800cdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdde:	f383 8811 	msr	BASEPRI, r3
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	f3bf 8f4f 	dsb	sy
 800cdea:	60fb      	str	r3, [r7, #12]
    }
 800cdec:	bf00      	nop
 800cdee:	e7fe      	b.n	800cdee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00a      	beq.n	800ce0e <vPortFree+0x62>
        __asm volatile
 800cdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdfc:	f383 8811 	msr	BASEPRI, r3
 800ce00:	f3bf 8f6f 	isb	sy
 800ce04:	f3bf 8f4f 	dsb	sy
 800ce08:	60bb      	str	r3, [r7, #8]
    }
 800ce0a:	bf00      	nop
 800ce0c:	e7fe      	b.n	800ce0c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	685a      	ldr	r2, [r3, #4]
 800ce12:	4b14      	ldr	r3, [pc, #80]	; (800ce64 <vPortFree+0xb8>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	4013      	ands	r3, r2
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d01e      	beq.n	800ce5a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d11a      	bne.n	800ce5a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	4b0e      	ldr	r3, [pc, #56]	; (800ce64 <vPortFree+0xb8>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	43db      	mvns	r3, r3
 800ce2e:	401a      	ands	r2, r3
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800ce34:	f7fe f8b0 	bl	800af98 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <vPortFree+0xbc>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4413      	add	r3, r2
 800ce42:	4a09      	ldr	r2, [pc, #36]	; (800ce68 <vPortFree+0xbc>)
 800ce44:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce46:	6938      	ldr	r0, [r7, #16]
 800ce48:	f000 f874 	bl	800cf34 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ce4c:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <vPortFree+0xc0>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	4a06      	ldr	r2, [pc, #24]	; (800ce6c <vPortFree+0xc0>)
 800ce54:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ce56:	f7fe f8ad 	bl	800afb4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ce5a:	bf00      	nop
 800ce5c:	3718      	adds	r7, #24
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	20019460 	.word	0x20019460
 800ce68:	20019450 	.word	0x20019450
 800ce6c:	2001945c 	.word	0x2001945c

0800ce70 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce76:	f44f 33c8 	mov.w	r3, #102400	; 0x19000
 800ce7a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800ce7c:	4b27      	ldr	r3, [pc, #156]	; (800cf1c <prvHeapInit+0xac>)
 800ce7e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00c      	beq.n	800cea4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	3307      	adds	r3, #7
 800ce8e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f023 0307 	bic.w	r3, r3, #7
 800ce96:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce98:	68ba      	ldr	r2, [r7, #8]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	1ad3      	subs	r3, r2, r3
 800ce9e:	4a1f      	ldr	r2, [pc, #124]	; (800cf1c <prvHeapInit+0xac>)
 800cea0:	4413      	add	r3, r2
 800cea2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cea8:	4a1d      	ldr	r2, [pc, #116]	; (800cf20 <prvHeapInit+0xb0>)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ceae:	4b1c      	ldr	r3, [pc, #112]	; (800cf20 <prvHeapInit+0xb0>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	4413      	add	r3, r2
 800ceba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800cebc:	2208      	movs	r2, #8
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	1a9b      	subs	r3, r3, r2
 800cec2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f023 0307 	bic.w	r3, r3, #7
 800ceca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	4a15      	ldr	r2, [pc, #84]	; (800cf24 <prvHeapInit+0xb4>)
 800ced0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800ced2:	4b14      	ldr	r3, [pc, #80]	; (800cf24 <prvHeapInit+0xb4>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2200      	movs	r2, #0
 800ced8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800ceda:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <prvHeapInit+0xb4>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2200      	movs	r2, #0
 800cee0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	1ad2      	subs	r2, r2, r3
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cef0:	4b0c      	ldr	r3, [pc, #48]	; (800cf24 <prvHeapInit+0xb4>)
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	4a0a      	ldr	r2, [pc, #40]	; (800cf28 <prvHeapInit+0xb8>)
 800cefe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	4a09      	ldr	r2, [pc, #36]	; (800cf2c <prvHeapInit+0xbc>)
 800cf06:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf08:	4b09      	ldr	r3, [pc, #36]	; (800cf30 <prvHeapInit+0xc0>)
 800cf0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf0e:	601a      	str	r2, [r3, #0]
}
 800cf10:	bf00      	nop
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	20000444 	.word	0x20000444
 800cf20:	20019444 	.word	0x20019444
 800cf24:	2001944c 	.word	0x2001944c
 800cf28:	20019454 	.word	0x20019454
 800cf2c:	20019450 	.word	0x20019450
 800cf30:	20019460 	.word	0x20019460

0800cf34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800cf34:	b480      	push	{r7}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cf3c:	4b28      	ldr	r3, [pc, #160]	; (800cfe0 <prvInsertBlockIntoFreeList+0xac>)
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	e002      	b.n	800cf48 <prvInsertBlockIntoFreeList+0x14>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d8f7      	bhi.n	800cf42 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	68ba      	ldr	r2, [r7, #8]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d108      	bne.n	800cf76 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	441a      	add	r2, r3
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	441a      	add	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d118      	bne.n	800cfbc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4b15      	ldr	r3, [pc, #84]	; (800cfe4 <prvInsertBlockIntoFreeList+0xb0>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d00d      	beq.n	800cfb2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	685a      	ldr	r2, [r3, #4]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	441a      	add	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	e008      	b.n	800cfc4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cfb2:	4b0c      	ldr	r3, [pc, #48]	; (800cfe4 <prvInsertBlockIntoFreeList+0xb0>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	e003      	b.n	800cfc4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d002      	beq.n	800cfd2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800cfd2:	bf00      	nop
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	20019444 	.word	0x20019444
 800cfe4:	2001944c 	.word	0x2001944c

0800cfe8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800cfec:	4803      	ldr	r0, [pc, #12]	; (800cffc <_cbSendSystemDesc+0x14>)
 800cfee:	f002 f9bf 	bl	800f370 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800cff2:	4803      	ldr	r0, [pc, #12]	; (800d000 <_cbSendSystemDesc+0x18>)
 800cff4:	f002 f9bc 	bl	800f370 <SEGGER_SYSVIEW_SendSysDesc>
}
 800cff8:	bf00      	nop
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	08012da8 	.word	0x08012da8
 800d000:	08012de8 	.word	0x08012de8

0800d004 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800d004:	b580      	push	{r7, lr}
 800d006:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800d008:	4b06      	ldr	r3, [pc, #24]	; (800d024 <SEGGER_SYSVIEW_Conf+0x20>)
 800d00a:	6818      	ldr	r0, [r3, #0]
 800d00c:	4b05      	ldr	r3, [pc, #20]	; (800d024 <SEGGER_SYSVIEW_Conf+0x20>)
 800d00e:	6819      	ldr	r1, [r3, #0]
 800d010:	4b05      	ldr	r3, [pc, #20]	; (800d028 <SEGGER_SYSVIEW_Conf+0x24>)
 800d012:	4a06      	ldr	r2, [pc, #24]	; (800d02c <SEGGER_SYSVIEW_Conf+0x28>)
 800d014:	f001 fc7a 	bl	800e90c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800d018:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d01c:	f001 fcba 	bl	800e994 <SEGGER_SYSVIEW_SetRAMBase>
}
 800d020:	bf00      	nop
 800d022:	bd80      	pop	{r7, pc}
 800d024:	20000018 	.word	0x20000018
 800d028:	0800cfe9 	.word	0x0800cfe9
 800d02c:	08012e88 	.word	0x08012e88

0800d030 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800d030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d032:	b085      	sub	sp, #20
 800d034:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800d036:	2300      	movs	r3, #0
 800d038:	607b      	str	r3, [r7, #4]
 800d03a:	e033      	b.n	800d0a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800d03c:	491e      	ldr	r1, [pc, #120]	; (800d0b8 <_cbSendTaskList+0x88>)
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	4613      	mov	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	440b      	add	r3, r1
 800d04a:	6818      	ldr	r0, [r3, #0]
 800d04c:	491a      	ldr	r1, [pc, #104]	; (800d0b8 <_cbSendTaskList+0x88>)
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	440b      	add	r3, r1
 800d05a:	3304      	adds	r3, #4
 800d05c:	6819      	ldr	r1, [r3, #0]
 800d05e:	4c16      	ldr	r4, [pc, #88]	; (800d0b8 <_cbSendTaskList+0x88>)
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	4613      	mov	r3, r2
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4413      	add	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4423      	add	r3, r4
 800d06c:	3308      	adds	r3, #8
 800d06e:	681c      	ldr	r4, [r3, #0]
 800d070:	4d11      	ldr	r5, [pc, #68]	; (800d0b8 <_cbSendTaskList+0x88>)
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	4613      	mov	r3, r2
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	4413      	add	r3, r2
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	442b      	add	r3, r5
 800d07e:	330c      	adds	r3, #12
 800d080:	681d      	ldr	r5, [r3, #0]
 800d082:	4e0d      	ldr	r6, [pc, #52]	; (800d0b8 <_cbSendTaskList+0x88>)
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4613      	mov	r3, r2
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	4413      	add	r3, r2
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	4433      	add	r3, r6
 800d090:	3310      	adds	r3, #16
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	462b      	mov	r3, r5
 800d098:	4622      	mov	r2, r4
 800d09a:	f000 f8b5 	bl	800d208 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	607b      	str	r3, [r7, #4]
 800d0a4:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <_cbSendTaskList+0x8c>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d3c6      	bcc.n	800d03c <_cbSendTaskList+0xc>
  }
}
 800d0ae:	bf00      	nop
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0b8:	20019464 	.word	0x20019464
 800d0bc:	20019504 	.word	0x20019504

0800d0c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800d0c0:	b5b0      	push	{r4, r5, r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800d0c6:	f7fe f825 	bl	800b114 <xTaskGetTickCountFromISR>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	f04f 0300 	mov.w	r3, #0
 800d0d2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800d0d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0da:	4602      	mov	r2, r0
 800d0dc:	460b      	mov	r3, r1
 800d0de:	f04f 0400 	mov.w	r4, #0
 800d0e2:	f04f 0500 	mov.w	r5, #0
 800d0e6:	015d      	lsls	r5, r3, #5
 800d0e8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d0ec:	0154      	lsls	r4, r2, #5
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	462b      	mov	r3, r5
 800d0f2:	1a12      	subs	r2, r2, r0
 800d0f4:	eb63 0301 	sbc.w	r3, r3, r1
 800d0f8:	f04f 0400 	mov.w	r4, #0
 800d0fc:	f04f 0500 	mov.w	r5, #0
 800d100:	009d      	lsls	r5, r3, #2
 800d102:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800d106:	0094      	lsls	r4, r2, #2
 800d108:	4622      	mov	r2, r4
 800d10a:	462b      	mov	r3, r5
 800d10c:	1812      	adds	r2, r2, r0
 800d10e:	eb41 0303 	adc.w	r3, r1, r3
 800d112:	f04f 0000 	mov.w	r0, #0
 800d116:	f04f 0100 	mov.w	r1, #0
 800d11a:	00d9      	lsls	r1, r3, #3
 800d11c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d120:	00d0      	lsls	r0, r2, #3
 800d122:	4602      	mov	r2, r0
 800d124:	460b      	mov	r3, r1
 800d126:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800d12a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800d12e:	4610      	mov	r0, r2
 800d130:	4619      	mov	r1, r3
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bdb0      	pop	{r4, r5, r7, pc}

0800d138 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af02      	add	r7, sp, #8
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
 800d144:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800d146:	2205      	movs	r2, #5
 800d148:	492b      	ldr	r1, [pc, #172]	; (800d1f8 <SYSVIEW_AddTask+0xc0>)
 800d14a:	68b8      	ldr	r0, [r7, #8]
 800d14c:	f002 fd44 	bl	800fbd8 <memcmp>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d04b      	beq.n	800d1ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800d156:	4b29      	ldr	r3, [pc, #164]	; (800d1fc <SYSVIEW_AddTask+0xc4>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b07      	cmp	r3, #7
 800d15c:	d903      	bls.n	800d166 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800d15e:	4828      	ldr	r0, [pc, #160]	; (800d200 <SYSVIEW_AddTask+0xc8>)
 800d160:	f002 fc74 	bl	800fa4c <SEGGER_SYSVIEW_Warn>
    return;
 800d164:	e044      	b.n	800d1f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800d166:	4b25      	ldr	r3, [pc, #148]	; (800d1fc <SYSVIEW_AddTask+0xc4>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	4926      	ldr	r1, [pc, #152]	; (800d204 <SYSVIEW_AddTask+0xcc>)
 800d16c:	4613      	mov	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	4413      	add	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	440b      	add	r3, r1
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800d17a:	4b20      	ldr	r3, [pc, #128]	; (800d1fc <SYSVIEW_AddTask+0xc4>)
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	4921      	ldr	r1, [pc, #132]	; (800d204 <SYSVIEW_AddTask+0xcc>)
 800d180:	4613      	mov	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	440b      	add	r3, r1
 800d18a:	3304      	adds	r3, #4
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800d190:	4b1a      	ldr	r3, [pc, #104]	; (800d1fc <SYSVIEW_AddTask+0xc4>)
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	491b      	ldr	r1, [pc, #108]	; (800d204 <SYSVIEW_AddTask+0xcc>)
 800d196:	4613      	mov	r3, r2
 800d198:	009b      	lsls	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	440b      	add	r3, r1
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800d1a6:	4b15      	ldr	r3, [pc, #84]	; (800d1fc <SYSVIEW_AddTask+0xc4>)
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	4916      	ldr	r1, [pc, #88]	; (800d204 <SYSVIEW_AddTask+0xcc>)
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	4413      	add	r3, r2
 800d1b2:	009b      	lsls	r3, r3, #2
 800d1b4:	440b      	add	r3, r1
 800d1b6:	330c      	adds	r3, #12
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800d1bc:	4b0f      	ldr	r3, [pc, #60]	; (800d1fc <SYSVIEW_AddTask+0xc4>)
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	4910      	ldr	r1, [pc, #64]	; (800d204 <SYSVIEW_AddTask+0xcc>)
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	009b      	lsls	r3, r3, #2
 800d1ca:	440b      	add	r3, r1
 800d1cc:	3310      	adds	r3, #16
 800d1ce:	69ba      	ldr	r2, [r7, #24]
 800d1d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800d1d2:	4b0a      	ldr	r3, [pc, #40]	; (800d1fc <SYSVIEW_AddTask+0xc4>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	4a08      	ldr	r2, [pc, #32]	; (800d1fc <SYSVIEW_AddTask+0xc4>)
 800d1da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800d1dc:	69bb      	ldr	r3, [r7, #24]
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	68b9      	ldr	r1, [r7, #8]
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	f000 f80e 	bl	800d208 <SYSVIEW_SendTaskInfo>
 800d1ec:	e000      	b.n	800d1f0 <SYSVIEW_AddTask+0xb8>
    return;
 800d1ee:	bf00      	nop

}
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	08012df8 	.word	0x08012df8
 800d1fc:	20019504 	.word	0x20019504
 800d200:	08012e00 	.word	0x08012e00
 800d204:	20019464 	.word	0x20019464

0800d208 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08a      	sub	sp, #40	; 0x28
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
 800d214:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800d216:	f107 0314 	add.w	r3, r7, #20
 800d21a:	2214      	movs	r2, #20
 800d21c:	2100      	movs	r1, #0
 800d21e:	4618      	mov	r0, r3
 800d220:	f002 fcf6 	bl	800fc10 <memset>
  TaskInfo.TaskID     = TaskID;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800d238:	f107 0314 	add.w	r3, r7, #20
 800d23c:	4618      	mov	r0, r3
 800d23e:	f001 ff9f 	bl	800f180 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800d242:	bf00      	nop
 800d244:	3728      	adds	r7, #40	; 0x28
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <__NVIC_EnableIRQ>:
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	db0b      	blt.n	800d276 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	f003 021f 	and.w	r2, r3, #31
 800d264:	4907      	ldr	r1, [pc, #28]	; (800d284 <__NVIC_EnableIRQ+0x38>)
 800d266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d26a:	095b      	lsrs	r3, r3, #5
 800d26c:	2001      	movs	r0, #1
 800d26e:	fa00 f202 	lsl.w	r2, r0, r2
 800d272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d276:	bf00      	nop
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	e000e100 	.word	0xe000e100

0800d288 <__NVIC_SetPriority>:
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	4603      	mov	r3, r0
 800d290:	6039      	str	r1, [r7, #0]
 800d292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	db0a      	blt.n	800d2b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	490c      	ldr	r1, [pc, #48]	; (800d2d4 <__NVIC_SetPriority+0x4c>)
 800d2a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2a6:	0112      	lsls	r2, r2, #4
 800d2a8:	b2d2      	uxtb	r2, r2
 800d2aa:	440b      	add	r3, r1
 800d2ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d2b0:	e00a      	b.n	800d2c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	4908      	ldr	r1, [pc, #32]	; (800d2d8 <__NVIC_SetPriority+0x50>)
 800d2b8:	79fb      	ldrb	r3, [r7, #7]
 800d2ba:	f003 030f 	and.w	r3, r3, #15
 800d2be:	3b04      	subs	r3, #4
 800d2c0:	0112      	lsls	r2, r2, #4
 800d2c2:	b2d2      	uxtb	r2, r2
 800d2c4:	440b      	add	r3, r1
 800d2c6:	761a      	strb	r2, [r3, #24]
}
 800d2c8:	bf00      	nop
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	e000e100 	.word	0xe000e100
 800d2d8:	e000ed00 	.word	0xe000ed00

0800d2dc <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800d2e2:	f002 fc0f 	bl	800fb04 <SEGGER_SYSVIEW_IsStarted>
 800d2e6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d101      	bne.n	800d2f2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800d2ee:	f001 fdcb 	bl	800ee88 <SEGGER_SYSVIEW_Start>
  }
}
 800d2f2:	bf00      	nop
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800d306:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <_cbOnUARTRx+0x3c>)
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d806      	bhi.n	800d31c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800d30e:	4b0a      	ldr	r3, [pc, #40]	; (800d338 <_cbOnUARTRx+0x3c>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	3301      	adds	r3, #1
 800d314:	b2da      	uxtb	r2, r3
 800d316:	4b08      	ldr	r3, [pc, #32]	; (800d338 <_cbOnUARTRx+0x3c>)
 800d318:	701a      	strb	r2, [r3, #0]
    goto Done;
 800d31a:	e009      	b.n	800d330 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800d31c:	f7ff ffde 	bl	800d2dc <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800d320:	4b05      	ldr	r3, [pc, #20]	; (800d338 <_cbOnUARTRx+0x3c>)
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	4618      	mov	r0, r3
 800d326:	1dfb      	adds	r3, r7, #7
 800d328:	2201      	movs	r2, #1
 800d32a:	4619      	mov	r1, r3
 800d32c:	f000 fc0e 	bl	800db4c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800d330:	bf00      	nop
}
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	2000002c 	.word	0x2000002c

0800d33c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 800d344:	4b14      	ldr	r3, [pc, #80]	; (800d398 <_cbOnUARTTx+0x5c>)
 800d346:	785b      	ldrb	r3, [r3, #1]
 800d348:	2b03      	cmp	r3, #3
 800d34a:	d80f      	bhi.n	800d36c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800d34c:	4b12      	ldr	r3, [pc, #72]	; (800d398 <_cbOnUARTTx+0x5c>)
 800d34e:	785b      	ldrb	r3, [r3, #1]
 800d350:	461a      	mov	r2, r3
 800d352:	4b12      	ldr	r3, [pc, #72]	; (800d39c <_cbOnUARTTx+0x60>)
 800d354:	5c9a      	ldrb	r2, [r3, r2]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800d35a:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <_cbOnUARTTx+0x5c>)
 800d35c:	785b      	ldrb	r3, [r3, #1]
 800d35e:	3301      	adds	r3, #1
 800d360:	b2da      	uxtb	r2, r3
 800d362:	4b0d      	ldr	r3, [pc, #52]	; (800d398 <_cbOnUARTTx+0x5c>)
 800d364:	705a      	strb	r2, [r3, #1]
    r = 1;
 800d366:	2301      	movs	r3, #1
 800d368:	60fb      	str	r3, [r7, #12]
    goto Done;
 800d36a:	e00f      	b.n	800d38c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800d36c:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <_cbOnUARTTx+0x5c>)
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	6879      	ldr	r1, [r7, #4]
 800d374:	4618      	mov	r0, r3
 800d376:	f000 fa3d 	bl	800d7f4 <SEGGER_RTT_ReadUpBufferNoLock>
 800d37a:	4603      	mov	r3, r0
 800d37c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	da02      	bge.n	800d38a <_cbOnUARTTx+0x4e>
    r = 0;
 800d384:	2300      	movs	r3, #0
 800d386:	60fb      	str	r3, [r7, #12]
 800d388:	e000      	b.n	800d38c <_cbOnUARTTx+0x50>
  }
Done:
 800d38a:	bf00      	nop
  return r;
 800d38c:	68fb      	ldr	r3, [r7, #12]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3710      	adds	r7, #16
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
 800d396:	bf00      	nop
 800d398:	2000002c 	.word	0x2000002c
 800d39c:	08012e90 	.word	0x08012e90

0800d3a0 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800d3a8:	4a04      	ldr	r2, [pc, #16]	; (800d3bc <SEGGER_UART_init+0x1c>)
 800d3aa:	4905      	ldr	r1, [pc, #20]	; (800d3c0 <SEGGER_UART_init+0x20>)
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 f863 	bl	800d478 <HIF_UART_Init>
}
 800d3b2:	bf00      	nop
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	0800d2fd 	.word	0x0800d2fd
 800d3c0:	0800d33d 	.word	0x0800d33d

0800d3c4 <USART3_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART3_IRQHandler(void);
void USART3_IRQHandler(void) {
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800d3ca:	4b1e      	ldr	r3, [pc, #120]	; (800d444 <USART3_IRQHandler+0x80>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f003 0320 	and.w	r3, r3, #32
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d011      	beq.n	800d3fe <USART3_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800d3da:	4b1b      	ldr	r3, [pc, #108]	; (800d448 <USART3_IRQHandler+0x84>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f003 030b 	and.w	r3, r3, #11
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d108      	bne.n	800d3fe <USART3_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800d3ec:	4b17      	ldr	r3, [pc, #92]	; (800d44c <USART3_IRQHandler+0x88>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <USART3_IRQHandler+0x3a>
        _cbOnRx(v);
 800d3f4:	4b15      	ldr	r3, [pc, #84]	; (800d44c <USART3_IRQHandler+0x88>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	79fa      	ldrb	r2, [r7, #7]
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01a      	beq.n	800d43e <USART3_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800d408:	4b11      	ldr	r3, [pc, #68]	; (800d450 <USART3_IRQHandler+0x8c>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d015      	beq.n	800d43c <USART3_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800d410:	4b0f      	ldr	r3, [pc, #60]	; (800d450 <USART3_IRQHandler+0x8c>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	1dfa      	adds	r2, r7, #7
 800d416:	4610      	mov	r0, r2
 800d418:	4798      	blx	r3
 800d41a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d106      	bne.n	800d430 <USART3_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800d422:	4b0c      	ldr	r3, [pc, #48]	; (800d454 <USART3_IRQHandler+0x90>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a0b      	ldr	r2, [pc, #44]	; (800d454 <USART3_IRQHandler+0x90>)
 800d428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d42c:	6013      	str	r3, [r2, #0]
 800d42e:	e006      	b.n	800d43e <USART3_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800d430:	4b04      	ldr	r3, [pc, #16]	; (800d444 <USART3_IRQHandler+0x80>)
 800d432:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800d434:	79fa      	ldrb	r2, [r7, #7]
 800d436:	4b04      	ldr	r3, [pc, #16]	; (800d448 <USART3_IRQHandler+0x84>)
 800d438:	601a      	str	r2, [r3, #0]
 800d43a:	e000      	b.n	800d43e <USART3_IRQHandler+0x7a>
      return;
 800d43c:	bf00      	nop
    }
  }
}
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	40004800 	.word	0x40004800
 800d448:	40004804 	.word	0x40004804
 800d44c:	20019508 	.word	0x20019508
 800d450:	2001950c 	.word	0x2001950c
 800d454:	4000480c 	.word	0x4000480c

0800d458 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800d458:	b480      	push	{r7}
 800d45a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800d45c:	4b05      	ldr	r3, [pc, #20]	; (800d474 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a04      	ldr	r2, [pc, #16]	; (800d474 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800d462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d466:	6013      	str	r3, [r2, #0]
}
 800d468:	bf00      	nop
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	4000480c 	.word	0x4000480c

0800d478 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  18);        // Enable USART3 clock
 800d484:	4b40      	ldr	r3, [pc, #256]	; (800d588 <HIF_UART_Init+0x110>)
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a3f      	ldr	r2, [pc, #252]	; (800d588 <HIF_UART_Init+0x110>)
 800d48a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d48e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  3);        // Enable IO port D clock
 800d490:	4b3e      	ldr	r3, [pc, #248]	; (800d58c <HIF_UART_Init+0x114>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a3d      	ldr	r2, [pc, #244]	; (800d58c <HIF_UART_Init+0x114>)
 800d496:	f043 0308 	orr.w	r3, r3, #8
 800d49a:	6013      	str	r3, [r2, #0]

  uint8_t pin_tx, pin_rx;
  pin_tx = GPIO_UART_TX_BIT % 8;
 800d49c:	2300      	movs	r3, #0
 800d49e:	75fb      	strb	r3, [r7, #23]
  pin_rx = GPIO_UART_RX_BIT % 8;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	75bb      	strb	r3, [r7, #22]
  if((GPIO_UART_TX_BIT / 8))
  {
	  v  = GPIO_AFRH;
 800d4a4:	4b3a      	ldr	r3, [pc, #232]	; (800d590 <HIF_UART_Init+0x118>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	61fb      	str	r3, [r7, #28]
	  v &= ~(15UL << ((pin_tx) << 2));
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	220f      	movs	r2, #15
 800d4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b4:	43db      	mvns	r3, r3
 800d4b6:	69fa      	ldr	r2, [r7, #28]
 800d4b8:	4013      	ands	r3, r2
 800d4ba:	61fb      	str	r3, [r7, #28]
	  v |=  (7UL << ((pin_tx) << 2));
 800d4bc:	7dfb      	ldrb	r3, [r7, #23]
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	2207      	movs	r2, #7
 800d4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4c6:	69fa      	ldr	r2, [r7, #28]
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	61fb      	str	r3, [r7, #28]
	  GPIO_AFRH = v;
 800d4cc:	4a30      	ldr	r2, [pc, #192]	; (800d590 <HIF_UART_Init+0x118>)
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	6013      	str	r3, [r2, #0]
	  v |=  (7UL << ((pin_tx) << 2));
	  GPIO_AFRL = v;
  }
  if((GPIO_UART_RX_BIT / 8))
  {
	  v  = GPIO_AFRH;
 800d4d2:	4b2f      	ldr	r3, [pc, #188]	; (800d590 <HIF_UART_Init+0x118>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	61fb      	str	r3, [r7, #28]
	  v &= ~(15UL << ((pin_rx) << 2));
 800d4d8:	7dbb      	ldrb	r3, [r7, #22]
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	220f      	movs	r2, #15
 800d4de:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e2:	43db      	mvns	r3, r3
 800d4e4:	69fa      	ldr	r2, [r7, #28]
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	61fb      	str	r3, [r7, #28]
	  v |=  (7UL << ((pin_rx) << 2));
 800d4ea:	7dbb      	ldrb	r3, [r7, #22]
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	2207      	movs	r2, #7
 800d4f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4f4:	69fa      	ldr	r2, [r7, #28]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	61fb      	str	r3, [r7, #28]
	  GPIO_AFRH = v;
 800d4fa:	4a25      	ldr	r2, [pc, #148]	; (800d590 <HIF_UART_Init+0x118>)
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	6013      	str	r3, [r2, #0]
  GPIO_AFRL = v;
  */
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800d500:	4b24      	ldr	r3, [pc, #144]	; (800d594 <HIF_UART_Init+0x11c>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	61fb      	str	r3, [r7, #28]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800d50c:	61fb      	str	r3, [r7, #28]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800d514:	61fb      	str	r3, [r7, #28]
  GPIO_MODER = v;
 800d516:	4a1f      	ldr	r2, [pc, #124]	; (800d594 <HIF_UART_Init+0x11c>)
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 800d51c:	4b1e      	ldr	r3, [pc, #120]	; (800d598 <HIF_UART_Init+0x120>)
 800d51e:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800d522:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 800d524:	4b1d      	ldr	r3, [pc, #116]	; (800d59c <HIF_UART_Init+0x124>)
 800d526:	2200      	movs	r2, #0
 800d528:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800d52a:	4b1d      	ldr	r3, [pc, #116]	; (800d5a0 <HIF_UART_Init+0x128>)
 800d52c:	2280      	movs	r2, #128	; 0x80
 800d52e:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	00db      	lsls	r3, r3, #3
 800d534:	61bb      	str	r3, [r7, #24]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800d536:	4a1b      	ldr	r2, [pc, #108]	; (800d5a4 <HIF_UART_Init+0x12c>)
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d53e:	3301      	adds	r3, #1
 800d540:	61bb      	str	r3, [r7, #24]
  Div = Div / 2;
 800d542:	69bb      	ldr	r3, [r7, #24]
 800d544:	085b      	lsrs	r3, r3, #1
 800d546:	61bb      	str	r3, [r7, #24]
  if (Div > 0xFFF) {
 800d548:	69bb      	ldr	r3, [r7, #24]
 800d54a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d54e:	d302      	bcc.n	800d556 <HIF_UART_Init+0xde>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800d550:	f640 73ff 	movw	r3, #4095	; 0xfff
 800d554:	61bb      	str	r3, [r7, #24]
  }
  if (Div >= 1) {
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d004      	beq.n	800d566 <HIF_UART_Init+0xee>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	011b      	lsls	r3, r3, #4
 800d560:	4a11      	ldr	r2, [pc, #68]	; (800d5a8 <HIF_UART_Init+0x130>)
 800d562:	b29b      	uxth	r3, r3
 800d564:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800d566:	4a11      	ldr	r2, [pc, #68]	; (800d5ac <HIF_UART_Init+0x134>)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 800d56c:	4a10      	ldr	r2, [pc, #64]	; (800d5b0 <HIF_UART_Init+0x138>)
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800d572:	2106      	movs	r1, #6
 800d574:	2027      	movs	r0, #39	; 0x27
 800d576:	f7ff fe87 	bl	800d288 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800d57a:	2027      	movs	r0, #39	; 0x27
 800d57c:	f7ff fe66 	bl	800d24c <__NVIC_EnableIRQ>
}
 800d580:	bf00      	nop
 800d582:	3720      	adds	r7, #32
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	40023840 	.word	0x40023840
 800d58c:	40023830 	.word	0x40023830
 800d590:	40020c24 	.word	0x40020c24
 800d594:	40020c00 	.word	0x40020c00
 800d598:	4000480c 	.word	0x4000480c
 800d59c:	40004810 	.word	0x40004810
 800d5a0:	40004814 	.word	0x40004814
 800d5a4:	0501bd00 	.word	0x0501bd00
 800d5a8:	40004808 	.word	0x40004808
 800d5ac:	20019508 	.word	0x20019508
 800d5b0:	2001950c 	.word	0x2001950c

0800d5b4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800d5ba:	4b24      	ldr	r3, [pc, #144]	; (800d64c <_DoInit+0x98>)
 800d5bc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2203      	movs	r2, #3
 800d5c2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2203      	movs	r2, #3
 800d5c8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4a20      	ldr	r2, [pc, #128]	; (800d650 <_DoInit+0x9c>)
 800d5ce:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4a20      	ldr	r2, [pc, #128]	; (800d654 <_DoInit+0xa0>)
 800d5d4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d5dc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4a17      	ldr	r2, [pc, #92]	; (800d650 <_DoInit+0x9c>)
 800d5f4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	4a17      	ldr	r2, [pc, #92]	; (800d658 <_DoInit+0xa4>)
 800d5fa:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2210      	movs	r2, #16
 800d600:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	3307      	adds	r3, #7
 800d618:	4a10      	ldr	r2, [pc, #64]	; (800d65c <_DoInit+0xa8>)
 800d61a:	6810      	ldr	r0, [r2, #0]
 800d61c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800d61e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4a0e      	ldr	r2, [pc, #56]	; (800d660 <_DoInit+0xac>)
 800d626:	6810      	ldr	r0, [r2, #0]
 800d628:	6018      	str	r0, [r3, #0]
 800d62a:	8891      	ldrh	r1, [r2, #4]
 800d62c:	7992      	ldrb	r2, [r2, #6]
 800d62e:	8099      	strh	r1, [r3, #4]
 800d630:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800d632:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2220      	movs	r2, #32
 800d63a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800d63c:	f3bf 8f5f 	dmb	sy
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	2001ac74 	.word	0x2001ac74
 800d650:	08012e50 	.word	0x08012e50
 800d654:	20019510 	.word	0x20019510
 800d658:	20019910 	.word	0x20019910
 800d65c:	08012e5c 	.word	0x08012e5c
 800d660:	08012e60 	.word	0x08012e60

0800d664 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800d664:	b580      	push	{r7, lr}
 800d666:	b08a      	sub	sp, #40	; 0x28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800d670:	2300      	movs	r3, #0
 800d672:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	68db      	ldr	r3, [r3, #12]
 800d678:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800d680:	69ba      	ldr	r2, [r7, #24]
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	429a      	cmp	r2, r3
 800d686:	d905      	bls.n	800d694 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800d688:	69ba      	ldr	r2, [r7, #24]
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	3b01      	subs	r3, #1
 800d690:	627b      	str	r3, [r7, #36]	; 0x24
 800d692:	e007      	b.n	800d6a4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	689a      	ldr	r2, [r3, #8]
 800d698:	69b9      	ldr	r1, [r7, #24]
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	1acb      	subs	r3, r1, r3
 800d69e:	4413      	add	r3, r2
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	689a      	ldr	r2, [r3, #8]
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	1ad3      	subs	r3, r2, r3
 800d6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	bf28      	it	cs
 800d6b2:	4613      	movcs	r3, r2
 800d6b4:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800d6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	bf28      	it	cs
 800d6be:	4613      	movcs	r3, r2
 800d6c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	685a      	ldr	r2, [r3, #4]
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800d6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ce:	68b9      	ldr	r1, [r7, #8]
 800d6d0:	6978      	ldr	r0, [r7, #20]
 800d6d2:	f002 fa8f 	bl	800fbf4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800d6d6:	6a3a      	ldr	r2, [r7, #32]
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	4413      	add	r3, r2
 800d6dc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	4413      	add	r3, r2
 800d6e4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ea:	1ad3      	subs	r3, r2, r3
 800d6ec:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800d6ee:	69fa      	ldr	r2, [r7, #28]
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f2:	4413      	add	r3, r2
 800d6f4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	69fa      	ldr	r2, [r7, #28]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d101      	bne.n	800d704 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800d700:	2300      	movs	r3, #0
 800d702:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800d704:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	69fa      	ldr	r2, [r7, #28]
 800d70c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1b2      	bne.n	800d67a <_WriteBlocking+0x16>
  return NumBytesWritten;
 800d714:	6a3b      	ldr	r3, [r7, #32]
}
 800d716:	4618      	mov	r0, r3
 800d718:	3728      	adds	r7, #40	; 0x28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800d71e:	b580      	push	{r7, lr}
 800d720:	b088      	sub	sp, #32
 800d722:	af00      	add	r7, sp, #0
 800d724:	60f8      	str	r0, [r7, #12]
 800d726:	60b9      	str	r1, [r7, #8]
 800d728:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	68db      	ldr	r3, [r3, #12]
 800d72e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	689a      	ldr	r2, [r3, #8]
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800d73a:	69ba      	ldr	r2, [r7, #24]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d911      	bls.n	800d766 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	685a      	ldr	r2, [r3, #4]
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	4413      	add	r3, r2
 800d74a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	6938      	ldr	r0, [r7, #16]
 800d752:	f002 fa4f 	bl	800fbf4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800d756:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800d75a:	69fa      	ldr	r2, [r7, #28]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	441a      	add	r2, r3
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800d764:	e01f      	b.n	800d7a6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	4413      	add	r3, r2
 800d772:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800d774:	697a      	ldr	r2, [r7, #20]
 800d776:	68b9      	ldr	r1, [r7, #8]
 800d778:	6938      	ldr	r0, [r7, #16]
 800d77a:	f002 fa3b 	bl	800fbf4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	1ad3      	subs	r3, r2, r3
 800d784:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	4413      	add	r3, r2
 800d792:	697a      	ldr	r2, [r7, #20]
 800d794:	4619      	mov	r1, r3
 800d796:	6938      	ldr	r0, [r7, #16]
 800d798:	f002 fa2c 	bl	800fbf4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800d79c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	60da      	str	r2, [r3, #12]
}
 800d7a6:	bf00      	nop
 800d7a8:	3720      	adds	r7, #32
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}

0800d7ae <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800d7ae:	b480      	push	{r7}
 800d7b0:	b087      	sub	sp, #28
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	691b      	ldr	r3, [r3, #16]
 800d7ba:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800d7c2:	693a      	ldr	r2, [r7, #16]
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d808      	bhi.n	800d7dc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	689a      	ldr	r2, [r3, #8]
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	1ad2      	subs	r2, r2, r3
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	617b      	str	r3, [r7, #20]
 800d7da:	e004      	b.n	800d7e6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	617b      	str	r3, [r7, #20]
  }
  return r;
 800d7e6:	697b      	ldr	r3, [r7, #20]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	371c      	adds	r7, #28
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b08c      	sub	sp, #48	; 0x30
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	60b9      	str	r1, [r7, #8]
 800d7fe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800d800:	4b3e      	ldr	r3, [pc, #248]	; (800d8fc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800d802:	623b      	str	r3, [r7, #32]
 800d804:	6a3b      	ldr	r3, [r7, #32]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d101      	bne.n	800d812 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800d80e:	f7ff fed1 	bl	800d5b4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	4613      	mov	r3, r2
 800d818:	005b      	lsls	r3, r3, #1
 800d81a:	4413      	add	r3, r2
 800d81c:	00db      	lsls	r3, r3, #3
 800d81e:	4a37      	ldr	r2, [pc, #220]	; (800d8fc <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800d820:	4413      	add	r3, r2
 800d822:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	68db      	ldr	r3, [r3, #12]
 800d832:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800d834:	2300      	movs	r3, #0
 800d836:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800d838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d92b      	bls.n	800d898 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	689a      	ldr	r2, [r3, #8]
 800d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800d84a:	697a      	ldr	r2, [r7, #20]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4293      	cmp	r3, r2
 800d850:	bf28      	it	cs
 800d852:	4613      	movcs	r3, r2
 800d854:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	685a      	ldr	r2, [r3, #4]
 800d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85c:	4413      	add	r3, r2
 800d85e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	6939      	ldr	r1, [r7, #16]
 800d864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d866:	f002 f9c5 	bl	800fbf4 <memcpy>
    NumBytesRead += NumBytesRem;
 800d86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	4413      	add	r3, r2
 800d870:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800d872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	4413      	add	r3, r2
 800d878:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	1ad3      	subs	r3, r2, r3
 800d880:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800d882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	4413      	add	r3, r2
 800d888:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	689b      	ldr	r3, [r3, #8]
 800d88e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d890:	429a      	cmp	r2, r3
 800d892:	d101      	bne.n	800d898 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800d894:	2300      	movs	r3, #0
 800d896:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800d898:	69ba      	ldr	r2, [r7, #24]
 800d89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d89c:	1ad3      	subs	r3, r2, r3
 800d89e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800d8a0:	697a      	ldr	r2, [r7, #20]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	bf28      	it	cs
 800d8a8:	4613      	movcs	r3, r2
 800d8aa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d019      	beq.n	800d8e6 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	685a      	ldr	r2, [r3, #4]
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	4413      	add	r3, r2
 800d8ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	6939      	ldr	r1, [r7, #16]
 800d8c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8c2:	f002 f997 	bl	800fbf4 <memcpy>
    NumBytesRead += NumBytesRem;
 800d8c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800d8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800d8de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800d8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8f0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3730      	adds	r7, #48	; 0x30
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	2001ac74 	.word	0x2001ac74

0800d900 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800d900:	b580      	push	{r7, lr}
 800d902:	b08c      	sub	sp, #48	; 0x30
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800d90c:	4b3e      	ldr	r3, [pc, #248]	; (800da08 <SEGGER_RTT_ReadNoLock+0x108>)
 800d90e:	623b      	str	r3, [r7, #32]
 800d910:	6a3b      	ldr	r3, [r7, #32]
 800d912:	781b      	ldrb	r3, [r3, #0]
 800d914:	b2db      	uxtb	r3, r3
 800d916:	2b00      	cmp	r3, #0
 800d918:	d101      	bne.n	800d91e <SEGGER_RTT_ReadNoLock+0x1e>
 800d91a:	f7ff fe4b 	bl	800d5b4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	4613      	mov	r3, r2
 800d922:	005b      	lsls	r3, r3, #1
 800d924:	4413      	add	r3, r2
 800d926:	00db      	lsls	r3, r3, #3
 800d928:	3360      	adds	r3, #96	; 0x60
 800d92a:	4a37      	ldr	r2, [pc, #220]	; (800da08 <SEGGER_RTT_ReadNoLock+0x108>)
 800d92c:	4413      	add	r3, r2
 800d92e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	691b      	ldr	r3, [r3, #16]
 800d938:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800d940:	2300      	movs	r3, #0
 800d942:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800d944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d92b      	bls.n	800d9a4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	689a      	ldr	r2, [r3, #8]
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4293      	cmp	r3, r2
 800d95c:	bf28      	it	cs
 800d95e:	4613      	movcs	r3, r2
 800d960:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	685a      	ldr	r2, [r3, #4]
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	4413      	add	r3, r2
 800d96a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	6939      	ldr	r1, [r7, #16]
 800d970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d972:	f002 f93f 	bl	800fbf4 <memcpy>
    NumBytesRead += NumBytesRem;
 800d976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	4413      	add	r3, r2
 800d97c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800d97e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	4413      	add	r3, r2
 800d984:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800d98e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	4413      	add	r3, r2
 800d994:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d101      	bne.n	800d9a4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800d9a4:	69ba      	ldr	r2, [r7, #24]
 800d9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800d9ac:	697a      	ldr	r2, [r7, #20]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	bf28      	it	cs
 800d9b4:	4613      	movcs	r3, r2
 800d9b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d019      	beq.n	800d9f2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	685a      	ldr	r2, [r3, #4]
 800d9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c4:	4413      	add	r3, r2
 800d9c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800d9c8:	697a      	ldr	r2, [r7, #20]
 800d9ca:	6939      	ldr	r1, [r7, #16]
 800d9cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9ce:	f002 f911 	bl	800fbf4 <memcpy>
    NumBytesRead += NumBytesRem;
 800d9d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800d9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	4413      	add	r3, r2
 800d9e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	1ad3      	subs	r3, r2, r3
 800d9e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800d9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800d9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800d9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800da00:	4618      	mov	r0, r3
 800da02:	3730      	adds	r7, #48	; 0x30
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	2001ac74 	.word	0x2001ac74

0800da0c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b088      	sub	sp, #32
 800da10:	af00      	add	r7, sp, #0
 800da12:	60f8      	str	r0, [r7, #12]
 800da14:	60b9      	str	r1, [r7, #8]
 800da16:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800da1c:	68fa      	ldr	r2, [r7, #12]
 800da1e:	4613      	mov	r3, r2
 800da20:	005b      	lsls	r3, r3, #1
 800da22:	4413      	add	r3, r2
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	3360      	adds	r3, #96	; 0x60
 800da28:	4a1f      	ldr	r2, [pc, #124]	; (800daa8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800da2a:	4413      	add	r3, r2
 800da2c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	2b02      	cmp	r3, #2
 800da34:	d029      	beq.n	800da8a <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800da36:	2b02      	cmp	r3, #2
 800da38:	d82e      	bhi.n	800da98 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d002      	beq.n	800da44 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d013      	beq.n	800da6a <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800da42:	e029      	b.n	800da98 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800da44:	6978      	ldr	r0, [r7, #20]
 800da46:	f7ff feb2 	bl	800d7ae <_GetAvailWriteSpace>
 800da4a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	429a      	cmp	r2, r3
 800da52:	d202      	bcs.n	800da5a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800da54:	2300      	movs	r3, #0
 800da56:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800da58:	e021      	b.n	800da9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800da5e:	687a      	ldr	r2, [r7, #4]
 800da60:	69b9      	ldr	r1, [r7, #24]
 800da62:	6978      	ldr	r0, [r7, #20]
 800da64:	f7ff fe5b 	bl	800d71e <_WriteNoCheck>
    break;
 800da68:	e019      	b.n	800da9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800da6a:	6978      	ldr	r0, [r7, #20]
 800da6c:	f7ff fe9f 	bl	800d7ae <_GetAvailWriteSpace>
 800da70:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	4293      	cmp	r3, r2
 800da78:	bf28      	it	cs
 800da7a:	4613      	movcs	r3, r2
 800da7c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800da7e:	69fa      	ldr	r2, [r7, #28]
 800da80:	69b9      	ldr	r1, [r7, #24]
 800da82:	6978      	ldr	r0, [r7, #20]
 800da84:	f7ff fe4b 	bl	800d71e <_WriteNoCheck>
    break;
 800da88:	e009      	b.n	800da9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	69b9      	ldr	r1, [r7, #24]
 800da8e:	6978      	ldr	r0, [r7, #20]
 800da90:	f7ff fde8 	bl	800d664 <_WriteBlocking>
 800da94:	61f8      	str	r0, [r7, #28]
    break;
 800da96:	e002      	b.n	800da9e <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800da98:	2300      	movs	r3, #0
 800da9a:	61fb      	str	r3, [r7, #28]
    break;
 800da9c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800da9e:	69fb      	ldr	r3, [r7, #28]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3720      	adds	r7, #32
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	2001ac74 	.word	0x2001ac74

0800daac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800daac:	b580      	push	{r7, lr}
 800daae:	b088      	sub	sp, #32
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	60b9      	str	r1, [r7, #8]
 800dab6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	1c5a      	adds	r2, r3, #1
 800dac0:	4613      	mov	r3, r2
 800dac2:	005b      	lsls	r3, r3, #1
 800dac4:	4413      	add	r3, r2
 800dac6:	00db      	lsls	r3, r3, #3
 800dac8:	4a1f      	ldr	r2, [pc, #124]	; (800db48 <SEGGER_RTT_WriteNoLock+0x9c>)
 800daca:	4413      	add	r3, r2
 800dacc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	695b      	ldr	r3, [r3, #20]
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d029      	beq.n	800db2a <SEGGER_RTT_WriteNoLock+0x7e>
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	d82e      	bhi.n	800db38 <SEGGER_RTT_WriteNoLock+0x8c>
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d002      	beq.n	800dae4 <SEGGER_RTT_WriteNoLock+0x38>
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d013      	beq.n	800db0a <SEGGER_RTT_WriteNoLock+0x5e>
 800dae2:	e029      	b.n	800db38 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800dae4:	6978      	ldr	r0, [r7, #20]
 800dae6:	f7ff fe62 	bl	800d7ae <_GetAvailWriteSpace>
 800daea:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800daec:	693a      	ldr	r2, [r7, #16]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d202      	bcs.n	800dafa <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800daf4:	2300      	movs	r3, #0
 800daf6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800daf8:	e021      	b.n	800db3e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	69b9      	ldr	r1, [r7, #24]
 800db02:	6978      	ldr	r0, [r7, #20]
 800db04:	f7ff fe0b 	bl	800d71e <_WriteNoCheck>
    break;
 800db08:	e019      	b.n	800db3e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800db0a:	6978      	ldr	r0, [r7, #20]
 800db0c:	f7ff fe4f 	bl	800d7ae <_GetAvailWriteSpace>
 800db10:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	4293      	cmp	r3, r2
 800db18:	bf28      	it	cs
 800db1a:	4613      	movcs	r3, r2
 800db1c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800db1e:	69fa      	ldr	r2, [r7, #28]
 800db20:	69b9      	ldr	r1, [r7, #24]
 800db22:	6978      	ldr	r0, [r7, #20]
 800db24:	f7ff fdfb 	bl	800d71e <_WriteNoCheck>
    break;
 800db28:	e009      	b.n	800db3e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	69b9      	ldr	r1, [r7, #24]
 800db2e:	6978      	ldr	r0, [r7, #20]
 800db30:	f7ff fd98 	bl	800d664 <_WriteBlocking>
 800db34:	61f8      	str	r0, [r7, #28]
    break;
 800db36:	e002      	b.n	800db3e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800db38:	2300      	movs	r3, #0
 800db3a:	61fb      	str	r3, [r7, #28]
    break;
 800db3c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800db3e:	69fb      	ldr	r3, [r7, #28]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3720      	adds	r7, #32
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	2001ac74 	.word	0x2001ac74

0800db4c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b088      	sub	sp, #32
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800db58:	4b0e      	ldr	r3, [pc, #56]	; (800db94 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800db5a:	61fb      	str	r3, [r7, #28]
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	2b00      	cmp	r3, #0
 800db64:	d101      	bne.n	800db6a <SEGGER_RTT_WriteDownBuffer+0x1e>
 800db66:	f7ff fd25 	bl	800d5b4 <_DoInit>
  SEGGER_RTT_LOCK();
 800db6a:	f3ef 8311 	mrs	r3, BASEPRI
 800db6e:	f04f 0120 	mov.w	r1, #32
 800db72:	f381 8811 	msr	BASEPRI, r1
 800db76:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	68b9      	ldr	r1, [r7, #8]
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f7ff ff45 	bl	800da0c <SEGGER_RTT_WriteDownBufferNoLock>
 800db82:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800db8a:	697b      	ldr	r3, [r7, #20]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3720      	adds	r7, #32
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	2001ac74 	.word	0x2001ac74

0800db98 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800db98:	b580      	push	{r7, lr}
 800db9a:	b088      	sub	sp, #32
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800dba4:	4b0e      	ldr	r3, [pc, #56]	; (800dbe0 <SEGGER_RTT_Write+0x48>)
 800dba6:	61fb      	str	r3, [r7, #28]
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d101      	bne.n	800dbb6 <SEGGER_RTT_Write+0x1e>
 800dbb2:	f7ff fcff 	bl	800d5b4 <_DoInit>
  SEGGER_RTT_LOCK();
 800dbb6:	f3ef 8311 	mrs	r3, BASEPRI
 800dbba:	f04f 0120 	mov.w	r1, #32
 800dbbe:	f381 8811 	msr	BASEPRI, r1
 800dbc2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	68b9      	ldr	r1, [r7, #8]
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	f7ff ff6f 	bl	800daac <SEGGER_RTT_WriteNoLock>
 800dbce:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800dbd0:	69bb      	ldr	r3, [r7, #24]
 800dbd2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800dbd6:	697b      	ldr	r3, [r7, #20]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3720      	adds	r7, #32
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	2001ac74 	.word	0x2001ac74

0800dbe4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800dbf2:	4b3d      	ldr	r3, [pc, #244]	; (800dce8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800dbf4:	61bb      	str	r3, [r7, #24]
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d101      	bne.n	800dc04 <SEGGER_RTT_AllocUpBuffer+0x20>
 800dc00:	f7ff fcd8 	bl	800d5b4 <_DoInit>
  SEGGER_RTT_LOCK();
 800dc04:	f3ef 8311 	mrs	r3, BASEPRI
 800dc08:	f04f 0120 	mov.w	r1, #32
 800dc0c:	f381 8811 	msr	BASEPRI, r1
 800dc10:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800dc12:	4b35      	ldr	r3, [pc, #212]	; (800dce8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800dc14:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800dc1a:	6939      	ldr	r1, [r7, #16]
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	1c5a      	adds	r2, r3, #1
 800dc20:	4613      	mov	r3, r2
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	4413      	add	r3, r2
 800dc26:	00db      	lsls	r3, r3, #3
 800dc28:	440b      	add	r3, r1
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d008      	beq.n	800dc44 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	3301      	adds	r3, #1
 800dc36:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	69fa      	ldr	r2, [r7, #28]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	dbeb      	blt.n	800dc1a <SEGGER_RTT_AllocUpBuffer+0x36>
 800dc42:	e000      	b.n	800dc46 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800dc44:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	69fa      	ldr	r2, [r7, #28]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	da3f      	bge.n	800dcd0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800dc50:	6939      	ldr	r1, [r7, #16]
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	4613      	mov	r3, r2
 800dc58:	005b      	lsls	r3, r3, #1
 800dc5a:	4413      	add	r3, r2
 800dc5c:	00db      	lsls	r3, r3, #3
 800dc5e:	440b      	add	r3, r1
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800dc64:	6939      	ldr	r1, [r7, #16]
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	1c5a      	adds	r2, r3, #1
 800dc6a:	4613      	mov	r3, r2
 800dc6c:	005b      	lsls	r3, r3, #1
 800dc6e:	4413      	add	r3, r2
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	440b      	add	r3, r1
 800dc74:	3304      	adds	r3, #4
 800dc76:	68ba      	ldr	r2, [r7, #8]
 800dc78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800dc7a:	6939      	ldr	r1, [r7, #16]
 800dc7c:	69fa      	ldr	r2, [r7, #28]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	005b      	lsls	r3, r3, #1
 800dc82:	4413      	add	r3, r2
 800dc84:	00db      	lsls	r3, r3, #3
 800dc86:	440b      	add	r3, r1
 800dc88:	3320      	adds	r3, #32
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800dc8e:	6939      	ldr	r1, [r7, #16]
 800dc90:	69fa      	ldr	r2, [r7, #28]
 800dc92:	4613      	mov	r3, r2
 800dc94:	005b      	lsls	r3, r3, #1
 800dc96:	4413      	add	r3, r2
 800dc98:	00db      	lsls	r3, r3, #3
 800dc9a:	440b      	add	r3, r1
 800dc9c:	3328      	adds	r3, #40	; 0x28
 800dc9e:	2200      	movs	r2, #0
 800dca0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800dca2:	6939      	ldr	r1, [r7, #16]
 800dca4:	69fa      	ldr	r2, [r7, #28]
 800dca6:	4613      	mov	r3, r2
 800dca8:	005b      	lsls	r3, r3, #1
 800dcaa:	4413      	add	r3, r2
 800dcac:	00db      	lsls	r3, r3, #3
 800dcae:	440b      	add	r3, r1
 800dcb0:	3324      	adds	r3, #36	; 0x24
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800dcb6:	6939      	ldr	r1, [r7, #16]
 800dcb8:	69fa      	ldr	r2, [r7, #28]
 800dcba:	4613      	mov	r3, r2
 800dcbc:	005b      	lsls	r3, r3, #1
 800dcbe:	4413      	add	r3, r2
 800dcc0:	00db      	lsls	r3, r3, #3
 800dcc2:	440b      	add	r3, r1
 800dcc4:	332c      	adds	r3, #44	; 0x2c
 800dcc6:	683a      	ldr	r2, [r7, #0]
 800dcc8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800dcca:	f3bf 8f5f 	dmb	sy
 800dcce:	e002      	b.n	800dcd6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800dcd0:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800dcdc:	69fb      	ldr	r3, [r7, #28]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3720      	adds	r7, #32
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	2001ac74 	.word	0x2001ac74

0800dcec <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08a      	sub	sp, #40	; 0x28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
 800dcf8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800dcfa:	4b21      	ldr	r3, [pc, #132]	; (800dd80 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800dcfc:	623b      	str	r3, [r7, #32]
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <SEGGER_RTT_ConfigDownBuffer+0x20>
 800dd08:	f7ff fc54 	bl	800d5b4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800dd0c:	4b1c      	ldr	r3, [pc, #112]	; (800dd80 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800dd0e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2b02      	cmp	r3, #2
 800dd14:	d82c      	bhi.n	800dd70 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800dd16:	f3ef 8311 	mrs	r3, BASEPRI
 800dd1a:	f04f 0120 	mov.w	r1, #32
 800dd1e:	f381 8811 	msr	BASEPRI, r1
 800dd22:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	4613      	mov	r3, r2
 800dd28:	005b      	lsls	r3, r3, #1
 800dd2a:	4413      	add	r3, r2
 800dd2c:	00db      	lsls	r3, r3, #3
 800dd2e:	3360      	adds	r3, #96	; 0x60
 800dd30:	69fa      	ldr	r2, [r7, #28]
 800dd32:	4413      	add	r3, r2
 800dd34:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00e      	beq.n	800dd5a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2200      	movs	r2, #0
 800dd52:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2200      	movs	r2, #0
 800dd58:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd5e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800dd60:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800dd64:	69bb      	ldr	r3, [r7, #24]
 800dd66:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	627b      	str	r3, [r7, #36]	; 0x24
 800dd6e:	e002      	b.n	800dd76 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800dd70:	f04f 33ff 	mov.w	r3, #4294967295
 800dd74:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3728      	adds	r7, #40	; 0x28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	2001ac74 	.word	0x2001ac74

0800dd84 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800dd84:	b480      	push	{r7}
 800dd86:	b087      	sub	sp, #28
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00f      	beq.n	800ddba <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800dd9a:	e002      	b.n	800dda2 <_EncodeStr+0x1e>
      Len++;
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	3301      	adds	r3, #1
 800dda0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	4413      	add	r3, r2
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1f6      	bne.n	800dd9c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800ddae:	693a      	ldr	r2, [r7, #16]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d901      	bls.n	800ddba <_EncodeStr+0x36>
      Len = Limit;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2bfe      	cmp	r3, #254	; 0xfe
 800ddbe:	d806      	bhi.n	800ddce <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	60fa      	str	r2, [r7, #12]
 800ddc6:	693a      	ldr	r2, [r7, #16]
 800ddc8:	b2d2      	uxtb	r2, r2
 800ddca:	701a      	strb	r2, [r3, #0]
 800ddcc:	e011      	b.n	800ddf2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	1c5a      	adds	r2, r3, #1
 800ddd2:	60fa      	str	r2, [r7, #12]
 800ddd4:	22ff      	movs	r2, #255	; 0xff
 800ddd6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	1c5a      	adds	r2, r3, #1
 800dddc:	60fa      	str	r2, [r7, #12]
 800ddde:	693a      	ldr	r2, [r7, #16]
 800dde0:	b2d2      	uxtb	r2, r2
 800dde2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	0a19      	lsrs	r1, r3, #8
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	60fa      	str	r2, [r7, #12]
 800ddee:	b2ca      	uxtb	r2, r1
 800ddf0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800ddf6:	e00a      	b.n	800de0e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800ddf8:	68ba      	ldr	r2, [r7, #8]
 800ddfa:	1c53      	adds	r3, r2, #1
 800ddfc:	60bb      	str	r3, [r7, #8]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	1c59      	adds	r1, r3, #1
 800de02:	60f9      	str	r1, [r7, #12]
 800de04:	7812      	ldrb	r2, [r2, #0]
 800de06:	701a      	strb	r2, [r3, #0]
    n++;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	3301      	adds	r3, #1
 800de0c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800de0e:	697a      	ldr	r2, [r7, #20]
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	429a      	cmp	r2, r3
 800de14:	d3f0      	bcc.n	800ddf8 <_EncodeStr+0x74>
  }
  return pPayload;
 800de16:	68fb      	ldr	r3, [r7, #12]
}
 800de18:	4618      	mov	r0, r3
 800de1a:	371c      	adds	r7, #28
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	3304      	adds	r3, #4
}
 800de30:	4618      	mov	r0, r3
 800de32:	370c      	adds	r7, #12
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800de42:	4b36      	ldr	r3, [pc, #216]	; (800df1c <_HandleIncomingPacket+0xe0>)
 800de44:	7e1b      	ldrb	r3, [r3, #24]
 800de46:	4618      	mov	r0, r3
 800de48:	1cfb      	adds	r3, r7, #3
 800de4a:	2201      	movs	r2, #1
 800de4c:	4619      	mov	r1, r3
 800de4e:	f7ff fd57 	bl	800d900 <SEGGER_RTT_ReadNoLock>
 800de52:	4603      	mov	r3, r0
 800de54:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	dd54      	ble.n	800df06 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800de5c:	78fb      	ldrb	r3, [r7, #3]
 800de5e:	2b80      	cmp	r3, #128	; 0x80
 800de60:	d032      	beq.n	800dec8 <_HandleIncomingPacket+0x8c>
 800de62:	2b80      	cmp	r3, #128	; 0x80
 800de64:	dc42      	bgt.n	800deec <_HandleIncomingPacket+0xb0>
 800de66:	2b07      	cmp	r3, #7
 800de68:	dc16      	bgt.n	800de98 <_HandleIncomingPacket+0x5c>
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	dd3e      	ble.n	800deec <_HandleIncomingPacket+0xb0>
 800de6e:	3b01      	subs	r3, #1
 800de70:	2b06      	cmp	r3, #6
 800de72:	d83b      	bhi.n	800deec <_HandleIncomingPacket+0xb0>
 800de74:	a201      	add	r2, pc, #4	; (adr r2, 800de7c <_HandleIncomingPacket+0x40>)
 800de76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7a:	bf00      	nop
 800de7c:	0800de9f 	.word	0x0800de9f
 800de80:	0800dea5 	.word	0x0800dea5
 800de84:	0800deab 	.word	0x0800deab
 800de88:	0800deb1 	.word	0x0800deb1
 800de8c:	0800deb7 	.word	0x0800deb7
 800de90:	0800debd 	.word	0x0800debd
 800de94:	0800dec3 	.word	0x0800dec3
 800de98:	2b7f      	cmp	r3, #127	; 0x7f
 800de9a:	d036      	beq.n	800df0a <_HandleIncomingPacket+0xce>
 800de9c:	e026      	b.n	800deec <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800de9e:	f000 fff3 	bl	800ee88 <SEGGER_SYSVIEW_Start>
      break;
 800dea2:	e037      	b.n	800df14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800dea4:	f001 f8ac 	bl	800f000 <SEGGER_SYSVIEW_Stop>
      break;
 800dea8:	e034      	b.n	800df14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800deaa:	f001 fa85 	bl	800f3b8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800deae:	e031      	b.n	800df14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800deb0:	f001 fa4a 	bl	800f348 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800deb4:	e02e      	b.n	800df14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800deb6:	f001 f8c9 	bl	800f04c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800deba:	e02b      	b.n	800df14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800debc:	f001 fd74 	bl	800f9a8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800dec0:	e028      	b.n	800df14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800dec2:	f001 fd53 	bl	800f96c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800dec6:	e025      	b.n	800df14 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800dec8:	4b14      	ldr	r3, [pc, #80]	; (800df1c <_HandleIncomingPacket+0xe0>)
 800deca:	7e1b      	ldrb	r3, [r3, #24]
 800decc:	4618      	mov	r0, r3
 800dece:	1cfb      	adds	r3, r7, #3
 800ded0:	2201      	movs	r2, #1
 800ded2:	4619      	mov	r1, r3
 800ded4:	f7ff fd14 	bl	800d900 <SEGGER_RTT_ReadNoLock>
 800ded8:	4603      	mov	r3, r0
 800deda:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	dd15      	ble.n	800df0e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800dee2:	78fb      	ldrb	r3, [r7, #3]
 800dee4:	4618      	mov	r0, r3
 800dee6:	f001 fcc1 	bl	800f86c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800deea:	e010      	b.n	800df0e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800deec:	78fb      	ldrb	r3, [r7, #3]
 800deee:	b25b      	sxtb	r3, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	da0e      	bge.n	800df12 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800def4:	4b09      	ldr	r3, [pc, #36]	; (800df1c <_HandleIncomingPacket+0xe0>)
 800def6:	7e1b      	ldrb	r3, [r3, #24]
 800def8:	4618      	mov	r0, r3
 800defa:	1cfb      	adds	r3, r7, #3
 800defc:	2201      	movs	r2, #1
 800defe:	4619      	mov	r1, r3
 800df00:	f7ff fcfe 	bl	800d900 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800df04:	e005      	b.n	800df12 <_HandleIncomingPacket+0xd6>
    }
  }
 800df06:	bf00      	nop
 800df08:	e004      	b.n	800df14 <_HandleIncomingPacket+0xd8>
      break;
 800df0a:	bf00      	nop
 800df0c:	e002      	b.n	800df14 <_HandleIncomingPacket+0xd8>
      break;
 800df0e:	bf00      	nop
 800df10:	e000      	b.n	800df14 <_HandleIncomingPacket+0xd8>
      break;
 800df12:	bf00      	nop
}
 800df14:	bf00      	nop
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	2001a928 	.word	0x2001a928

0800df20 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800df20:	b580      	push	{r7, lr}
 800df22:	b08c      	sub	sp, #48	; 0x30
 800df24:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800df26:	2301      	movs	r3, #1
 800df28:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800df2a:	1d3b      	adds	r3, r7, #4
 800df2c:	3301      	adds	r3, #1
 800df2e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800df30:	69fb      	ldr	r3, [r7, #28]
 800df32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df34:	4b32      	ldr	r3, [pc, #200]	; (800e000 <_TrySendOverflowPacket+0xe0>)
 800df36:	695b      	ldr	r3, [r3, #20]
 800df38:	62bb      	str	r3, [r7, #40]	; 0x28
 800df3a:	e00b      	b.n	800df54 <_TrySendOverflowPacket+0x34>
 800df3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df42:	1c59      	adds	r1, r3, #1
 800df44:	62f9      	str	r1, [r7, #44]	; 0x2c
 800df46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800df4a:	b2d2      	uxtb	r2, r2
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df50:	09db      	lsrs	r3, r3, #7
 800df52:	62bb      	str	r3, [r7, #40]	; 0x28
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	2b7f      	cmp	r3, #127	; 0x7f
 800df58:	d8f0      	bhi.n	800df3c <_TrySendOverflowPacket+0x1c>
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	1c5a      	adds	r2, r3, #1
 800df5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df62:	b2d2      	uxtb	r2, r2
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df68:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800df6a:	4b26      	ldr	r3, [pc, #152]	; (800e004 <_TrySendOverflowPacket+0xe4>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800df70:	4b23      	ldr	r3, [pc, #140]	; (800e000 <_TrySendOverflowPacket+0xe0>)
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	69ba      	ldr	r2, [r7, #24]
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	627b      	str	r3, [r7, #36]	; 0x24
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	623b      	str	r3, [r7, #32]
 800df82:	e00b      	b.n	800df9c <_TrySendOverflowPacket+0x7c>
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	b2da      	uxtb	r2, r3
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	1c59      	adds	r1, r3, #1
 800df8c:	6279      	str	r1, [r7, #36]	; 0x24
 800df8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800df92:	b2d2      	uxtb	r2, r2
 800df94:	701a      	strb	r2, [r3, #0]
 800df96:	6a3b      	ldr	r3, [r7, #32]
 800df98:	09db      	lsrs	r3, r3, #7
 800df9a:	623b      	str	r3, [r7, #32]
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	2b7f      	cmp	r3, #127	; 0x7f
 800dfa0:	d8f0      	bhi.n	800df84 <_TrySendOverflowPacket+0x64>
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	1c5a      	adds	r2, r3, #1
 800dfa6:	627a      	str	r2, [r7, #36]	; 0x24
 800dfa8:	6a3a      	ldr	r2, [r7, #32]
 800dfaa:	b2d2      	uxtb	r2, r2
 800dfac:	701a      	strb	r2, [r3, #0]
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800dfb2:	4b13      	ldr	r3, [pc, #76]	; (800e000 <_TrySendOverflowPacket+0xe0>)
 800dfb4:	785b      	ldrb	r3, [r3, #1]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	1d3b      	adds	r3, r7, #4
 800dfba:	69fa      	ldr	r2, [r7, #28]
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	1d3b      	adds	r3, r7, #4
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	f7f2 f924 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800dfcc:	f7ff fa44 	bl	800d458 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d009      	beq.n	800dfea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800dfd6:	4a0a      	ldr	r2, [pc, #40]	; (800e000 <_TrySendOverflowPacket+0xe0>)
 800dfd8:	69bb      	ldr	r3, [r7, #24]
 800dfda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800dfdc:	4b08      	ldr	r3, [pc, #32]	; (800e000 <_TrySendOverflowPacket+0xe0>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	3b01      	subs	r3, #1
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	4b06      	ldr	r3, [pc, #24]	; (800e000 <_TrySendOverflowPacket+0xe0>)
 800dfe6:	701a      	strb	r2, [r3, #0]
 800dfe8:	e004      	b.n	800dff4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800dfea:	4b05      	ldr	r3, [pc, #20]	; (800e000 <_TrySendOverflowPacket+0xe0>)
 800dfec:	695b      	ldr	r3, [r3, #20]
 800dfee:	3301      	adds	r3, #1
 800dff0:	4a03      	ldr	r2, [pc, #12]	; (800e000 <_TrySendOverflowPacket+0xe0>)
 800dff2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800dff4:	693b      	ldr	r3, [r7, #16]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3730      	adds	r7, #48	; 0x30
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	2001a928 	.word	0x2001a928
 800e004:	e0001004 	.word	0xe0001004

0800e008 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08a      	sub	sp, #40	; 0x28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800e014:	4b6d      	ldr	r3, [pc, #436]	; (800e1cc <_SendPacket+0x1c4>)
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d010      	beq.n	800e03e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800e01c:	4b6b      	ldr	r3, [pc, #428]	; (800e1cc <_SendPacket+0x1c4>)
 800e01e:	781b      	ldrb	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	f000 80a5 	beq.w	800e170 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800e026:	4b69      	ldr	r3, [pc, #420]	; (800e1cc <_SendPacket+0x1c4>)
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	d109      	bne.n	800e042 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800e02e:	f7ff ff77 	bl	800df20 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800e032:	4b66      	ldr	r3, [pc, #408]	; (800e1cc <_SendPacket+0x1c4>)
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2b01      	cmp	r3, #1
 800e038:	f040 809c 	bne.w	800e174 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800e03c:	e001      	b.n	800e042 <_SendPacket+0x3a>
    goto Send;
 800e03e:	bf00      	nop
 800e040:	e000      	b.n	800e044 <_SendPacket+0x3c>
Send:
 800e042:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2b1f      	cmp	r3, #31
 800e048:	d809      	bhi.n	800e05e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800e04a:	4b60      	ldr	r3, [pc, #384]	; (800e1cc <_SendPacket+0x1c4>)
 800e04c:	69da      	ldr	r2, [r3, #28]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	fa22 f303 	lsr.w	r3, r2, r3
 800e054:	f003 0301 	and.w	r3, r3, #1
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f040 808d 	bne.w	800e178 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b17      	cmp	r3, #23
 800e062:	d807      	bhi.n	800e074 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	3b01      	subs	r3, #1
 800e068:	60fb      	str	r3, [r7, #12]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	701a      	strb	r2, [r3, #0]
 800e072:	e03d      	b.n	800e0f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	2b7f      	cmp	r3, #127	; 0x7f
 800e080:	d912      	bls.n	800e0a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	09da      	lsrs	r2, r3, #7
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3b01      	subs	r3, #1
 800e08a:	60fb      	str	r3, [r7, #12]
 800e08c:	b2d2      	uxtb	r2, r2
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	b2db      	uxtb	r3, r3
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	3a01      	subs	r2, #1
 800e09a:	60fa      	str	r2, [r7, #12]
 800e09c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	701a      	strb	r2, [r3, #0]
 800e0a6:	e006      	b.n	800e0b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b7f      	cmp	r3, #127	; 0x7f
 800e0ba:	d912      	bls.n	800e0e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	09da      	lsrs	r2, r3, #7
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	60fb      	str	r3, [r7, #12]
 800e0c6:	b2d2      	uxtb	r2, r2
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	3a01      	subs	r2, #1
 800e0d4:	60fa      	str	r2, [r7, #12]
 800e0d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0da:	b2da      	uxtb	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	701a      	strb	r2, [r3, #0]
 800e0e0:	e006      	b.n	800e0f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	60fb      	str	r3, [r7, #12]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	b2da      	uxtb	r2, r3
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e0f0:	4b37      	ldr	r3, [pc, #220]	; (800e1d0 <_SendPacket+0x1c8>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800e0f6:	4b35      	ldr	r3, [pc, #212]	; (800e1cc <_SendPacket+0x1c4>)
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	69ba      	ldr	r2, [r7, #24]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	623b      	str	r3, [r7, #32]
 800e108:	e00b      	b.n	800e122 <_SendPacket+0x11a>
 800e10a:	6a3b      	ldr	r3, [r7, #32]
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e110:	1c59      	adds	r1, r3, #1
 800e112:	6279      	str	r1, [r7, #36]	; 0x24
 800e114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e118:	b2d2      	uxtb	r2, r2
 800e11a:	701a      	strb	r2, [r3, #0]
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	09db      	lsrs	r3, r3, #7
 800e120:	623b      	str	r3, [r7, #32]
 800e122:	6a3b      	ldr	r3, [r7, #32]
 800e124:	2b7f      	cmp	r3, #127	; 0x7f
 800e126:	d8f0      	bhi.n	800e10a <_SendPacket+0x102>
 800e128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12a:	1c5a      	adds	r2, r3, #1
 800e12c:	627a      	str	r2, [r7, #36]	; 0x24
 800e12e:	6a3a      	ldr	r2, [r7, #32]
 800e130:	b2d2      	uxtb	r2, r2
 800e132:	701a      	strb	r2, [r3, #0]
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800e138:	4b24      	ldr	r3, [pc, #144]	; (800e1cc <_SendPacket+0x1c4>)
 800e13a:	785b      	ldrb	r3, [r3, #1]
 800e13c:	4618      	mov	r0, r3
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	461a      	mov	r2, r3
 800e146:	68f9      	ldr	r1, [r7, #12]
 800e148:	f7f2 f862 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800e14c:	4603      	mov	r3, r0
 800e14e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800e150:	f7ff f982 	bl	800d458 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800e15a:	4a1c      	ldr	r2, [pc, #112]	; (800e1cc <_SendPacket+0x1c4>)
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	60d3      	str	r3, [r2, #12]
 800e160:	e00b      	b.n	800e17a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800e162:	4b1a      	ldr	r3, [pc, #104]	; (800e1cc <_SendPacket+0x1c4>)
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	3301      	adds	r3, #1
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	4b18      	ldr	r3, [pc, #96]	; (800e1cc <_SendPacket+0x1c4>)
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	e004      	b.n	800e17a <_SendPacket+0x172>
    goto SendDone;
 800e170:	bf00      	nop
 800e172:	e002      	b.n	800e17a <_SendPacket+0x172>
      goto SendDone;
 800e174:	bf00      	nop
 800e176:	e000      	b.n	800e17a <_SendPacket+0x172>
      goto SendDone;
 800e178:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800e17a:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <_SendPacket+0x1c4>)
 800e17c:	7e1b      	ldrb	r3, [r3, #24]
 800e17e:	4619      	mov	r1, r3
 800e180:	4a14      	ldr	r2, [pc, #80]	; (800e1d4 <_SendPacket+0x1cc>)
 800e182:	460b      	mov	r3, r1
 800e184:	005b      	lsls	r3, r3, #1
 800e186:	440b      	add	r3, r1
 800e188:	00db      	lsls	r3, r3, #3
 800e18a:	4413      	add	r3, r2
 800e18c:	336c      	adds	r3, #108	; 0x6c
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	4b0e      	ldr	r3, [pc, #56]	; (800e1cc <_SendPacket+0x1c4>)
 800e192:	7e1b      	ldrb	r3, [r3, #24]
 800e194:	4618      	mov	r0, r3
 800e196:	490f      	ldr	r1, [pc, #60]	; (800e1d4 <_SendPacket+0x1cc>)
 800e198:	4603      	mov	r3, r0
 800e19a:	005b      	lsls	r3, r3, #1
 800e19c:	4403      	add	r3, r0
 800e19e:	00db      	lsls	r3, r3, #3
 800e1a0:	440b      	add	r3, r1
 800e1a2:	3370      	adds	r3, #112	; 0x70
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d00b      	beq.n	800e1c2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800e1aa:	4b08      	ldr	r3, [pc, #32]	; (800e1cc <_SendPacket+0x1c4>)
 800e1ac:	789b      	ldrb	r3, [r3, #2]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d107      	bne.n	800e1c2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800e1b2:	4b06      	ldr	r3, [pc, #24]	; (800e1cc <_SendPacket+0x1c4>)
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800e1b8:	f7ff fe40 	bl	800de3c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800e1bc:	4b03      	ldr	r3, [pc, #12]	; (800e1cc <_SendPacket+0x1c4>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800e1c2:	bf00      	nop
 800e1c4:	3728      	adds	r7, #40	; 0x28
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	2001a928 	.word	0x2001a928
 800e1d0:	e0001004 	.word	0xe0001004
 800e1d4:	2001ac74 	.word	0x2001ac74

0800e1d8 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b08a      	sub	sp, #40	; 0x28
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800e1ea:	697b      	ldr	r3, [r7, #20]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	2b80      	cmp	r3, #128	; 0x80
 800e1f0:	d80a      	bhi.n	800e208 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	685b      	ldr	r3, [r3, #4]
 800e1f6:	1c59      	adds	r1, r3, #1
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	6051      	str	r1, [r2, #4]
 800e1fc:	78fa      	ldrb	r2, [r7, #3]
 800e1fe:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	1c5a      	adds	r2, r3, #1
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	691b      	ldr	r3, [r3, #16]
 800e20c:	2b80      	cmp	r3, #128	; 0x80
 800e20e:	d15a      	bne.n	800e2c6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	691a      	ldr	r2, [r3, #16]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	b2d2      	uxtb	r2, r2
 800e21a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	627b      	str	r3, [r7, #36]	; 0x24
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	623b      	str	r3, [r7, #32]
 800e230:	e00b      	b.n	800e24a <_StoreChar+0x72>
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	b2da      	uxtb	r2, r3
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	1c59      	adds	r1, r3, #1
 800e23a:	6279      	str	r1, [r7, #36]	; 0x24
 800e23c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e240:	b2d2      	uxtb	r2, r2
 800e242:	701a      	strb	r2, [r3, #0]
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	09db      	lsrs	r3, r3, #7
 800e248:	623b      	str	r3, [r7, #32]
 800e24a:	6a3b      	ldr	r3, [r7, #32]
 800e24c:	2b7f      	cmp	r3, #127	; 0x7f
 800e24e:	d8f0      	bhi.n	800e232 <_StoreChar+0x5a>
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	1c5a      	adds	r2, r3, #1
 800e254:	627a      	str	r2, [r7, #36]	; 0x24
 800e256:	6a3a      	ldr	r2, [r7, #32]
 800e258:	b2d2      	uxtb	r2, r2
 800e25a:	701a      	strb	r2, [r3, #0]
 800e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	61fb      	str	r3, [r7, #28]
 800e264:	2300      	movs	r3, #0
 800e266:	61bb      	str	r3, [r7, #24]
 800e268:	e00b      	b.n	800e282 <_StoreChar+0xaa>
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	b2da      	uxtb	r2, r3
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	1c59      	adds	r1, r3, #1
 800e272:	61f9      	str	r1, [r7, #28]
 800e274:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e278:	b2d2      	uxtb	r2, r2
 800e27a:	701a      	strb	r2, [r3, #0]
 800e27c:	69bb      	ldr	r3, [r7, #24]
 800e27e:	09db      	lsrs	r3, r3, #7
 800e280:	61bb      	str	r3, [r7, #24]
 800e282:	69bb      	ldr	r3, [r7, #24]
 800e284:	2b7f      	cmp	r3, #127	; 0x7f
 800e286:	d8f0      	bhi.n	800e26a <_StoreChar+0x92>
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	1c5a      	adds	r2, r3, #1
 800e28c:	61fa      	str	r2, [r7, #28]
 800e28e:	69ba      	ldr	r2, [r7, #24]
 800e290:	b2d2      	uxtb	r2, r2
 800e292:	701a      	strb	r2, [r3, #0]
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	689b      	ldr	r3, [r3, #8]
 800e29c:	221a      	movs	r2, #26
 800e29e:	6939      	ldr	r1, [r7, #16]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7ff feb1 	bl	800e008 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff fdba 	bl	800de24 <_PreparePacket>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	689b      	ldr	r3, [r3, #8]
 800e2ba:	1c5a      	adds	r2, r3, #1
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	611a      	str	r2, [r3, #16]
  }
}
 800e2c6:	bf00      	nop
 800e2c8:	3728      	adds	r7, #40	; 0x28
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
	...

0800e2d0 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b08a      	sub	sp, #40	; 0x28
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
 800e2dc:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800e2ea:	e007      	b.n	800e2fc <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800e2ec:	6a3a      	ldr	r2, [r7, #32]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2f4:	623b      	str	r3, [r7, #32]
    Width++;
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800e2fc:	6a3a      	ldr	r2, [r7, #32]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	429a      	cmp	r2, r3
 800e302:	d2f3      	bcs.n	800e2ec <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	69fb      	ldr	r3, [r7, #28]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d901      	bls.n	800e310 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800e310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e312:	f003 0301 	and.w	r3, r3, #1
 800e316:	2b00      	cmp	r3, #0
 800e318:	d11f      	bne.n	800e35a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800e31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d01c      	beq.n	800e35a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800e320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e322:	f003 0302 	and.w	r3, r3, #2
 800e326:	2b00      	cmp	r3, #0
 800e328:	d005      	beq.n	800e336 <_PrintUnsigned+0x66>
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d102      	bne.n	800e336 <_PrintUnsigned+0x66>
        c = '0';
 800e330:	2330      	movs	r3, #48	; 0x30
 800e332:	76fb      	strb	r3, [r7, #27]
 800e334:	e001      	b.n	800e33a <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800e336:	2320      	movs	r3, #32
 800e338:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800e33a:	e007      	b.n	800e34c <_PrintUnsigned+0x7c>
        FieldWidth--;
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	3b01      	subs	r3, #1
 800e340:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800e342:	7efb      	ldrb	r3, [r7, #27]
 800e344:	4619      	mov	r1, r3
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f7ff ff46 	bl	800e1d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800e34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d003      	beq.n	800e35a <_PrintUnsigned+0x8a>
 800e352:	69fa      	ldr	r2, [r7, #28]
 800e354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e356:	429a      	cmp	r2, r3
 800e358:	d3f0      	bcc.n	800e33c <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d903      	bls.n	800e368 <_PrintUnsigned+0x98>
      NumDigits--;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	3b01      	subs	r3, #1
 800e364:	603b      	str	r3, [r7, #0]
 800e366:	e009      	b.n	800e37c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800e368:	68ba      	ldr	r2, [r7, #8]
 800e36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e370:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	429a      	cmp	r2, r3
 800e378:	d200      	bcs.n	800e37c <_PrintUnsigned+0xac>
        break;
 800e37a:	e005      	b.n	800e388 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800e37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	fb02 f303 	mul.w	r3, r2, r3
 800e384:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800e386:	e7e8      	b.n	800e35a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e390:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e396:	fb02 f303 	mul.w	r3, r2, r3
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	1ad3      	subs	r3, r2, r3
 800e39e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800e3a0:	4a15      	ldr	r2, [pc, #84]	; (800e3f8 <_PrintUnsigned+0x128>)
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	4413      	add	r3, r2
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f7ff ff14 	bl	800e1d8 <_StoreChar>
    Digit /= Base;
 800e3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b8:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d1e3      	bne.n	800e388 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800e3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c2:	f003 0301 	and.w	r3, r3, #1
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d011      	beq.n	800e3ee <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800e3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00e      	beq.n	800e3ee <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800e3d0:	e006      	b.n	800e3e0 <_PrintUnsigned+0x110>
        FieldWidth--;
 800e3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3d4:	3b01      	subs	r3, #1
 800e3d6:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800e3d8:	2120      	movs	r1, #32
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7ff fefc 	bl	800e1d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800e3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d003      	beq.n	800e3ee <_PrintUnsigned+0x11e>
 800e3e6:	69fa      	ldr	r2, [r7, #28]
 800e3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d3f1      	bcc.n	800e3d2 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800e3ee:	bf00      	nop
 800e3f0:	3728      	adds	r7, #40	; 0x28
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	08012ea0 	.word	0x08012ea0

0800e3fc <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b088      	sub	sp, #32
 800e400:	af02      	add	r7, sp, #8
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
 800e408:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	bfb8      	it	lt
 800e410:	425b      	neglt	r3, r3
 800e412:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800e414:	2301      	movs	r3, #1
 800e416:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800e418:	e007      	b.n	800e42a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	693a      	ldr	r2, [r7, #16]
 800e41e:	fb92 f3f3 	sdiv	r3, r2, r3
 800e422:	613b      	str	r3, [r7, #16]
    Width++;
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	3301      	adds	r3, #1
 800e428:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	429a      	cmp	r2, r3
 800e430:	daf3      	bge.n	800e41a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	429a      	cmp	r2, r3
 800e438:	d901      	bls.n	800e43e <_PrintInt+0x42>
    Width = NumDigits;
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800e43e:	6a3b      	ldr	r3, [r7, #32]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00a      	beq.n	800e45a <_PrintInt+0x5e>
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	2b00      	cmp	r3, #0
 800e448:	db04      	blt.n	800e454 <_PrintInt+0x58>
 800e44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <_PrintInt+0x5e>
    FieldWidth--;
 800e454:	6a3b      	ldr	r3, [r7, #32]
 800e456:	3b01      	subs	r3, #1
 800e458:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800e45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45c:	f003 0302 	and.w	r3, r3, #2
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <_PrintInt+0x6e>
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d016      	beq.n	800e498 <_PrintInt+0x9c>
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	f003 0301 	and.w	r3, r3, #1
 800e470:	2b00      	cmp	r3, #0
 800e472:	d111      	bne.n	800e498 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800e474:	6a3b      	ldr	r3, [r7, #32]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00e      	beq.n	800e498 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800e47a:	e006      	b.n	800e48a <_PrintInt+0x8e>
        FieldWidth--;
 800e47c:	6a3b      	ldr	r3, [r7, #32]
 800e47e:	3b01      	subs	r3, #1
 800e480:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800e482:	2120      	movs	r1, #32
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7ff fea7 	bl	800e1d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d003      	beq.n	800e498 <_PrintInt+0x9c>
 800e490:	697a      	ldr	r2, [r7, #20]
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	429a      	cmp	r2, r3
 800e496:	d3f1      	bcc.n	800e47c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	da07      	bge.n	800e4ae <_PrintInt+0xb2>
    v = -v;
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	425b      	negs	r3, r3
 800e4a2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800e4a4:	212d      	movs	r1, #45	; 0x2d
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f7ff fe96 	bl	800e1d8 <_StoreChar>
 800e4ac:	e008      	b.n	800e4c0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800e4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b0:	f003 0304 	and.w	r3, r3, #4
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d003      	beq.n	800e4c0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800e4b8:	212b      	movs	r1, #43	; 0x2b
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7ff fe8c 	bl	800e1d8 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c2:	f003 0302 	and.w	r3, r3, #2
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d019      	beq.n	800e4fe <_PrintInt+0x102>
 800e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d114      	bne.n	800e4fe <_PrintInt+0x102>
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d111      	bne.n	800e4fe <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800e4da:	6a3b      	ldr	r3, [r7, #32]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00e      	beq.n	800e4fe <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800e4e0:	e006      	b.n	800e4f0 <_PrintInt+0xf4>
        FieldWidth--;
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800e4e8:	2130      	movs	r1, #48	; 0x30
 800e4ea:	68f8      	ldr	r0, [r7, #12]
 800e4ec:	f7ff fe74 	bl	800e1d8 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800e4f0:	6a3b      	ldr	r3, [r7, #32]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d003      	beq.n	800e4fe <_PrintInt+0x102>
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	6a3b      	ldr	r3, [r7, #32]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d3f1      	bcc.n	800e4e2 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800e4fe:	68b9      	ldr	r1, [r7, #8]
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	9301      	str	r3, [sp, #4]
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	9300      	str	r3, [sp, #0]
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7ff fedf 	bl	800e2d0 <_PrintUnsigned>
}
 800e512:	bf00      	nop
 800e514:	3718      	adds	r7, #24
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
	...

0800e51c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b098      	sub	sp, #96	; 0x60
 800e520:	af02      	add	r7, sp, #8
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800e528:	f3ef 8311 	mrs	r3, BASEPRI
 800e52c:	f04f 0120 	mov.w	r1, #32
 800e530:	f381 8811 	msr	BASEPRI, r1
 800e534:	633b      	str	r3, [r7, #48]	; 0x30
 800e536:	48b7      	ldr	r0, [pc, #732]	; (800e814 <_VPrintTarget+0x2f8>)
 800e538:	f7ff fc74 	bl	800de24 <_PreparePacket>
 800e53c:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800e53e:	4bb5      	ldr	r3, [pc, #724]	; (800e814 <_VPrintTarget+0x2f8>)
 800e540:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800e542:	2300      	movs	r3, #0
 800e544:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800e546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e548:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800e54a:	69fb      	ldr	r3, [r7, #28]
 800e54c:	3301      	adds	r3, #1
 800e54e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	3301      	adds	r3, #1
 800e560:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800e562:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8183 	beq.w	800e872 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800e56c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e570:	2b25      	cmp	r3, #37	; 0x25
 800e572:	f040 8170 	bne.w	800e856 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800e576:	2300      	movs	r3, #0
 800e578:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800e57a:	2301      	movs	r3, #1
 800e57c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800e586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e58a:	3b23      	subs	r3, #35	; 0x23
 800e58c:	2b0d      	cmp	r3, #13
 800e58e:	d83f      	bhi.n	800e610 <_VPrintTarget+0xf4>
 800e590:	a201      	add	r2, pc, #4	; (adr r2, 800e598 <_VPrintTarget+0x7c>)
 800e592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e596:	bf00      	nop
 800e598:	0800e601 	.word	0x0800e601
 800e59c:	0800e611 	.word	0x0800e611
 800e5a0:	0800e611 	.word	0x0800e611
 800e5a4:	0800e611 	.word	0x0800e611
 800e5a8:	0800e611 	.word	0x0800e611
 800e5ac:	0800e611 	.word	0x0800e611
 800e5b0:	0800e611 	.word	0x0800e611
 800e5b4:	0800e611 	.word	0x0800e611
 800e5b8:	0800e5f1 	.word	0x0800e5f1
 800e5bc:	0800e611 	.word	0x0800e611
 800e5c0:	0800e5d1 	.word	0x0800e5d1
 800e5c4:	0800e611 	.word	0x0800e611
 800e5c8:	0800e611 	.word	0x0800e611
 800e5cc:	0800e5e1 	.word	0x0800e5e1
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800e5d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5d2:	f043 0301 	orr.w	r3, r3, #1
 800e5d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	60fb      	str	r3, [r7, #12]
 800e5de:	e01a      	b.n	800e616 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800e5e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5e2:	f043 0302 	orr.w	r3, r3, #2
 800e5e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	60fb      	str	r3, [r7, #12]
 800e5ee:	e012      	b.n	800e616 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800e5f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5f2:	f043 0304 	orr.w	r3, r3, #4
 800e5f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	60fb      	str	r3, [r7, #12]
 800e5fe:	e00a      	b.n	800e616 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800e600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e602:	f043 0308 	orr.w	r3, r3, #8
 800e606:	64bb      	str	r3, [r7, #72]	; 0x48
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	3301      	adds	r3, #1
 800e60c:	60fb      	str	r3, [r7, #12]
 800e60e:	e002      	b.n	800e616 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800e610:	2300      	movs	r3, #0
 800e612:	653b      	str	r3, [r7, #80]	; 0x50
 800e614:	bf00      	nop
        }
      } while (v);
 800e616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1b0      	bne.n	800e57e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800e61c:	2300      	movs	r3, #0
 800e61e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800e628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e62c:	2b2f      	cmp	r3, #47	; 0x2f
 800e62e:	d912      	bls.n	800e656 <_VPrintTarget+0x13a>
 800e630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e634:	2b39      	cmp	r3, #57	; 0x39
 800e636:	d80e      	bhi.n	800e656 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	3301      	adds	r3, #1
 800e63c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800e63e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e640:	4613      	mov	r3, r2
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	461a      	mov	r2, r3
 800e64a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e64e:	4413      	add	r3, r2
 800e650:	3b30      	subs	r3, #48	; 0x30
 800e652:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800e654:	e7e4      	b.n	800e620 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800e656:	2300      	movs	r3, #0
 800e658:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800e662:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e666:	2b2e      	cmp	r3, #46	; 0x2e
 800e668:	d11d      	bne.n	800e6a6 <_VPrintTarget+0x18a>
        sFormat++;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	3301      	adds	r3, #1
 800e66e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	781b      	ldrb	r3, [r3, #0]
 800e674:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800e678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e67c:	2b2f      	cmp	r3, #47	; 0x2f
 800e67e:	d912      	bls.n	800e6a6 <_VPrintTarget+0x18a>
 800e680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e684:	2b39      	cmp	r3, #57	; 0x39
 800e686:	d80e      	bhi.n	800e6a6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	3301      	adds	r3, #1
 800e68c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800e68e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e690:	4613      	mov	r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	005b      	lsls	r3, r3, #1
 800e698:	461a      	mov	r2, r3
 800e69a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e69e:	4413      	add	r3, r2
 800e6a0:	3b30      	subs	r3, #48	; 0x30
 800e6a2:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800e6a4:	e7e4      	b.n	800e670 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800e6ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6b2:	2b6c      	cmp	r3, #108	; 0x6c
 800e6b4:	d003      	beq.n	800e6be <_VPrintTarget+0x1a2>
 800e6b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6ba:	2b68      	cmp	r3, #104	; 0x68
 800e6bc:	d107      	bne.n	800e6ce <_VPrintTarget+0x1b2>
          c = *sFormat;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800e6cc:	e7ef      	b.n	800e6ae <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800e6ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e6d2:	2b25      	cmp	r3, #37	; 0x25
 800e6d4:	f000 80b3 	beq.w	800e83e <_VPrintTarget+0x322>
 800e6d8:	2b25      	cmp	r3, #37	; 0x25
 800e6da:	f2c0 80b7 	blt.w	800e84c <_VPrintTarget+0x330>
 800e6de:	2b78      	cmp	r3, #120	; 0x78
 800e6e0:	f300 80b4 	bgt.w	800e84c <_VPrintTarget+0x330>
 800e6e4:	2b58      	cmp	r3, #88	; 0x58
 800e6e6:	f2c0 80b1 	blt.w	800e84c <_VPrintTarget+0x330>
 800e6ea:	3b58      	subs	r3, #88	; 0x58
 800e6ec:	2b20      	cmp	r3, #32
 800e6ee:	f200 80ad 	bhi.w	800e84c <_VPrintTarget+0x330>
 800e6f2:	a201      	add	r2, pc, #4	; (adr r2, 800e6f8 <_VPrintTarget+0x1dc>)
 800e6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f8:	0800e7ef 	.word	0x0800e7ef
 800e6fc:	0800e84d 	.word	0x0800e84d
 800e700:	0800e84d 	.word	0x0800e84d
 800e704:	0800e84d 	.word	0x0800e84d
 800e708:	0800e84d 	.word	0x0800e84d
 800e70c:	0800e84d 	.word	0x0800e84d
 800e710:	0800e84d 	.word	0x0800e84d
 800e714:	0800e84d 	.word	0x0800e84d
 800e718:	0800e84d 	.word	0x0800e84d
 800e71c:	0800e84d 	.word	0x0800e84d
 800e720:	0800e84d 	.word	0x0800e84d
 800e724:	0800e77d 	.word	0x0800e77d
 800e728:	0800e7a3 	.word	0x0800e7a3
 800e72c:	0800e84d 	.word	0x0800e84d
 800e730:	0800e84d 	.word	0x0800e84d
 800e734:	0800e84d 	.word	0x0800e84d
 800e738:	0800e84d 	.word	0x0800e84d
 800e73c:	0800e84d 	.word	0x0800e84d
 800e740:	0800e84d 	.word	0x0800e84d
 800e744:	0800e84d 	.word	0x0800e84d
 800e748:	0800e84d 	.word	0x0800e84d
 800e74c:	0800e84d 	.word	0x0800e84d
 800e750:	0800e84d 	.word	0x0800e84d
 800e754:	0800e84d 	.word	0x0800e84d
 800e758:	0800e819 	.word	0x0800e819
 800e75c:	0800e84d 	.word	0x0800e84d
 800e760:	0800e84d 	.word	0x0800e84d
 800e764:	0800e84d 	.word	0x0800e84d
 800e768:	0800e84d 	.word	0x0800e84d
 800e76c:	0800e7c9 	.word	0x0800e7c9
 800e770:	0800e84d 	.word	0x0800e84d
 800e774:	0800e84d 	.word	0x0800e84d
 800e778:	0800e7ef 	.word	0x0800e7ef
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	1d19      	adds	r1, r3, #4
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	6011      	str	r1, [r2, #0]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800e78a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e78c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800e790:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800e794:	f107 0314 	add.w	r3, r7, #20
 800e798:	4611      	mov	r1, r2
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7ff fd1c 	bl	800e1d8 <_StoreChar>
        break;
 800e7a0:	e055      	b.n	800e84e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	1d19      	adds	r1, r3, #4
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	6011      	str	r1, [r2, #0]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800e7b0:	f107 0014 	add.w	r0, r7, #20
 800e7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7b6:	9301      	str	r3, [sp, #4]
 800e7b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7ba:	9300      	str	r3, [sp, #0]
 800e7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7be:	220a      	movs	r2, #10
 800e7c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7c2:	f7ff fe1b 	bl	800e3fc <_PrintInt>
        break;
 800e7c6:	e042      	b.n	800e84e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	1d19      	adds	r1, r3, #4
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	6011      	str	r1, [r2, #0]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800e7d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7d8:	f107 0014 	add.w	r0, r7, #20
 800e7dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7de:	9301      	str	r3, [sp, #4]
 800e7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e6:	220a      	movs	r2, #10
 800e7e8:	f7ff fd72 	bl	800e2d0 <_PrintUnsigned>
        break;
 800e7ec:	e02f      	b.n	800e84e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	1d19      	adds	r1, r3, #4
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	6011      	str	r1, [r2, #0]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800e7fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7fe:	f107 0014 	add.w	r0, r7, #20
 800e802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e804:	9301      	str	r3, [sp, #4]
 800e806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e80c:	2210      	movs	r2, #16
 800e80e:	f7ff fd5f 	bl	800e2d0 <_PrintUnsigned>
        break;
 800e812:	e01c      	b.n	800e84e <_VPrintTarget+0x332>
 800e814:	2001a958 	.word	0x2001a958
      case 'p':
        v = va_arg(*pParamList, int);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	1d19      	adds	r1, r3, #4
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	6011      	str	r1, [r2, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800e826:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e828:	f107 0014 	add.w	r0, r7, #20
 800e82c:	2300      	movs	r3, #0
 800e82e:	9301      	str	r3, [sp, #4]
 800e830:	2308      	movs	r3, #8
 800e832:	9300      	str	r3, [sp, #0]
 800e834:	2308      	movs	r3, #8
 800e836:	2210      	movs	r2, #16
 800e838:	f7ff fd4a 	bl	800e2d0 <_PrintUnsigned>
        break;
 800e83c:	e007      	b.n	800e84e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800e83e:	f107 0314 	add.w	r3, r7, #20
 800e842:	2125      	movs	r1, #37	; 0x25
 800e844:	4618      	mov	r0, r3
 800e846:	f7ff fcc7 	bl	800e1d8 <_StoreChar>
        break;
 800e84a:	e000      	b.n	800e84e <_VPrintTarget+0x332>
      default:
        break;
 800e84c:	bf00      	nop
      }
      sFormat++;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	3301      	adds	r3, #1
 800e852:	60fb      	str	r3, [r7, #12]
 800e854:	e007      	b.n	800e866 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800e856:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e85a:	f107 0314 	add.w	r3, r7, #20
 800e85e:	4611      	mov	r1, r2
 800e860:	4618      	mov	r0, r3
 800e862:	f7ff fcb9 	bl	800e1d8 <_StoreChar>
    }
  } while (*sFormat);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f47f ae72 	bne.w	800e554 <_VPrintTarget+0x38>
 800e870:	e000      	b.n	800e874 <_VPrintTarget+0x358>
      break;
 800e872:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800e874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e876:	2b00      	cmp	r3, #0
 800e878:	d041      	beq.n	800e8fe <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800e87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	b2d2      	uxtb	r2, r2
 800e880:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	643b      	str	r3, [r7, #64]	; 0x40
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e88a:	e00b      	b.n	800e8a4 <_VPrintTarget+0x388>
 800e88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e88e:	b2da      	uxtb	r2, r3
 800e890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e892:	1c59      	adds	r1, r3, #1
 800e894:	6439      	str	r1, [r7, #64]	; 0x40
 800e896:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e89a:	b2d2      	uxtb	r2, r2
 800e89c:	701a      	strb	r2, [r3, #0]
 800e89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a0:	09db      	lsrs	r3, r3, #7
 800e8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8a6:	2b7f      	cmp	r3, #127	; 0x7f
 800e8a8:	d8f0      	bhi.n	800e88c <_VPrintTarget+0x370>
 800e8aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ac:	1c5a      	adds	r2, r3, #1
 800e8ae:	643a      	str	r2, [r7, #64]	; 0x40
 800e8b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8b2:	b2d2      	uxtb	r2, r2
 800e8b4:	701a      	strb	r2, [r3, #0]
 800e8b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8b8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8be:	2300      	movs	r3, #0
 800e8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8c2:	e00b      	b.n	800e8dc <_VPrintTarget+0x3c0>
 800e8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c6:	b2da      	uxtb	r2, r3
 800e8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ca:	1c59      	adds	r1, r3, #1
 800e8cc:	63b9      	str	r1, [r7, #56]	; 0x38
 800e8ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e8d2:	b2d2      	uxtb	r2, r2
 800e8d4:	701a      	strb	r2, [r3, #0]
 800e8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d8:	09db      	lsrs	r3, r3, #7
 800e8da:	637b      	str	r3, [r7, #52]	; 0x34
 800e8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8de:	2b7f      	cmp	r3, #127	; 0x7f
 800e8e0:	d8f0      	bhi.n	800e8c4 <_VPrintTarget+0x3a8>
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8e4:	1c5a      	adds	r2, r3, #1
 800e8e6:	63ba      	str	r2, [r7, #56]	; 0x38
 800e8e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8ea:	b2d2      	uxtb	r2, r2
 800e8ec:	701a      	strb	r2, [r3, #0]
 800e8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	69b9      	ldr	r1, [r7, #24]
 800e8f6:	221a      	movs	r2, #26
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7ff fb85 	bl	800e008 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800e904:	bf00      	nop
 800e906:	3758      	adds	r7, #88	; 0x58
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	af02      	add	r7, sp, #8
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
 800e918:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e91a:	2300      	movs	r3, #0
 800e91c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e920:	4917      	ldr	r1, [pc, #92]	; (800e980 <SEGGER_SYSVIEW_Init+0x74>)
 800e922:	4818      	ldr	r0, [pc, #96]	; (800e984 <SEGGER_SYSVIEW_Init+0x78>)
 800e924:	f7ff f95e 	bl	800dbe4 <SEGGER_RTT_AllocUpBuffer>
 800e928:	4603      	mov	r3, r0
 800e92a:	b2da      	uxtb	r2, r3
 800e92c:	4b16      	ldr	r3, [pc, #88]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e92e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800e930:	4b15      	ldr	r3, [pc, #84]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e932:	785a      	ldrb	r2, [r3, #1]
 800e934:	4b14      	ldr	r3, [pc, #80]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e936:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800e938:	4b13      	ldr	r3, [pc, #76]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e93a:	7e1b      	ldrb	r3, [r3, #24]
 800e93c:	4618      	mov	r0, r3
 800e93e:	2300      	movs	r3, #0
 800e940:	9300      	str	r3, [sp, #0]
 800e942:	2308      	movs	r3, #8
 800e944:	4a11      	ldr	r2, [pc, #68]	; (800e98c <SEGGER_SYSVIEW_Init+0x80>)
 800e946:	490f      	ldr	r1, [pc, #60]	; (800e984 <SEGGER_SYSVIEW_Init+0x78>)
 800e948:	f7ff f9d0 	bl	800dcec <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800e94c:	4b0e      	ldr	r3, [pc, #56]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e94e:	2200      	movs	r2, #0
 800e950:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800e952:	4b0f      	ldr	r3, [pc, #60]	; (800e990 <SEGGER_SYSVIEW_Init+0x84>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a0c      	ldr	r2, [pc, #48]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e958:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800e95a:	4a0b      	ldr	r2, [pc, #44]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800e960:	4a09      	ldr	r2, [pc, #36]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800e966:	4a08      	ldr	r2, [pc, #32]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800e96c:	4a06      	ldr	r2, [pc, #24]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800e972:	4b05      	ldr	r3, [pc, #20]	; (800e988 <SEGGER_SYSVIEW_Init+0x7c>)
 800e974:	2200      	movs	r2, #0
 800e976:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800e978:	bf00      	nop
 800e97a:	3710      	adds	r7, #16
 800e97c:	46bd      	mov	sp, r7
 800e97e:	bd80      	pop	{r7, pc}
 800e980:	20019920 	.word	0x20019920
 800e984:	08012e68 	.word	0x08012e68
 800e988:	2001a928 	.word	0x2001a928
 800e98c:	2001a920 	.word	0x2001a920
 800e990:	e0001004 	.word	0xe0001004

0800e994 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800e99c:	4a04      	ldr	r2, [pc, #16]	; (800e9b0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6113      	str	r3, [r2, #16]
}
 800e9a2:	bf00      	nop
 800e9a4:	370c      	adds	r7, #12
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	2001a928 	.word	0x2001a928

0800e9b4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800e9bc:	f3ef 8311 	mrs	r3, BASEPRI
 800e9c0:	f04f 0120 	mov.w	r1, #32
 800e9c4:	f381 8811 	msr	BASEPRI, r1
 800e9c8:	60fb      	str	r3, [r7, #12]
 800e9ca:	4808      	ldr	r0, [pc, #32]	; (800e9ec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800e9cc:	f7ff fa2a 	bl	800de24 <_PreparePacket>
 800e9d0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	68b9      	ldr	r1, [r7, #8]
 800e9d6:	68b8      	ldr	r0, [r7, #8]
 800e9d8:	f7ff fb16 	bl	800e008 <_SendPacket>
  RECORD_END();
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	f383 8811 	msr	BASEPRI, r3
}
 800e9e2:	bf00      	nop
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	2001a958 	.word	0x2001a958

0800e9f0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b088      	sub	sp, #32
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800e9fa:	f3ef 8311 	mrs	r3, BASEPRI
 800e9fe:	f04f 0120 	mov.w	r1, #32
 800ea02:	f381 8811 	msr	BASEPRI, r1
 800ea06:	617b      	str	r3, [r7, #20]
 800ea08:	4816      	ldr	r0, [pc, #88]	; (800ea64 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800ea0a:	f7ff fa0b 	bl	800de24 <_PreparePacket>
 800ea0e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	61fb      	str	r3, [r7, #28]
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	61bb      	str	r3, [r7, #24]
 800ea1c:	e00b      	b.n	800ea36 <SEGGER_SYSVIEW_RecordU32+0x46>
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	b2da      	uxtb	r2, r3
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	1c59      	adds	r1, r3, #1
 800ea26:	61f9      	str	r1, [r7, #28]
 800ea28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ea2c:	b2d2      	uxtb	r2, r2
 800ea2e:	701a      	strb	r2, [r3, #0]
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	09db      	lsrs	r3, r3, #7
 800ea34:	61bb      	str	r3, [r7, #24]
 800ea36:	69bb      	ldr	r3, [r7, #24]
 800ea38:	2b7f      	cmp	r3, #127	; 0x7f
 800ea3a:	d8f0      	bhi.n	800ea1e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	1c5a      	adds	r2, r3, #1
 800ea40:	61fa      	str	r2, [r7, #28]
 800ea42:	69ba      	ldr	r2, [r7, #24]
 800ea44:	b2d2      	uxtb	r2, r2
 800ea46:	701a      	strb	r2, [r3, #0]
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	68f9      	ldr	r1, [r7, #12]
 800ea50:	6938      	ldr	r0, [r7, #16]
 800ea52:	f7ff fad9 	bl	800e008 <_SendPacket>
  RECORD_END();
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f383 8811 	msr	BASEPRI, r3
}
 800ea5c:	bf00      	nop
 800ea5e:	3720      	adds	r7, #32
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	2001a958 	.word	0x2001a958

0800ea68 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b08c      	sub	sp, #48	; 0x30
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800ea74:	f3ef 8311 	mrs	r3, BASEPRI
 800ea78:	f04f 0120 	mov.w	r1, #32
 800ea7c:	f381 8811 	msr	BASEPRI, r1
 800ea80:	61fb      	str	r3, [r7, #28]
 800ea82:	4825      	ldr	r0, [pc, #148]	; (800eb18 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800ea84:	f7ff f9ce 	bl	800de24 <_PreparePacket>
 800ea88:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ea8a:	69bb      	ldr	r3, [r7, #24]
 800ea8c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	62bb      	str	r3, [r7, #40]	; 0x28
 800ea96:	e00b      	b.n	800eab0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	b2da      	uxtb	r2, r3
 800ea9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9e:	1c59      	adds	r1, r3, #1
 800eaa0:	62f9      	str	r1, [r7, #44]	; 0x2c
 800eaa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eaa6:	b2d2      	uxtb	r2, r2
 800eaa8:	701a      	strb	r2, [r3, #0]
 800eaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaac:	09db      	lsrs	r3, r3, #7
 800eaae:	62bb      	str	r3, [r7, #40]	; 0x28
 800eab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab2:	2b7f      	cmp	r3, #127	; 0x7f
 800eab4:	d8f0      	bhi.n	800ea98 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800eab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab8:	1c5a      	adds	r2, r3, #1
 800eaba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eabc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eabe:	b2d2      	uxtb	r2, r2
 800eac0:	701a      	strb	r2, [r3, #0]
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	627b      	str	r3, [r7, #36]	; 0x24
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	623b      	str	r3, [r7, #32]
 800eace:	e00b      	b.n	800eae8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800ead0:	6a3b      	ldr	r3, [r7, #32]
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	1c59      	adds	r1, r3, #1
 800ead8:	6279      	str	r1, [r7, #36]	; 0x24
 800eada:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eade:	b2d2      	uxtb	r2, r2
 800eae0:	701a      	strb	r2, [r3, #0]
 800eae2:	6a3b      	ldr	r3, [r7, #32]
 800eae4:	09db      	lsrs	r3, r3, #7
 800eae6:	623b      	str	r3, [r7, #32]
 800eae8:	6a3b      	ldr	r3, [r7, #32]
 800eaea:	2b7f      	cmp	r3, #127	; 0x7f
 800eaec:	d8f0      	bhi.n	800ead0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	1c5a      	adds	r2, r3, #1
 800eaf2:	627a      	str	r2, [r7, #36]	; 0x24
 800eaf4:	6a3a      	ldr	r2, [r7, #32]
 800eaf6:	b2d2      	uxtb	r2, r2
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800eafe:	68fa      	ldr	r2, [r7, #12]
 800eb00:	6979      	ldr	r1, [r7, #20]
 800eb02:	69b8      	ldr	r0, [r7, #24]
 800eb04:	f7ff fa80 	bl	800e008 <_SendPacket>
  RECORD_END();
 800eb08:	69fb      	ldr	r3, [r7, #28]
 800eb0a:	f383 8811 	msr	BASEPRI, r3
}
 800eb0e:	bf00      	nop
 800eb10:	3730      	adds	r7, #48	; 0x30
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	2001a958 	.word	0x2001a958

0800eb1c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b08e      	sub	sp, #56	; 0x38
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
 800eb28:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800eb2a:	f3ef 8311 	mrs	r3, BASEPRI
 800eb2e:	f04f 0120 	mov.w	r1, #32
 800eb32:	f381 8811 	msr	BASEPRI, r1
 800eb36:	61fb      	str	r3, [r7, #28]
 800eb38:	4832      	ldr	r0, [pc, #200]	; (800ec04 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800eb3a:	f7ff f973 	bl	800de24 <_PreparePacket>
 800eb3e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	637b      	str	r3, [r7, #52]	; 0x34
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	633b      	str	r3, [r7, #48]	; 0x30
 800eb4c:	e00b      	b.n	800eb66 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb50:	b2da      	uxtb	r2, r3
 800eb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb54:	1c59      	adds	r1, r3, #1
 800eb56:	6379      	str	r1, [r7, #52]	; 0x34
 800eb58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eb5c:	b2d2      	uxtb	r2, r2
 800eb5e:	701a      	strb	r2, [r3, #0]
 800eb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb62:	09db      	lsrs	r3, r3, #7
 800eb64:	633b      	str	r3, [r7, #48]	; 0x30
 800eb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb68:	2b7f      	cmp	r3, #127	; 0x7f
 800eb6a:	d8f0      	bhi.n	800eb4e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800eb6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	637a      	str	r2, [r7, #52]	; 0x34
 800eb72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb74:	b2d2      	uxtb	r2, r2
 800eb76:	701a      	strb	r2, [r3, #0]
 800eb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb84:	e00b      	b.n	800eb9e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800eb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	1c59      	adds	r1, r3, #1
 800eb8e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800eb90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eb94:	b2d2      	uxtb	r2, r2
 800eb96:	701a      	strb	r2, [r3, #0]
 800eb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9a:	09db      	lsrs	r3, r3, #7
 800eb9c:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba0:	2b7f      	cmp	r3, #127	; 0x7f
 800eba2:	d8f0      	bhi.n	800eb86 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800eba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba6:	1c5a      	adds	r2, r3, #1
 800eba8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ebaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebac:	b2d2      	uxtb	r2, r2
 800ebae:	701a      	strb	r2, [r3, #0]
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	627b      	str	r3, [r7, #36]	; 0x24
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	623b      	str	r3, [r7, #32]
 800ebbc:	e00b      	b.n	800ebd6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800ebbe:	6a3b      	ldr	r3, [r7, #32]
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	1c59      	adds	r1, r3, #1
 800ebc6:	6279      	str	r1, [r7, #36]	; 0x24
 800ebc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ebcc:	b2d2      	uxtb	r2, r2
 800ebce:	701a      	strb	r2, [r3, #0]
 800ebd0:	6a3b      	ldr	r3, [r7, #32]
 800ebd2:	09db      	lsrs	r3, r3, #7
 800ebd4:	623b      	str	r3, [r7, #32]
 800ebd6:	6a3b      	ldr	r3, [r7, #32]
 800ebd8:	2b7f      	cmp	r3, #127	; 0x7f
 800ebda:	d8f0      	bhi.n	800ebbe <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	1c5a      	adds	r2, r3, #1
 800ebe0:	627a      	str	r2, [r7, #36]	; 0x24
 800ebe2:	6a3a      	ldr	r2, [r7, #32]
 800ebe4:	b2d2      	uxtb	r2, r2
 800ebe6:	701a      	strb	r2, [r3, #0]
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebea:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	6979      	ldr	r1, [r7, #20]
 800ebf0:	69b8      	ldr	r0, [r7, #24]
 800ebf2:	f7ff fa09 	bl	800e008 <_SendPacket>
  RECORD_END();
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	f383 8811 	msr	BASEPRI, r3
}
 800ebfc:	bf00      	nop
 800ebfe:	3738      	adds	r7, #56	; 0x38
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	2001a958 	.word	0x2001a958

0800ec08 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b090      	sub	sp, #64	; 0x40
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	60f8      	str	r0, [r7, #12]
 800ec10:	60b9      	str	r1, [r7, #8]
 800ec12:	607a      	str	r2, [r7, #4]
 800ec14:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ec16:	f3ef 8311 	mrs	r3, BASEPRI
 800ec1a:	f04f 0120 	mov.w	r1, #32
 800ec1e:	f381 8811 	msr	BASEPRI, r1
 800ec22:	61fb      	str	r3, [r7, #28]
 800ec24:	4840      	ldr	r0, [pc, #256]	; (800ed28 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800ec26:	f7ff f8fd 	bl	800de24 <_PreparePacket>
 800ec2a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec38:	e00b      	b.n	800ec52 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3c:	b2da      	uxtb	r2, r3
 800ec3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec40:	1c59      	adds	r1, r3, #1
 800ec42:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ec44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec48:	b2d2      	uxtb	r2, r2
 800ec4a:	701a      	strb	r2, [r3, #0]
 800ec4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec4e:	09db      	lsrs	r3, r3, #7
 800ec50:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec54:	2b7f      	cmp	r3, #127	; 0x7f
 800ec56:	d8f0      	bhi.n	800ec3a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800ec58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec5a:	1c5a      	adds	r2, r3, #1
 800ec5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ec5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec60:	b2d2      	uxtb	r2, r2
 800ec62:	701a      	strb	r2, [r3, #0]
 800ec64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	633b      	str	r3, [r7, #48]	; 0x30
 800ec70:	e00b      	b.n	800ec8a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec74:	b2da      	uxtb	r2, r3
 800ec76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec78:	1c59      	adds	r1, r3, #1
 800ec7a:	6379      	str	r1, [r7, #52]	; 0x34
 800ec7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ec80:	b2d2      	uxtb	r2, r2
 800ec82:	701a      	strb	r2, [r3, #0]
 800ec84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec86:	09db      	lsrs	r3, r3, #7
 800ec88:	633b      	str	r3, [r7, #48]	; 0x30
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	2b7f      	cmp	r3, #127	; 0x7f
 800ec8e:	d8f0      	bhi.n	800ec72 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800ec90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	637a      	str	r2, [r7, #52]	; 0x34
 800ec96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec98:	b2d2      	uxtb	r2, r2
 800ec9a:	701a      	strb	r2, [r3, #0]
 800ec9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eca8:	e00b      	b.n	800ecc2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800ecaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecac:	b2da      	uxtb	r2, r3
 800ecae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb0:	1c59      	adds	r1, r3, #1
 800ecb2:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ecb4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ecb8:	b2d2      	uxtb	r2, r2
 800ecba:	701a      	strb	r2, [r3, #0]
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	09db      	lsrs	r3, r3, #7
 800ecc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc4:	2b7f      	cmp	r3, #127	; 0x7f
 800ecc6:	d8f0      	bhi.n	800ecaa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800ecc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ecce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecd0:	b2d2      	uxtb	r2, r2
 800ecd2:	701a      	strb	r2, [r3, #0]
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	627b      	str	r3, [r7, #36]	; 0x24
 800ecdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecde:	623b      	str	r3, [r7, #32]
 800ece0:	e00b      	b.n	800ecfa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800ece2:	6a3b      	ldr	r3, [r7, #32]
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece8:	1c59      	adds	r1, r3, #1
 800ecea:	6279      	str	r1, [r7, #36]	; 0x24
 800ecec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ecf0:	b2d2      	uxtb	r2, r2
 800ecf2:	701a      	strb	r2, [r3, #0]
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	09db      	lsrs	r3, r3, #7
 800ecf8:	623b      	str	r3, [r7, #32]
 800ecfa:	6a3b      	ldr	r3, [r7, #32]
 800ecfc:	2b7f      	cmp	r3, #127	; 0x7f
 800ecfe:	d8f0      	bhi.n	800ece2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800ed00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed02:	1c5a      	adds	r2, r3, #1
 800ed04:	627a      	str	r2, [r7, #36]	; 0x24
 800ed06:	6a3a      	ldr	r2, [r7, #32]
 800ed08:	b2d2      	uxtb	r2, r2
 800ed0a:	701a      	strb	r2, [r3, #0]
 800ed0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	6979      	ldr	r1, [r7, #20]
 800ed14:	69b8      	ldr	r0, [r7, #24]
 800ed16:	f7ff f977 	bl	800e008 <_SendPacket>
  RECORD_END();
 800ed1a:	69fb      	ldr	r3, [r7, #28]
 800ed1c:	f383 8811 	msr	BASEPRI, r3
}
 800ed20:	bf00      	nop
 800ed22:	3740      	adds	r7, #64	; 0x40
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	2001a958 	.word	0x2001a958

0800ed2c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b092      	sub	sp, #72	; 0x48
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	607a      	str	r2, [r7, #4]
 800ed38:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800ed3a:	f3ef 8311 	mrs	r3, BASEPRI
 800ed3e:	f04f 0120 	mov.w	r1, #32
 800ed42:	f381 8811 	msr	BASEPRI, r1
 800ed46:	61fb      	str	r3, [r7, #28]
 800ed48:	484e      	ldr	r0, [pc, #312]	; (800ee84 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800ed4a:	f7ff f86b 	bl	800de24 <_PreparePacket>
 800ed4e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	647b      	str	r3, [r7, #68]	; 0x44
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	643b      	str	r3, [r7, #64]	; 0x40
 800ed5c:	e00b      	b.n	800ed76 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800ed5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed64:	1c59      	adds	r1, r3, #1
 800ed66:	6479      	str	r1, [r7, #68]	; 0x44
 800ed68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ed6c:	b2d2      	uxtb	r2, r2
 800ed6e:	701a      	strb	r2, [r3, #0]
 800ed70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed72:	09db      	lsrs	r3, r3, #7
 800ed74:	643b      	str	r3, [r7, #64]	; 0x40
 800ed76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed78:	2b7f      	cmp	r3, #127	; 0x7f
 800ed7a:	d8f0      	bhi.n	800ed5e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800ed7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed7e:	1c5a      	adds	r2, r3, #1
 800ed80:	647a      	str	r2, [r7, #68]	; 0x44
 800ed82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ed84:	b2d2      	uxtb	r2, r2
 800ed86:	701a      	strb	r2, [r3, #0]
 800ed88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed94:	e00b      	b.n	800edae <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800ed96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed9c:	1c59      	adds	r1, r3, #1
 800ed9e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800eda0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eda4:	b2d2      	uxtb	r2, r2
 800eda6:	701a      	strb	r2, [r3, #0]
 800eda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edaa:	09db      	lsrs	r3, r3, #7
 800edac:	63bb      	str	r3, [r7, #56]	; 0x38
 800edae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb0:	2b7f      	cmp	r3, #127	; 0x7f
 800edb2:	d8f0      	bhi.n	800ed96 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800edb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb6:	1c5a      	adds	r2, r3, #1
 800edb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800edba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edbc:	b2d2      	uxtb	r2, r2
 800edbe:	701a      	strb	r2, [r3, #0]
 800edc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	637b      	str	r3, [r7, #52]	; 0x34
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	633b      	str	r3, [r7, #48]	; 0x30
 800edcc:	e00b      	b.n	800ede6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edd4:	1c59      	adds	r1, r3, #1
 800edd6:	6379      	str	r1, [r7, #52]	; 0x34
 800edd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eddc:	b2d2      	uxtb	r2, r2
 800edde:	701a      	strb	r2, [r3, #0]
 800ede0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede2:	09db      	lsrs	r3, r3, #7
 800ede4:	633b      	str	r3, [r7, #48]	; 0x30
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	2b7f      	cmp	r3, #127	; 0x7f
 800edea:	d8f0      	bhi.n	800edce <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800edec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edee:	1c5a      	adds	r2, r3, #1
 800edf0:	637a      	str	r2, [r7, #52]	; 0x34
 800edf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edf4:	b2d2      	uxtb	r2, r2
 800edf6:	701a      	strb	r2, [r3, #0]
 800edf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee04:	e00b      	b.n	800ee1e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800ee06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0c:	1c59      	adds	r1, r3, #1
 800ee0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ee10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee14:	b2d2      	uxtb	r2, r2
 800ee16:	701a      	strb	r2, [r3, #0]
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	09db      	lsrs	r3, r3, #7
 800ee1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee20:	2b7f      	cmp	r3, #127	; 0x7f
 800ee22:	d8f0      	bhi.n	800ee06 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee26:	1c5a      	adds	r2, r3, #1
 800ee28:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee2c:	b2d2      	uxtb	r2, r2
 800ee2e:	701a      	strb	r2, [r3, #0]
 800ee30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	627b      	str	r3, [r7, #36]	; 0x24
 800ee38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee3a:	623b      	str	r3, [r7, #32]
 800ee3c:	e00b      	b.n	800ee56 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800ee3e:	6a3b      	ldr	r3, [r7, #32]
 800ee40:	b2da      	uxtb	r2, r3
 800ee42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee44:	1c59      	adds	r1, r3, #1
 800ee46:	6279      	str	r1, [r7, #36]	; 0x24
 800ee48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ee4c:	b2d2      	uxtb	r2, r2
 800ee4e:	701a      	strb	r2, [r3, #0]
 800ee50:	6a3b      	ldr	r3, [r7, #32]
 800ee52:	09db      	lsrs	r3, r3, #7
 800ee54:	623b      	str	r3, [r7, #32]
 800ee56:	6a3b      	ldr	r3, [r7, #32]
 800ee58:	2b7f      	cmp	r3, #127	; 0x7f
 800ee5a:	d8f0      	bhi.n	800ee3e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	627a      	str	r2, [r7, #36]	; 0x24
 800ee62:	6a3a      	ldr	r2, [r7, #32]
 800ee64:	b2d2      	uxtb	r2, r2
 800ee66:	701a      	strb	r2, [r3, #0]
 800ee68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	6979      	ldr	r1, [r7, #20]
 800ee70:	69b8      	ldr	r0, [r7, #24]
 800ee72:	f7ff f8c9 	bl	800e008 <_SendPacket>
  RECORD_END();
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	f383 8811 	msr	BASEPRI, r3
}
 800ee7c:	bf00      	nop
 800ee7e:	3748      	adds	r7, #72	; 0x48
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	2001a958 	.word	0x2001a958

0800ee88 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b08c      	sub	sp, #48	; 0x30
 800ee8c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800ee8e:	4b59      	ldr	r3, [pc, #356]	; (800eff4 <SEGGER_SYSVIEW_Start+0x16c>)
 800ee90:	2201      	movs	r2, #1
 800ee92:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800ee94:	f3ef 8311 	mrs	r3, BASEPRI
 800ee98:	f04f 0120 	mov.w	r1, #32
 800ee9c:	f381 8811 	msr	BASEPRI, r1
 800eea0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800eea2:	4b54      	ldr	r3, [pc, #336]	; (800eff4 <SEGGER_SYSVIEW_Start+0x16c>)
 800eea4:	785b      	ldrb	r3, [r3, #1]
 800eea6:	220a      	movs	r2, #10
 800eea8:	4953      	ldr	r1, [pc, #332]	; (800eff8 <SEGGER_SYSVIEW_Start+0x170>)
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7f1 f9b0 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800eeb6:	f7fe facf 	bl	800d458 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800eeba:	200a      	movs	r0, #10
 800eebc:	f7ff fd7a 	bl	800e9b4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800eec0:	f3ef 8311 	mrs	r3, BASEPRI
 800eec4:	f04f 0120 	mov.w	r1, #32
 800eec8:	f381 8811 	msr	BASEPRI, r1
 800eecc:	60bb      	str	r3, [r7, #8]
 800eece:	484b      	ldr	r0, [pc, #300]	; (800effc <SEGGER_SYSVIEW_Start+0x174>)
 800eed0:	f7fe ffa8 	bl	800de24 <_PreparePacket>
 800eed4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eede:	4b45      	ldr	r3, [pc, #276]	; (800eff4 <SEGGER_SYSVIEW_Start+0x16c>)
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	62bb      	str	r3, [r7, #40]	; 0x28
 800eee4:	e00b      	b.n	800eefe <SEGGER_SYSVIEW_Start+0x76>
 800eee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	1c59      	adds	r1, r3, #1
 800eeee:	62f9      	str	r1, [r7, #44]	; 0x2c
 800eef0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800eef4:	b2d2      	uxtb	r2, r2
 800eef6:	701a      	strb	r2, [r3, #0]
 800eef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eefa:	09db      	lsrs	r3, r3, #7
 800eefc:	62bb      	str	r3, [r7, #40]	; 0x28
 800eefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef00:	2b7f      	cmp	r3, #127	; 0x7f
 800ef02:	d8f0      	bhi.n	800eee6 <SEGGER_SYSVIEW_Start+0x5e>
 800ef04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef0c:	b2d2      	uxtb	r2, r2
 800ef0e:	701a      	strb	r2, [r3, #0]
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	627b      	str	r3, [r7, #36]	; 0x24
 800ef18:	4b36      	ldr	r3, [pc, #216]	; (800eff4 <SEGGER_SYSVIEW_Start+0x16c>)
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	623b      	str	r3, [r7, #32]
 800ef1e:	e00b      	b.n	800ef38 <SEGGER_SYSVIEW_Start+0xb0>
 800ef20:	6a3b      	ldr	r3, [r7, #32]
 800ef22:	b2da      	uxtb	r2, r3
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	1c59      	adds	r1, r3, #1
 800ef28:	6279      	str	r1, [r7, #36]	; 0x24
 800ef2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ef2e:	b2d2      	uxtb	r2, r2
 800ef30:	701a      	strb	r2, [r3, #0]
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	09db      	lsrs	r3, r3, #7
 800ef36:	623b      	str	r3, [r7, #32]
 800ef38:	6a3b      	ldr	r3, [r7, #32]
 800ef3a:	2b7f      	cmp	r3, #127	; 0x7f
 800ef3c:	d8f0      	bhi.n	800ef20 <SEGGER_SYSVIEW_Start+0x98>
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	1c5a      	adds	r2, r3, #1
 800ef42:	627a      	str	r2, [r7, #36]	; 0x24
 800ef44:	6a3a      	ldr	r2, [r7, #32]
 800ef46:	b2d2      	uxtb	r2, r2
 800ef48:	701a      	strb	r2, [r3, #0]
 800ef4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	61fb      	str	r3, [r7, #28]
 800ef52:	4b28      	ldr	r3, [pc, #160]	; (800eff4 <SEGGER_SYSVIEW_Start+0x16c>)
 800ef54:	691b      	ldr	r3, [r3, #16]
 800ef56:	61bb      	str	r3, [r7, #24]
 800ef58:	e00b      	b.n	800ef72 <SEGGER_SYSVIEW_Start+0xea>
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	b2da      	uxtb	r2, r3
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	1c59      	adds	r1, r3, #1
 800ef62:	61f9      	str	r1, [r7, #28]
 800ef64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ef68:	b2d2      	uxtb	r2, r2
 800ef6a:	701a      	strb	r2, [r3, #0]
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	09db      	lsrs	r3, r3, #7
 800ef70:	61bb      	str	r3, [r7, #24]
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	2b7f      	cmp	r3, #127	; 0x7f
 800ef76:	d8f0      	bhi.n	800ef5a <SEGGER_SYSVIEW_Start+0xd2>
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	61fa      	str	r2, [r7, #28]
 800ef7e:	69ba      	ldr	r2, [r7, #24]
 800ef80:	b2d2      	uxtb	r2, r2
 800ef82:	701a      	strb	r2, [r3, #0]
 800ef84:	69fb      	ldr	r3, [r7, #28]
 800ef86:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	613b      	str	r3, [r7, #16]
 800ef90:	e00b      	b.n	800efaa <SEGGER_SYSVIEW_Start+0x122>
 800ef92:	693b      	ldr	r3, [r7, #16]
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	1c59      	adds	r1, r3, #1
 800ef9a:	6179      	str	r1, [r7, #20]
 800ef9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800efa0:	b2d2      	uxtb	r2, r2
 800efa2:	701a      	strb	r2, [r3, #0]
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	09db      	lsrs	r3, r3, #7
 800efa8:	613b      	str	r3, [r7, #16]
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	2b7f      	cmp	r3, #127	; 0x7f
 800efae:	d8f0      	bhi.n	800ef92 <SEGGER_SYSVIEW_Start+0x10a>
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	1c5a      	adds	r2, r3, #1
 800efb4:	617a      	str	r2, [r7, #20]
 800efb6:	693a      	ldr	r2, [r7, #16]
 800efb8:	b2d2      	uxtb	r2, r2
 800efba:	701a      	strb	r2, [r3, #0]
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800efc0:	2218      	movs	r2, #24
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7ff f81f 	bl	800e008 <_SendPacket>
      RECORD_END();
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800efd0:	4b08      	ldr	r3, [pc, #32]	; (800eff4 <SEGGER_SYSVIEW_Start+0x16c>)
 800efd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d002      	beq.n	800efde <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800efd8:	4b06      	ldr	r3, [pc, #24]	; (800eff4 <SEGGER_SYSVIEW_Start+0x16c>)
 800efda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efdc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800efde:	f000 f9eb 	bl	800f3b8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800efe2:	f000 f9b1 	bl	800f348 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800efe6:	f000 fcdf 	bl	800f9a8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800efea:	bf00      	nop
 800efec:	3730      	adds	r7, #48	; 0x30
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	2001a928 	.word	0x2001a928
 800eff8:	08012e94 	.word	0x08012e94
 800effc:	2001a958 	.word	0x2001a958

0800f000 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f006:	f3ef 8311 	mrs	r3, BASEPRI
 800f00a:	f04f 0120 	mov.w	r1, #32
 800f00e:	f381 8811 	msr	BASEPRI, r1
 800f012:	607b      	str	r3, [r7, #4]
 800f014:	480b      	ldr	r0, [pc, #44]	; (800f044 <SEGGER_SYSVIEW_Stop+0x44>)
 800f016:	f7fe ff05 	bl	800de24 <_PreparePacket>
 800f01a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800f01c:	4b0a      	ldr	r3, [pc, #40]	; (800f048 <SEGGER_SYSVIEW_Stop+0x48>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d007      	beq.n	800f034 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800f024:	220b      	movs	r2, #11
 800f026:	6839      	ldr	r1, [r7, #0]
 800f028:	6838      	ldr	r0, [r7, #0]
 800f02a:	f7fe ffed 	bl	800e008 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800f02e:	4b06      	ldr	r3, [pc, #24]	; (800f048 <SEGGER_SYSVIEW_Stop+0x48>)
 800f030:	2200      	movs	r2, #0
 800f032:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f383 8811 	msr	BASEPRI, r3
}
 800f03a:	bf00      	nop
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	2001a958 	.word	0x2001a958
 800f048:	2001a928 	.word	0x2001a928

0800f04c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b08c      	sub	sp, #48	; 0x30
 800f050:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800f052:	f3ef 8311 	mrs	r3, BASEPRI
 800f056:	f04f 0120 	mov.w	r1, #32
 800f05a:	f381 8811 	msr	BASEPRI, r1
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	4845      	ldr	r0, [pc, #276]	; (800f178 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800f062:	f7fe fedf 	bl	800de24 <_PreparePacket>
 800f066:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f070:	4b42      	ldr	r3, [pc, #264]	; (800f17c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	62bb      	str	r3, [r7, #40]	; 0x28
 800f076:	e00b      	b.n	800f090 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800f078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07a:	b2da      	uxtb	r2, r3
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	1c59      	adds	r1, r3, #1
 800f080:	62f9      	str	r1, [r7, #44]	; 0x2c
 800f082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f086:	b2d2      	uxtb	r2, r2
 800f088:	701a      	strb	r2, [r3, #0]
 800f08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08c:	09db      	lsrs	r3, r3, #7
 800f08e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	2b7f      	cmp	r3, #127	; 0x7f
 800f094:	d8f0      	bhi.n	800f078 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800f096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f098:	1c5a      	adds	r2, r3, #1
 800f09a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f09c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f09e:	b2d2      	uxtb	r2, r2
 800f0a0:	701a      	strb	r2, [r3, #0]
 800f0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	627b      	str	r3, [r7, #36]	; 0x24
 800f0aa:	4b34      	ldr	r3, [pc, #208]	; (800f17c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800f0ac:	689b      	ldr	r3, [r3, #8]
 800f0ae:	623b      	str	r3, [r7, #32]
 800f0b0:	e00b      	b.n	800f0ca <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800f0b2:	6a3b      	ldr	r3, [r7, #32]
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b8:	1c59      	adds	r1, r3, #1
 800f0ba:	6279      	str	r1, [r7, #36]	; 0x24
 800f0bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f0c0:	b2d2      	uxtb	r2, r2
 800f0c2:	701a      	strb	r2, [r3, #0]
 800f0c4:	6a3b      	ldr	r3, [r7, #32]
 800f0c6:	09db      	lsrs	r3, r3, #7
 800f0c8:	623b      	str	r3, [r7, #32]
 800f0ca:	6a3b      	ldr	r3, [r7, #32]
 800f0cc:	2b7f      	cmp	r3, #127	; 0x7f
 800f0ce:	d8f0      	bhi.n	800f0b2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	1c5a      	adds	r2, r3, #1
 800f0d4:	627a      	str	r2, [r7, #36]	; 0x24
 800f0d6:	6a3a      	ldr	r2, [r7, #32]
 800f0d8:	b2d2      	uxtb	r2, r2
 800f0da:	701a      	strb	r2, [r3, #0]
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	61fb      	str	r3, [r7, #28]
 800f0e4:	4b25      	ldr	r3, [pc, #148]	; (800f17c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800f0e6:	691b      	ldr	r3, [r3, #16]
 800f0e8:	61bb      	str	r3, [r7, #24]
 800f0ea:	e00b      	b.n	800f104 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	b2da      	uxtb	r2, r3
 800f0f0:	69fb      	ldr	r3, [r7, #28]
 800f0f2:	1c59      	adds	r1, r3, #1
 800f0f4:	61f9      	str	r1, [r7, #28]
 800f0f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f0fa:	b2d2      	uxtb	r2, r2
 800f0fc:	701a      	strb	r2, [r3, #0]
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	09db      	lsrs	r3, r3, #7
 800f102:	61bb      	str	r3, [r7, #24]
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	2b7f      	cmp	r3, #127	; 0x7f
 800f108:	d8f0      	bhi.n	800f0ec <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	1c5a      	adds	r2, r3, #1
 800f10e:	61fa      	str	r2, [r7, #28]
 800f110:	69ba      	ldr	r2, [r7, #24]
 800f112:	b2d2      	uxtb	r2, r2
 800f114:	701a      	strb	r2, [r3, #0]
 800f116:	69fb      	ldr	r3, [r7, #28]
 800f118:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	617b      	str	r3, [r7, #20]
 800f11e:	2300      	movs	r3, #0
 800f120:	613b      	str	r3, [r7, #16]
 800f122:	e00b      	b.n	800f13c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	b2da      	uxtb	r2, r3
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	1c59      	adds	r1, r3, #1
 800f12c:	6179      	str	r1, [r7, #20]
 800f12e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f132:	b2d2      	uxtb	r2, r2
 800f134:	701a      	strb	r2, [r3, #0]
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	09db      	lsrs	r3, r3, #7
 800f13a:	613b      	str	r3, [r7, #16]
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	2b7f      	cmp	r3, #127	; 0x7f
 800f140:	d8f0      	bhi.n	800f124 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	1c5a      	adds	r2, r3, #1
 800f146:	617a      	str	r2, [r7, #20]
 800f148:	693a      	ldr	r2, [r7, #16]
 800f14a:	b2d2      	uxtb	r2, r2
 800f14c:	701a      	strb	r2, [r3, #0]
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800f152:	2218      	movs	r2, #24
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	68b8      	ldr	r0, [r7, #8]
 800f158:	f7fe ff56 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800f162:	4b06      	ldr	r3, [pc, #24]	; (800f17c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800f164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f166:	2b00      	cmp	r3, #0
 800f168:	d002      	beq.n	800f170 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800f16a:	4b04      	ldr	r3, [pc, #16]	; (800f17c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800f16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f16e:	4798      	blx	r3
  }
}
 800f170:	bf00      	nop
 800f172:	3730      	adds	r7, #48	; 0x30
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	2001a958 	.word	0x2001a958
 800f17c:	2001a928 	.word	0x2001a928

0800f180 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800f180:	b580      	push	{r7, lr}
 800f182:	b092      	sub	sp, #72	; 0x48
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800f188:	f3ef 8311 	mrs	r3, BASEPRI
 800f18c:	f04f 0120 	mov.w	r1, #32
 800f190:	f381 8811 	msr	BASEPRI, r1
 800f194:	617b      	str	r3, [r7, #20]
 800f196:	486a      	ldr	r0, [pc, #424]	; (800f340 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800f198:	f7fe fe44 	bl	800de24 <_PreparePacket>
 800f19c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	647b      	str	r3, [r7, #68]	; 0x44
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	4b66      	ldr	r3, [pc, #408]	; (800f344 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800f1ac:	691b      	ldr	r3, [r3, #16]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	643b      	str	r3, [r7, #64]	; 0x40
 800f1b2:	e00b      	b.n	800f1cc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800f1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b6:	b2da      	uxtb	r2, r3
 800f1b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1ba:	1c59      	adds	r1, r3, #1
 800f1bc:	6479      	str	r1, [r7, #68]	; 0x44
 800f1be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f1c2:	b2d2      	uxtb	r2, r2
 800f1c4:	701a      	strb	r2, [r3, #0]
 800f1c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1c8:	09db      	lsrs	r3, r3, #7
 800f1ca:	643b      	str	r3, [r7, #64]	; 0x40
 800f1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ce:	2b7f      	cmp	r3, #127	; 0x7f
 800f1d0:	d8f0      	bhi.n	800f1b4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800f1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1d4:	1c5a      	adds	r2, r3, #1
 800f1d6:	647a      	str	r2, [r7, #68]	; 0x44
 800f1d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f1da:	b2d2      	uxtb	r2, r2
 800f1dc:	701a      	strb	r2, [r3, #0]
 800f1de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800f1ec:	e00b      	b.n	800f206 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800f1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1f4:	1c59      	adds	r1, r3, #1
 800f1f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f1f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f1fc:	b2d2      	uxtb	r2, r2
 800f1fe:	701a      	strb	r2, [r3, #0]
 800f200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f202:	09db      	lsrs	r3, r3, #7
 800f204:	63bb      	str	r3, [r7, #56]	; 0x38
 800f206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f208:	2b7f      	cmp	r3, #127	; 0x7f
 800f20a:	d8f0      	bhi.n	800f1ee <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800f20c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f20e:	1c5a      	adds	r2, r3, #1
 800f210:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f214:	b2d2      	uxtb	r2, r2
 800f216:	701a      	strb	r2, [r3, #0]
 800f218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f21a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	2220      	movs	r2, #32
 800f222:	4619      	mov	r1, r3
 800f224:	68f8      	ldr	r0, [r7, #12]
 800f226:	f7fe fdad 	bl	800dd84 <_EncodeStr>
 800f22a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800f22c:	2209      	movs	r2, #9
 800f22e:	68f9      	ldr	r1, [r7, #12]
 800f230:	6938      	ldr	r0, [r7, #16]
 800f232:	f7fe fee9 	bl	800e008 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800f236:	693b      	ldr	r3, [r7, #16]
 800f238:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	637b      	str	r3, [r7, #52]	; 0x34
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	4b40      	ldr	r3, [pc, #256]	; (800f344 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	1ad3      	subs	r3, r2, r3
 800f248:	633b      	str	r3, [r7, #48]	; 0x30
 800f24a:	e00b      	b.n	800f264 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800f24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f252:	1c59      	adds	r1, r3, #1
 800f254:	6379      	str	r1, [r7, #52]	; 0x34
 800f256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f25a:	b2d2      	uxtb	r2, r2
 800f25c:	701a      	strb	r2, [r3, #0]
 800f25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f260:	09db      	lsrs	r3, r3, #7
 800f262:	633b      	str	r3, [r7, #48]	; 0x30
 800f264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f266:	2b7f      	cmp	r3, #127	; 0x7f
 800f268:	d8f0      	bhi.n	800f24c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800f26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f26c:	1c5a      	adds	r2, r3, #1
 800f26e:	637a      	str	r2, [r7, #52]	; 0x34
 800f270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f272:	b2d2      	uxtb	r2, r2
 800f274:	701a      	strb	r2, [r3, #0]
 800f276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f278:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	62bb      	str	r3, [r7, #40]	; 0x28
 800f284:	e00b      	b.n	800f29e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800f286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28c:	1c59      	adds	r1, r3, #1
 800f28e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800f290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f294:	b2d2      	uxtb	r2, r2
 800f296:	701a      	strb	r2, [r3, #0]
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	09db      	lsrs	r3, r3, #7
 800f29c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a0:	2b7f      	cmp	r3, #127	; 0x7f
 800f2a2:	d8f0      	bhi.n	800f286 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2ac:	b2d2      	uxtb	r2, r2
 800f2ae:	701a      	strb	r2, [r3, #0]
 800f2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	623b      	str	r3, [r7, #32]
 800f2be:	e00b      	b.n	800f2d8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800f2c0:	6a3b      	ldr	r3, [r7, #32]
 800f2c2:	b2da      	uxtb	r2, r3
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c6:	1c59      	adds	r1, r3, #1
 800f2c8:	6279      	str	r1, [r7, #36]	; 0x24
 800f2ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f2ce:	b2d2      	uxtb	r2, r2
 800f2d0:	701a      	strb	r2, [r3, #0]
 800f2d2:	6a3b      	ldr	r3, [r7, #32]
 800f2d4:	09db      	lsrs	r3, r3, #7
 800f2d6:	623b      	str	r3, [r7, #32]
 800f2d8:	6a3b      	ldr	r3, [r7, #32]
 800f2da:	2b7f      	cmp	r3, #127	; 0x7f
 800f2dc:	d8f0      	bhi.n	800f2c0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e0:	1c5a      	adds	r2, r3, #1
 800f2e2:	627a      	str	r2, [r7, #36]	; 0x24
 800f2e4:	6a3a      	ldr	r2, [r7, #32]
 800f2e6:	b2d2      	uxtb	r2, r2
 800f2e8:	701a      	strb	r2, [r3, #0]
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	61fb      	str	r3, [r7, #28]
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	61bb      	str	r3, [r7, #24]
 800f2f6:	e00b      	b.n	800f310 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	b2da      	uxtb	r2, r3
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	1c59      	adds	r1, r3, #1
 800f300:	61f9      	str	r1, [r7, #28]
 800f302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f306:	b2d2      	uxtb	r2, r2
 800f308:	701a      	strb	r2, [r3, #0]
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	09db      	lsrs	r3, r3, #7
 800f30e:	61bb      	str	r3, [r7, #24]
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	2b7f      	cmp	r3, #127	; 0x7f
 800f314:	d8f0      	bhi.n	800f2f8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	1c5a      	adds	r2, r3, #1
 800f31a:	61fa      	str	r2, [r7, #28]
 800f31c:	69ba      	ldr	r2, [r7, #24]
 800f31e:	b2d2      	uxtb	r2, r2
 800f320:	701a      	strb	r2, [r3, #0]
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800f326:	2215      	movs	r2, #21
 800f328:	68f9      	ldr	r1, [r7, #12]
 800f32a:	6938      	ldr	r0, [r7, #16]
 800f32c:	f7fe fe6c 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	f383 8811 	msr	BASEPRI, r3
}
 800f336:	bf00      	nop
 800f338:	3748      	adds	r7, #72	; 0x48
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	2001a958 	.word	0x2001a958
 800f344:	2001a928 	.word	0x2001a928

0800f348 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800f348:	b580      	push	{r7, lr}
 800f34a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800f34c:	4b07      	ldr	r3, [pc, #28]	; (800f36c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800f34e:	6a1b      	ldr	r3, [r3, #32]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d008      	beq.n	800f366 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800f354:	4b05      	ldr	r3, [pc, #20]	; (800f36c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800f356:	6a1b      	ldr	r3, [r3, #32]
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d003      	beq.n	800f366 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800f35e:	4b03      	ldr	r3, [pc, #12]	; (800f36c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800f360:	6a1b      	ldr	r3, [r3, #32]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	4798      	blx	r3
  }
}
 800f366:	bf00      	nop
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	2001a928 	.word	0x2001a928

0800f370 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800f370:	b580      	push	{r7, lr}
 800f372:	b086      	sub	sp, #24
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f378:	f3ef 8311 	mrs	r3, BASEPRI
 800f37c:	f04f 0120 	mov.w	r1, #32
 800f380:	f381 8811 	msr	BASEPRI, r1
 800f384:	617b      	str	r3, [r7, #20]
 800f386:	480b      	ldr	r0, [pc, #44]	; (800f3b4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800f388:	f7fe fd4c 	bl	800de24 <_PreparePacket>
 800f38c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f38e:	2280      	movs	r2, #128	; 0x80
 800f390:	6879      	ldr	r1, [r7, #4]
 800f392:	6938      	ldr	r0, [r7, #16]
 800f394:	f7fe fcf6 	bl	800dd84 <_EncodeStr>
 800f398:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800f39a:	220e      	movs	r2, #14
 800f39c:	68f9      	ldr	r1, [r7, #12]
 800f39e:	6938      	ldr	r0, [r7, #16]
 800f3a0:	f7fe fe32 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	f383 8811 	msr	BASEPRI, r3
}
 800f3aa:	bf00      	nop
 800f3ac:	3718      	adds	r7, #24
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	2001a958 	.word	0x2001a958

0800f3b8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800f3b8:	b590      	push	{r4, r7, lr}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800f3be:	4b15      	ldr	r3, [pc, #84]	; (800f414 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f3c0:	6a1b      	ldr	r3, [r3, #32]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d01a      	beq.n	800f3fc <SEGGER_SYSVIEW_RecordSystime+0x44>
 800f3c6:	4b13      	ldr	r3, [pc, #76]	; (800f414 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d015      	beq.n	800f3fc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800f3d0:	4b10      	ldr	r3, [pc, #64]	; (800f414 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800f3d2:	6a1b      	ldr	r3, [r3, #32]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	4798      	blx	r3
 800f3d8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f3dc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800f3de:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f3e2:	f04f 0200 	mov.w	r2, #0
 800f3e6:	f04f 0300 	mov.w	r3, #0
 800f3ea:	000a      	movs	r2, r1
 800f3ec:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	200d      	movs	r0, #13
 800f3f6:	f7ff fb37 	bl	800ea68 <SEGGER_SYSVIEW_RecordU32x2>
 800f3fa:	e006      	b.n	800f40a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800f3fc:	4b06      	ldr	r3, [pc, #24]	; (800f418 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	4619      	mov	r1, r3
 800f402:	200c      	movs	r0, #12
 800f404:	f7ff faf4 	bl	800e9f0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800f408:	bf00      	nop
 800f40a:	bf00      	nop
 800f40c:	370c      	adds	r7, #12
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd90      	pop	{r4, r7, pc}
 800f412:	bf00      	nop
 800f414:	2001a928 	.word	0x2001a928
 800f418:	e0001004 	.word	0xe0001004

0800f41c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b086      	sub	sp, #24
 800f420:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f422:	f3ef 8311 	mrs	r3, BASEPRI
 800f426:	f04f 0120 	mov.w	r1, #32
 800f42a:	f381 8811 	msr	BASEPRI, r1
 800f42e:	60fb      	str	r3, [r7, #12]
 800f430:	4819      	ldr	r0, [pc, #100]	; (800f498 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800f432:	f7fe fcf7 	bl	800de24 <_PreparePacket>
 800f436:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800f43c:	4b17      	ldr	r3, [pc, #92]	; (800f49c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f444:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	617b      	str	r3, [r7, #20]
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	613b      	str	r3, [r7, #16]
 800f44e:	e00b      	b.n	800f468 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	b2da      	uxtb	r2, r3
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	1c59      	adds	r1, r3, #1
 800f458:	6179      	str	r1, [r7, #20]
 800f45a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f45e:	b2d2      	uxtb	r2, r2
 800f460:	701a      	strb	r2, [r3, #0]
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	09db      	lsrs	r3, r3, #7
 800f466:	613b      	str	r3, [r7, #16]
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	2b7f      	cmp	r3, #127	; 0x7f
 800f46c:	d8f0      	bhi.n	800f450 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	1c5a      	adds	r2, r3, #1
 800f472:	617a      	str	r2, [r7, #20]
 800f474:	693a      	ldr	r2, [r7, #16]
 800f476:	b2d2      	uxtb	r2, r2
 800f478:	701a      	strb	r2, [r3, #0]
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800f47e:	2202      	movs	r2, #2
 800f480:	6879      	ldr	r1, [r7, #4]
 800f482:	68b8      	ldr	r0, [r7, #8]
 800f484:	f7fe fdc0 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f383 8811 	msr	BASEPRI, r3
}
 800f48e:	bf00      	nop
 800f490:	3718      	adds	r7, #24
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	2001a958 	.word	0x2001a958
 800f49c:	e000ed04 	.word	0xe000ed04

0800f4a0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f4a6:	f3ef 8311 	mrs	r3, BASEPRI
 800f4aa:	f04f 0120 	mov.w	r1, #32
 800f4ae:	f381 8811 	msr	BASEPRI, r1
 800f4b2:	607b      	str	r3, [r7, #4]
 800f4b4:	4807      	ldr	r0, [pc, #28]	; (800f4d4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800f4b6:	f7fe fcb5 	bl	800de24 <_PreparePacket>
 800f4ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800f4bc:	2203      	movs	r2, #3
 800f4be:	6839      	ldr	r1, [r7, #0]
 800f4c0:	6838      	ldr	r0, [r7, #0]
 800f4c2:	f7fe fda1 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f383 8811 	msr	BASEPRI, r3
}
 800f4cc:	bf00      	nop
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}
 800f4d4:	2001a958 	.word	0x2001a958

0800f4d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f4de:	f3ef 8311 	mrs	r3, BASEPRI
 800f4e2:	f04f 0120 	mov.w	r1, #32
 800f4e6:	f381 8811 	msr	BASEPRI, r1
 800f4ea:	607b      	str	r3, [r7, #4]
 800f4ec:	4807      	ldr	r0, [pc, #28]	; (800f50c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800f4ee:	f7fe fc99 	bl	800de24 <_PreparePacket>
 800f4f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800f4f4:	2212      	movs	r2, #18
 800f4f6:	6839      	ldr	r1, [r7, #0]
 800f4f8:	6838      	ldr	r0, [r7, #0]
 800f4fa:	f7fe fd85 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f383 8811 	msr	BASEPRI, r3
}
 800f504:	bf00      	nop
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	2001a958 	.word	0x2001a958

0800f510 <SEGGER_SYSVIEW_RecordEnterTimer>:
*    Format and send a Timer entry event.
*  
*  Parameters
*    TimerId - Id of the timer which starts.
*/
void SEGGER_SYSVIEW_RecordEnterTimer(U32 TimerId) {
 800f510:	b580      	push	{r7, lr}
 800f512:	b088      	sub	sp, #32
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f518:	f3ef 8311 	mrs	r3, BASEPRI
 800f51c:	f04f 0120 	mov.w	r1, #32
 800f520:	f381 8811 	msr	BASEPRI, r1
 800f524:	617b      	str	r3, [r7, #20]
 800f526:	4818      	ldr	r0, [pc, #96]	; (800f588 <SEGGER_SYSVIEW_RecordEnterTimer+0x78>)
 800f528:	f7fe fc7c 	bl	800de24 <_PreparePacket>
 800f52c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(TimerId));
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	61fb      	str	r3, [r7, #28]
 800f536:	4b15      	ldr	r3, [pc, #84]	; (800f58c <SEGGER_SYSVIEW_RecordEnterTimer+0x7c>)
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	687a      	ldr	r2, [r7, #4]
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	61bb      	str	r3, [r7, #24]
 800f540:	e00b      	b.n	800f55a <SEGGER_SYSVIEW_RecordEnterTimer+0x4a>
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	b2da      	uxtb	r2, r3
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	1c59      	adds	r1, r3, #1
 800f54a:	61f9      	str	r1, [r7, #28]
 800f54c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f550:	b2d2      	uxtb	r2, r2
 800f552:	701a      	strb	r2, [r3, #0]
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	09db      	lsrs	r3, r3, #7
 800f558:	61bb      	str	r3, [r7, #24]
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	2b7f      	cmp	r3, #127	; 0x7f
 800f55e:	d8f0      	bhi.n	800f542 <SEGGER_SYSVIEW_RecordEnterTimer+0x32>
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	1c5a      	adds	r2, r3, #1
 800f564:	61fa      	str	r2, [r7, #28]
 800f566:	69ba      	ldr	r2, [r7, #24]
 800f568:	b2d2      	uxtb	r2, r2
 800f56a:	701a      	strb	r2, [r3, #0]
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TIMER_ENTER);
 800f570:	2213      	movs	r2, #19
 800f572:	68f9      	ldr	r1, [r7, #12]
 800f574:	6938      	ldr	r0, [r7, #16]
 800f576:	f7fe fd47 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	f383 8811 	msr	BASEPRI, r3
}
 800f580:	bf00      	nop
 800f582:	3720      	adds	r7, #32
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}
 800f588:	2001a958 	.word	0x2001a958
 800f58c:	2001a928 	.word	0x2001a928

0800f590 <SEGGER_SYSVIEW_RecordExitTimer>:
*       SEGGER_SYSVIEW_RecordExitTimer()
*
*  Function description
*    Format and send a Timer exit event.
*/
void SEGGER_SYSVIEW_RecordExitTimer(void) {
 800f590:	b580      	push	{r7, lr}
 800f592:	b082      	sub	sp, #8
 800f594:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f596:	f3ef 8311 	mrs	r3, BASEPRI
 800f59a:	f04f 0120 	mov.w	r1, #32
 800f59e:	f381 8811 	msr	BASEPRI, r1
 800f5a2:	607b      	str	r3, [r7, #4]
 800f5a4:	4807      	ldr	r0, [pc, #28]	; (800f5c4 <SEGGER_SYSVIEW_RecordExitTimer+0x34>)
 800f5a6:	f7fe fc3d 	bl	800de24 <_PreparePacket>
 800f5aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TIMER_EXIT);
 800f5ac:	2214      	movs	r2, #20
 800f5ae:	6839      	ldr	r1, [r7, #0]
 800f5b0:	6838      	ldr	r0, [r7, #0]
 800f5b2:	f7fe fd29 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f383 8811 	msr	BASEPRI, r3
}
 800f5bc:	bf00      	nop
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	2001a958 	.word	0x2001a958

0800f5c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800f5ce:	f3ef 8311 	mrs	r3, BASEPRI
 800f5d2:	f04f 0120 	mov.w	r1, #32
 800f5d6:	f381 8811 	msr	BASEPRI, r1
 800f5da:	607b      	str	r3, [r7, #4]
 800f5dc:	4807      	ldr	r0, [pc, #28]	; (800f5fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 800f5de:	f7fe fc21 	bl	800de24 <_PreparePacket>
 800f5e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800f5e4:	2211      	movs	r2, #17
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6838      	ldr	r0, [r7, #0]
 800f5ea:	f7fe fd0d 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f383 8811 	msr	BASEPRI, r3
}
 800f5f4:	bf00      	nop
 800f5f6:	3708      	adds	r7, #8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	2001a958 	.word	0x2001a958

0800f600 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800f600:	b580      	push	{r7, lr}
 800f602:	b088      	sub	sp, #32
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f608:	f3ef 8311 	mrs	r3, BASEPRI
 800f60c:	f04f 0120 	mov.w	r1, #32
 800f610:	f381 8811 	msr	BASEPRI, r1
 800f614:	617b      	str	r3, [r7, #20]
 800f616:	4819      	ldr	r0, [pc, #100]	; (800f67c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800f618:	f7fe fc04 	bl	800de24 <_PreparePacket>
 800f61c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f622:	4b17      	ldr	r3, [pc, #92]	; (800f680 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800f624:	691b      	ldr	r3, [r3, #16]
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	1ad3      	subs	r3, r2, r3
 800f62a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	61fb      	str	r3, [r7, #28]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	61bb      	str	r3, [r7, #24]
 800f634:	e00b      	b.n	800f64e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800f636:	69bb      	ldr	r3, [r7, #24]
 800f638:	b2da      	uxtb	r2, r3
 800f63a:	69fb      	ldr	r3, [r7, #28]
 800f63c:	1c59      	adds	r1, r3, #1
 800f63e:	61f9      	str	r1, [r7, #28]
 800f640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f644:	b2d2      	uxtb	r2, r2
 800f646:	701a      	strb	r2, [r3, #0]
 800f648:	69bb      	ldr	r3, [r7, #24]
 800f64a:	09db      	lsrs	r3, r3, #7
 800f64c:	61bb      	str	r3, [r7, #24]
 800f64e:	69bb      	ldr	r3, [r7, #24]
 800f650:	2b7f      	cmp	r3, #127	; 0x7f
 800f652:	d8f0      	bhi.n	800f636 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	1c5a      	adds	r2, r3, #1
 800f658:	61fa      	str	r2, [r7, #28]
 800f65a:	69ba      	ldr	r2, [r7, #24]
 800f65c:	b2d2      	uxtb	r2, r2
 800f65e:	701a      	strb	r2, [r3, #0]
 800f660:	69fb      	ldr	r3, [r7, #28]
 800f662:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800f664:	2208      	movs	r2, #8
 800f666:	68f9      	ldr	r1, [r7, #12]
 800f668:	6938      	ldr	r0, [r7, #16]
 800f66a:	f7fe fccd 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	f383 8811 	msr	BASEPRI, r3
}
 800f674:	bf00      	nop
 800f676:	3720      	adds	r7, #32
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	2001a958 	.word	0x2001a958
 800f680:	2001a928 	.word	0x2001a928

0800f684 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800f684:	b580      	push	{r7, lr}
 800f686:	b088      	sub	sp, #32
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f68c:	f3ef 8311 	mrs	r3, BASEPRI
 800f690:	f04f 0120 	mov.w	r1, #32
 800f694:	f381 8811 	msr	BASEPRI, r1
 800f698:	617b      	str	r3, [r7, #20]
 800f69a:	4819      	ldr	r0, [pc, #100]	; (800f700 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800f69c:	f7fe fbc2 	bl	800de24 <_PreparePacket>
 800f6a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f6a6:	4b17      	ldr	r3, [pc, #92]	; (800f704 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800f6a8:	691b      	ldr	r3, [r3, #16]
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	61fb      	str	r3, [r7, #28]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	61bb      	str	r3, [r7, #24]
 800f6b8:	e00b      	b.n	800f6d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	b2da      	uxtb	r2, r3
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	1c59      	adds	r1, r3, #1
 800f6c2:	61f9      	str	r1, [r7, #28]
 800f6c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f6c8:	b2d2      	uxtb	r2, r2
 800f6ca:	701a      	strb	r2, [r3, #0]
 800f6cc:	69bb      	ldr	r3, [r7, #24]
 800f6ce:	09db      	lsrs	r3, r3, #7
 800f6d0:	61bb      	str	r3, [r7, #24]
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	2b7f      	cmp	r3, #127	; 0x7f
 800f6d6:	d8f0      	bhi.n	800f6ba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	1c5a      	adds	r2, r3, #1
 800f6dc:	61fa      	str	r2, [r7, #28]
 800f6de:	69ba      	ldr	r2, [r7, #24]
 800f6e0:	b2d2      	uxtb	r2, r2
 800f6e2:	701a      	strb	r2, [r3, #0]
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800f6e8:	2204      	movs	r2, #4
 800f6ea:	68f9      	ldr	r1, [r7, #12]
 800f6ec:	6938      	ldr	r0, [r7, #16]
 800f6ee:	f7fe fc8b 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f383 8811 	msr	BASEPRI, r3
}
 800f6f8:	bf00      	nop
 800f6fa:	3720      	adds	r7, #32
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	2001a958 	.word	0x2001a958
 800f704:	2001a928 	.word	0x2001a928

0800f708 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800f708:	b580      	push	{r7, lr}
 800f70a:	b088      	sub	sp, #32
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800f710:	f3ef 8311 	mrs	r3, BASEPRI
 800f714:	f04f 0120 	mov.w	r1, #32
 800f718:	f381 8811 	msr	BASEPRI, r1
 800f71c:	617b      	str	r3, [r7, #20]
 800f71e:	4819      	ldr	r0, [pc, #100]	; (800f784 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800f720:	f7fe fb80 	bl	800de24 <_PreparePacket>
 800f724:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f72a:	4b17      	ldr	r3, [pc, #92]	; (800f788 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800f72c:	691b      	ldr	r3, [r3, #16]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	1ad3      	subs	r3, r2, r3
 800f732:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	61fb      	str	r3, [r7, #28]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	61bb      	str	r3, [r7, #24]
 800f73c:	e00b      	b.n	800f756 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800f73e:	69bb      	ldr	r3, [r7, #24]
 800f740:	b2da      	uxtb	r2, r3
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	1c59      	adds	r1, r3, #1
 800f746:	61f9      	str	r1, [r7, #28]
 800f748:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f74c:	b2d2      	uxtb	r2, r2
 800f74e:	701a      	strb	r2, [r3, #0]
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	09db      	lsrs	r3, r3, #7
 800f754:	61bb      	str	r3, [r7, #24]
 800f756:	69bb      	ldr	r3, [r7, #24]
 800f758:	2b7f      	cmp	r3, #127	; 0x7f
 800f75a:	d8f0      	bhi.n	800f73e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	1c5a      	adds	r2, r3, #1
 800f760:	61fa      	str	r2, [r7, #28]
 800f762:	69ba      	ldr	r2, [r7, #24]
 800f764:	b2d2      	uxtb	r2, r2
 800f766:	701a      	strb	r2, [r3, #0]
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800f76c:	2206      	movs	r2, #6
 800f76e:	68f9      	ldr	r1, [r7, #12]
 800f770:	6938      	ldr	r0, [r7, #16]
 800f772:	f7fe fc49 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	f383 8811 	msr	BASEPRI, r3
}
 800f77c:	bf00      	nop
 800f77e:	3720      	adds	r7, #32
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}
 800f784:	2001a958 	.word	0x2001a958
 800f788:	2001a928 	.word	0x2001a928

0800f78c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b08a      	sub	sp, #40	; 0x28
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800f796:	f3ef 8311 	mrs	r3, BASEPRI
 800f79a:	f04f 0120 	mov.w	r1, #32
 800f79e:	f381 8811 	msr	BASEPRI, r1
 800f7a2:	617b      	str	r3, [r7, #20]
 800f7a4:	4827      	ldr	r0, [pc, #156]	; (800f844 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800f7a6:	f7fe fb3d 	bl	800de24 <_PreparePacket>
 800f7aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800f7b0:	4b25      	ldr	r3, [pc, #148]	; (800f848 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800f7b2:	691b      	ldr	r3, [r3, #16]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	627b      	str	r3, [r7, #36]	; 0x24
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	623b      	str	r3, [r7, #32]
 800f7c2:	e00b      	b.n	800f7dc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800f7c4:	6a3b      	ldr	r3, [r7, #32]
 800f7c6:	b2da      	uxtb	r2, r3
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ca:	1c59      	adds	r1, r3, #1
 800f7cc:	6279      	str	r1, [r7, #36]	; 0x24
 800f7ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f7d2:	b2d2      	uxtb	r2, r2
 800f7d4:	701a      	strb	r2, [r3, #0]
 800f7d6:	6a3b      	ldr	r3, [r7, #32]
 800f7d8:	09db      	lsrs	r3, r3, #7
 800f7da:	623b      	str	r3, [r7, #32]
 800f7dc:	6a3b      	ldr	r3, [r7, #32]
 800f7de:	2b7f      	cmp	r3, #127	; 0x7f
 800f7e0:	d8f0      	bhi.n	800f7c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e4:	1c5a      	adds	r2, r3, #1
 800f7e6:	627a      	str	r2, [r7, #36]	; 0x24
 800f7e8:	6a3a      	ldr	r2, [r7, #32]
 800f7ea:	b2d2      	uxtb	r2, r2
 800f7ec:	701a      	strb	r2, [r3, #0]
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	61fb      	str	r3, [r7, #28]
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	61bb      	str	r3, [r7, #24]
 800f7fa:	e00b      	b.n	800f814 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	b2da      	uxtb	r2, r3
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	1c59      	adds	r1, r3, #1
 800f804:	61f9      	str	r1, [r7, #28]
 800f806:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f80a:	b2d2      	uxtb	r2, r2
 800f80c:	701a      	strb	r2, [r3, #0]
 800f80e:	69bb      	ldr	r3, [r7, #24]
 800f810:	09db      	lsrs	r3, r3, #7
 800f812:	61bb      	str	r3, [r7, #24]
 800f814:	69bb      	ldr	r3, [r7, #24]
 800f816:	2b7f      	cmp	r3, #127	; 0x7f
 800f818:	d8f0      	bhi.n	800f7fc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	61fa      	str	r2, [r7, #28]
 800f820:	69ba      	ldr	r2, [r7, #24]
 800f822:	b2d2      	uxtb	r2, r2
 800f824:	701a      	strb	r2, [r3, #0]
 800f826:	69fb      	ldr	r3, [r7, #28]
 800f828:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800f82a:	2207      	movs	r2, #7
 800f82c:	68f9      	ldr	r1, [r7, #12]
 800f82e:	6938      	ldr	r0, [r7, #16]
 800f830:	f7fe fbea 	bl	800e008 <_SendPacket>
  RECORD_END();
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	f383 8811 	msr	BASEPRI, r3
}
 800f83a:	bf00      	nop
 800f83c:	3728      	adds	r7, #40	; 0x28
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	2001a958 	.word	0x2001a958
 800f848:	2001a928 	.word	0x2001a928

0800f84c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800f854:	4b04      	ldr	r3, [pc, #16]	; (800f868 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800f856:	691b      	ldr	r3, [r3, #16]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	1ad3      	subs	r3, r2, r3
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr
 800f868:	2001a928 	.word	0x2001a928

0800f86c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b08c      	sub	sp, #48	; 0x30
 800f870:	af00      	add	r7, sp, #0
 800f872:	4603      	mov	r3, r0
 800f874:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800f876:	4b3b      	ldr	r3, [pc, #236]	; (800f964 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d06d      	beq.n	800f95a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800f87e:	4b39      	ldr	r3, [pc, #228]	; (800f964 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800f884:	2300      	movs	r3, #0
 800f886:	62bb      	str	r3, [r7, #40]	; 0x28
 800f888:	e008      	b.n	800f89c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800f88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88c:	691b      	ldr	r3, [r3, #16]
 800f88e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800f890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f892:	2b00      	cmp	r3, #0
 800f894:	d007      	beq.n	800f8a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800f896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f898:	3301      	adds	r3, #1
 800f89a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f89c:	79fb      	ldrb	r3, [r7, #7]
 800f89e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d3f2      	bcc.n	800f88a <SEGGER_SYSVIEW_SendModule+0x1e>
 800f8a4:	e000      	b.n	800f8a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800f8a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d055      	beq.n	800f95a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f8ae:	f3ef 8311 	mrs	r3, BASEPRI
 800f8b2:	f04f 0120 	mov.w	r1, #32
 800f8b6:	f381 8811 	msr	BASEPRI, r1
 800f8ba:	617b      	str	r3, [r7, #20]
 800f8bc:	482a      	ldr	r0, [pc, #168]	; (800f968 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800f8be:	f7fe fab1 	bl	800de24 <_PreparePacket>
 800f8c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	627b      	str	r3, [r7, #36]	; 0x24
 800f8cc:	79fb      	ldrb	r3, [r7, #7]
 800f8ce:	623b      	str	r3, [r7, #32]
 800f8d0:	e00b      	b.n	800f8ea <SEGGER_SYSVIEW_SendModule+0x7e>
 800f8d2:	6a3b      	ldr	r3, [r7, #32]
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d8:	1c59      	adds	r1, r3, #1
 800f8da:	6279      	str	r1, [r7, #36]	; 0x24
 800f8dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f8e0:	b2d2      	uxtb	r2, r2
 800f8e2:	701a      	strb	r2, [r3, #0]
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
 800f8e6:	09db      	lsrs	r3, r3, #7
 800f8e8:	623b      	str	r3, [r7, #32]
 800f8ea:	6a3b      	ldr	r3, [r7, #32]
 800f8ec:	2b7f      	cmp	r3, #127	; 0x7f
 800f8ee:	d8f0      	bhi.n	800f8d2 <SEGGER_SYSVIEW_SendModule+0x66>
 800f8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f2:	1c5a      	adds	r2, r3, #1
 800f8f4:	627a      	str	r2, [r7, #36]	; 0x24
 800f8f6:	6a3a      	ldr	r2, [r7, #32]
 800f8f8:	b2d2      	uxtb	r2, r2
 800f8fa:	701a      	strb	r2, [r3, #0]
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	61fb      	str	r3, [r7, #28]
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	61bb      	str	r3, [r7, #24]
 800f90a:	e00b      	b.n	800f924 <SEGGER_SYSVIEW_SendModule+0xb8>
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	b2da      	uxtb	r2, r3
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	1c59      	adds	r1, r3, #1
 800f914:	61f9      	str	r1, [r7, #28]
 800f916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f91a:	b2d2      	uxtb	r2, r2
 800f91c:	701a      	strb	r2, [r3, #0]
 800f91e:	69bb      	ldr	r3, [r7, #24]
 800f920:	09db      	lsrs	r3, r3, #7
 800f922:	61bb      	str	r3, [r7, #24]
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	2b7f      	cmp	r3, #127	; 0x7f
 800f928:	d8f0      	bhi.n	800f90c <SEGGER_SYSVIEW_SendModule+0xa0>
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	1c5a      	adds	r2, r3, #1
 800f92e:	61fa      	str	r2, [r7, #28]
 800f930:	69ba      	ldr	r2, [r7, #24]
 800f932:	b2d2      	uxtb	r2, r2
 800f934:	701a      	strb	r2, [r3, #0]
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800f93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2280      	movs	r2, #128	; 0x80
 800f940:	4619      	mov	r1, r3
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f7fe fa1e 	bl	800dd84 <_EncodeStr>
 800f948:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800f94a:	2216      	movs	r2, #22
 800f94c:	68f9      	ldr	r1, [r7, #12]
 800f94e:	6938      	ldr	r0, [r7, #16]
 800f950:	f7fe fb5a 	bl	800e008 <_SendPacket>
      RECORD_END();
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800f95a:	bf00      	nop
 800f95c:	3730      	adds	r7, #48	; 0x30
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	2001a950 	.word	0x2001a950
 800f968:	2001a958 	.word	0x2001a958

0800f96c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800f972:	4b0c      	ldr	r3, [pc, #48]	; (800f9a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d00f      	beq.n	800f99a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800f97a:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d002      	beq.n	800f98e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	691b      	ldr	r3, [r3, #16]
 800f992:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d1f2      	bne.n	800f980 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800f99a:	bf00      	nop
 800f99c:	3708      	adds	r7, #8
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	2001a950 	.word	0x2001a950

0800f9a8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800f9ae:	f3ef 8311 	mrs	r3, BASEPRI
 800f9b2:	f04f 0120 	mov.w	r1, #32
 800f9b6:	f381 8811 	msr	BASEPRI, r1
 800f9ba:	60fb      	str	r3, [r7, #12]
 800f9bc:	4817      	ldr	r0, [pc, #92]	; (800fa1c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800f9be:	f7fe fa31 	bl	800de24 <_PreparePacket>
 800f9c2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	617b      	str	r3, [r7, #20]
 800f9cc:	4b14      	ldr	r3, [pc, #80]	; (800fa20 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	613b      	str	r3, [r7, #16]
 800f9d2:	e00b      	b.n	800f9ec <SEGGER_SYSVIEW_SendNumModules+0x44>
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	b2da      	uxtb	r2, r3
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	1c59      	adds	r1, r3, #1
 800f9dc:	6179      	str	r1, [r7, #20]
 800f9de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f9e2:	b2d2      	uxtb	r2, r2
 800f9e4:	701a      	strb	r2, [r3, #0]
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	09db      	lsrs	r3, r3, #7
 800f9ea:	613b      	str	r3, [r7, #16]
 800f9ec:	693b      	ldr	r3, [r7, #16]
 800f9ee:	2b7f      	cmp	r3, #127	; 0x7f
 800f9f0:	d8f0      	bhi.n	800f9d4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	1c5a      	adds	r2, r3, #1
 800f9f6:	617a      	str	r2, [r7, #20]
 800f9f8:	693a      	ldr	r2, [r7, #16]
 800f9fa:	b2d2      	uxtb	r2, r2
 800f9fc:	701a      	strb	r2, [r3, #0]
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800fa02:	221b      	movs	r2, #27
 800fa04:	6879      	ldr	r1, [r7, #4]
 800fa06:	68b8      	ldr	r0, [r7, #8]
 800fa08:	f7fe fafe 	bl	800e008 <_SendPacket>
  RECORD_END();
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f383 8811 	msr	BASEPRI, r3
}
 800fa12:	bf00      	nop
 800fa14:	3718      	adds	r7, #24
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
 800fa1a:	bf00      	nop
 800fa1c:	2001a958 	.word	0x2001a958
 800fa20:	2001a954 	.word	0x2001a954

0800fa24 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800fa24:	b40f      	push	{r0, r1, r2, r3}
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b082      	sub	sp, #8
 800fa2a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800fa2c:	f107 0314 	add.w	r3, r7, #20
 800fa30:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800fa32:	1d3b      	adds	r3, r7, #4
 800fa34:	461a      	mov	r2, r3
 800fa36:	2100      	movs	r1, #0
 800fa38:	6938      	ldr	r0, [r7, #16]
 800fa3a:	f7fe fd6f 	bl	800e51c <_VPrintTarget>
  va_end(ParamList);
}
 800fa3e:	bf00      	nop
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa48:	b004      	add	sp, #16
 800fa4a:	4770      	bx	lr

0800fa4c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b08a      	sub	sp, #40	; 0x28
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800fa54:	f3ef 8311 	mrs	r3, BASEPRI
 800fa58:	f04f 0120 	mov.w	r1, #32
 800fa5c:	f381 8811 	msr	BASEPRI, r1
 800fa60:	617b      	str	r3, [r7, #20]
 800fa62:	4827      	ldr	r0, [pc, #156]	; (800fb00 <SEGGER_SYSVIEW_Warn+0xb4>)
 800fa64:	f7fe f9de 	bl	800de24 <_PreparePacket>
 800fa68:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800fa6a:	2280      	movs	r2, #128	; 0x80
 800fa6c:	6879      	ldr	r1, [r7, #4]
 800fa6e:	6938      	ldr	r0, [r7, #16]
 800fa70:	f7fe f988 	bl	800dd84 <_EncodeStr>
 800fa74:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	627b      	str	r3, [r7, #36]	; 0x24
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	623b      	str	r3, [r7, #32]
 800fa7e:	e00b      	b.n	800fa98 <SEGGER_SYSVIEW_Warn+0x4c>
 800fa80:	6a3b      	ldr	r3, [r7, #32]
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	1c59      	adds	r1, r3, #1
 800fa88:	6279      	str	r1, [r7, #36]	; 0x24
 800fa8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fa8e:	b2d2      	uxtb	r2, r2
 800fa90:	701a      	strb	r2, [r3, #0]
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	09db      	lsrs	r3, r3, #7
 800fa96:	623b      	str	r3, [r7, #32]
 800fa98:	6a3b      	ldr	r3, [r7, #32]
 800fa9a:	2b7f      	cmp	r3, #127	; 0x7f
 800fa9c:	d8f0      	bhi.n	800fa80 <SEGGER_SYSVIEW_Warn+0x34>
 800fa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa0:	1c5a      	adds	r2, r3, #1
 800faa2:	627a      	str	r2, [r7, #36]	; 0x24
 800faa4:	6a3a      	ldr	r2, [r7, #32]
 800faa6:	b2d2      	uxtb	r2, r2
 800faa8:	701a      	strb	r2, [r3, #0]
 800faaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	61fb      	str	r3, [r7, #28]
 800fab2:	2300      	movs	r3, #0
 800fab4:	61bb      	str	r3, [r7, #24]
 800fab6:	e00b      	b.n	800fad0 <SEGGER_SYSVIEW_Warn+0x84>
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	b2da      	uxtb	r2, r3
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	1c59      	adds	r1, r3, #1
 800fac0:	61f9      	str	r1, [r7, #28]
 800fac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800fac6:	b2d2      	uxtb	r2, r2
 800fac8:	701a      	strb	r2, [r3, #0]
 800faca:	69bb      	ldr	r3, [r7, #24]
 800facc:	09db      	lsrs	r3, r3, #7
 800face:	61bb      	str	r3, [r7, #24]
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	2b7f      	cmp	r3, #127	; 0x7f
 800fad4:	d8f0      	bhi.n	800fab8 <SEGGER_SYSVIEW_Warn+0x6c>
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	1c5a      	adds	r2, r3, #1
 800fada:	61fa      	str	r2, [r7, #28]
 800fadc:	69ba      	ldr	r2, [r7, #24]
 800fade:	b2d2      	uxtb	r2, r2
 800fae0:	701a      	strb	r2, [r3, #0]
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800fae6:	221a      	movs	r2, #26
 800fae8:	68f9      	ldr	r1, [r7, #12]
 800faea:	6938      	ldr	r0, [r7, #16]
 800faec:	f7fe fa8c 	bl	800e008 <_SendPacket>
  RECORD_END();
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	f383 8811 	msr	BASEPRI, r3
}
 800faf6:	bf00      	nop
 800faf8:	3728      	adds	r7, #40	; 0x28
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	2001a958 	.word	0x2001a958

0800fb04 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800fb04:	b580      	push	{r7, lr}
 800fb06:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800fb08:	4b13      	ldr	r3, [pc, #76]	; (800fb58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800fb0a:	7e1b      	ldrb	r3, [r3, #24]
 800fb0c:	4619      	mov	r1, r3
 800fb0e:	4a13      	ldr	r2, [pc, #76]	; (800fb5c <SEGGER_SYSVIEW_IsStarted+0x58>)
 800fb10:	460b      	mov	r3, r1
 800fb12:	005b      	lsls	r3, r3, #1
 800fb14:	440b      	add	r3, r1
 800fb16:	00db      	lsls	r3, r3, #3
 800fb18:	4413      	add	r3, r2
 800fb1a:	336c      	adds	r3, #108	; 0x6c
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	4b0e      	ldr	r3, [pc, #56]	; (800fb58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800fb20:	7e1b      	ldrb	r3, [r3, #24]
 800fb22:	4618      	mov	r0, r3
 800fb24:	490d      	ldr	r1, [pc, #52]	; (800fb5c <SEGGER_SYSVIEW_IsStarted+0x58>)
 800fb26:	4603      	mov	r3, r0
 800fb28:	005b      	lsls	r3, r3, #1
 800fb2a:	4403      	add	r3, r0
 800fb2c:	00db      	lsls	r3, r3, #3
 800fb2e:	440b      	add	r3, r1
 800fb30:	3370      	adds	r3, #112	; 0x70
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d00b      	beq.n	800fb50 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800fb38:	4b07      	ldr	r3, [pc, #28]	; (800fb58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800fb3a:	789b      	ldrb	r3, [r3, #2]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d107      	bne.n	800fb50 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800fb40:	4b05      	ldr	r3, [pc, #20]	; (800fb58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800fb42:	2201      	movs	r2, #1
 800fb44:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800fb46:	f7fe f979 	bl	800de3c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800fb4a:	4b03      	ldr	r3, [pc, #12]	; (800fb58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800fb4c:	2200      	movs	r2, #0
 800fb4e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 800fb50:	4b01      	ldr	r3, [pc, #4]	; (800fb58 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800fb52:	781b      	ldrb	r3, [r3, #0]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	2001a928 	.word	0x2001a928
 800fb5c:	2001ac74 	.word	0x2001ac74

0800fb60 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b084      	sub	sp, #16
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
 800fb6c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800fb6e:	683a      	ldr	r2, [r7, #0]
 800fb70:	6879      	ldr	r1, [r7, #4]
 800fb72:	2000      	movs	r0, #0
 800fb74:	f7fe f810 	bl	800db98 <SEGGER_RTT_Write>
  return len;
 800fb78:	683b      	ldr	r3, [r7, #0]
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <__errno>:
 800fb84:	4b01      	ldr	r3, [pc, #4]	; (800fb8c <__errno+0x8>)
 800fb86:	6818      	ldr	r0, [r3, #0]
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop
 800fb8c:	20000034 	.word	0x20000034

0800fb90 <__libc_init_array>:
 800fb90:	b570      	push	{r4, r5, r6, lr}
 800fb92:	4d0d      	ldr	r5, [pc, #52]	; (800fbc8 <__libc_init_array+0x38>)
 800fb94:	4c0d      	ldr	r4, [pc, #52]	; (800fbcc <__libc_init_array+0x3c>)
 800fb96:	1b64      	subs	r4, r4, r5
 800fb98:	10a4      	asrs	r4, r4, #2
 800fb9a:	2600      	movs	r6, #0
 800fb9c:	42a6      	cmp	r6, r4
 800fb9e:	d109      	bne.n	800fbb4 <__libc_init_array+0x24>
 800fba0:	4d0b      	ldr	r5, [pc, #44]	; (800fbd0 <__libc_init_array+0x40>)
 800fba2:	4c0c      	ldr	r4, [pc, #48]	; (800fbd4 <__libc_init_array+0x44>)
 800fba4:	f002 fee6 	bl	8012974 <_init>
 800fba8:	1b64      	subs	r4, r4, r5
 800fbaa:	10a4      	asrs	r4, r4, #2
 800fbac:	2600      	movs	r6, #0
 800fbae:	42a6      	cmp	r6, r4
 800fbb0:	d105      	bne.n	800fbbe <__libc_init_array+0x2e>
 800fbb2:	bd70      	pop	{r4, r5, r6, pc}
 800fbb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbb8:	4798      	blx	r3
 800fbba:	3601      	adds	r6, #1
 800fbbc:	e7ee      	b.n	800fb9c <__libc_init_array+0xc>
 800fbbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbc2:	4798      	blx	r3
 800fbc4:	3601      	adds	r6, #1
 800fbc6:	e7f2      	b.n	800fbae <__libc_init_array+0x1e>
 800fbc8:	0801329c 	.word	0x0801329c
 800fbcc:	0801329c 	.word	0x0801329c
 800fbd0:	0801329c 	.word	0x0801329c
 800fbd4:	080132a0 	.word	0x080132a0

0800fbd8 <memcmp>:
 800fbd8:	b530      	push	{r4, r5, lr}
 800fbda:	3901      	subs	r1, #1
 800fbdc:	2400      	movs	r4, #0
 800fbde:	42a2      	cmp	r2, r4
 800fbe0:	d101      	bne.n	800fbe6 <memcmp+0xe>
 800fbe2:	2000      	movs	r0, #0
 800fbe4:	e005      	b.n	800fbf2 <memcmp+0x1a>
 800fbe6:	5d03      	ldrb	r3, [r0, r4]
 800fbe8:	3401      	adds	r4, #1
 800fbea:	5d0d      	ldrb	r5, [r1, r4]
 800fbec:	42ab      	cmp	r3, r5
 800fbee:	d0f6      	beq.n	800fbde <memcmp+0x6>
 800fbf0:	1b58      	subs	r0, r3, r5
 800fbf2:	bd30      	pop	{r4, r5, pc}

0800fbf4 <memcpy>:
 800fbf4:	440a      	add	r2, r1
 800fbf6:	4291      	cmp	r1, r2
 800fbf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbfc:	d100      	bne.n	800fc00 <memcpy+0xc>
 800fbfe:	4770      	bx	lr
 800fc00:	b510      	push	{r4, lr}
 800fc02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc0a:	4291      	cmp	r1, r2
 800fc0c:	d1f9      	bne.n	800fc02 <memcpy+0xe>
 800fc0e:	bd10      	pop	{r4, pc}

0800fc10 <memset>:
 800fc10:	4402      	add	r2, r0
 800fc12:	4603      	mov	r3, r0
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d100      	bne.n	800fc1a <memset+0xa>
 800fc18:	4770      	bx	lr
 800fc1a:	f803 1b01 	strb.w	r1, [r3], #1
 800fc1e:	e7f9      	b.n	800fc14 <memset+0x4>

0800fc20 <__cvt>:
 800fc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc24:	ec55 4b10 	vmov	r4, r5, d0
 800fc28:	2d00      	cmp	r5, #0
 800fc2a:	460e      	mov	r6, r1
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	462b      	mov	r3, r5
 800fc30:	bfbb      	ittet	lt
 800fc32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc36:	461d      	movlt	r5, r3
 800fc38:	2300      	movge	r3, #0
 800fc3a:	232d      	movlt	r3, #45	; 0x2d
 800fc3c:	700b      	strb	r3, [r1, #0]
 800fc3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc44:	4691      	mov	r9, r2
 800fc46:	f023 0820 	bic.w	r8, r3, #32
 800fc4a:	bfbc      	itt	lt
 800fc4c:	4622      	movlt	r2, r4
 800fc4e:	4614      	movlt	r4, r2
 800fc50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc54:	d005      	beq.n	800fc62 <__cvt+0x42>
 800fc56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fc5a:	d100      	bne.n	800fc5e <__cvt+0x3e>
 800fc5c:	3601      	adds	r6, #1
 800fc5e:	2102      	movs	r1, #2
 800fc60:	e000      	b.n	800fc64 <__cvt+0x44>
 800fc62:	2103      	movs	r1, #3
 800fc64:	ab03      	add	r3, sp, #12
 800fc66:	9301      	str	r3, [sp, #4]
 800fc68:	ab02      	add	r3, sp, #8
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	ec45 4b10 	vmov	d0, r4, r5
 800fc70:	4653      	mov	r3, sl
 800fc72:	4632      	mov	r2, r6
 800fc74:	f000 fd20 	bl	80106b8 <_dtoa_r>
 800fc78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fc7c:	4607      	mov	r7, r0
 800fc7e:	d102      	bne.n	800fc86 <__cvt+0x66>
 800fc80:	f019 0f01 	tst.w	r9, #1
 800fc84:	d022      	beq.n	800fccc <__cvt+0xac>
 800fc86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc8a:	eb07 0906 	add.w	r9, r7, r6
 800fc8e:	d110      	bne.n	800fcb2 <__cvt+0x92>
 800fc90:	783b      	ldrb	r3, [r7, #0]
 800fc92:	2b30      	cmp	r3, #48	; 0x30
 800fc94:	d10a      	bne.n	800fcac <__cvt+0x8c>
 800fc96:	2200      	movs	r2, #0
 800fc98:	2300      	movs	r3, #0
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	f7f0 ff8b 	bl	8000bb8 <__aeabi_dcmpeq>
 800fca2:	b918      	cbnz	r0, 800fcac <__cvt+0x8c>
 800fca4:	f1c6 0601 	rsb	r6, r6, #1
 800fca8:	f8ca 6000 	str.w	r6, [sl]
 800fcac:	f8da 3000 	ldr.w	r3, [sl]
 800fcb0:	4499      	add	r9, r3
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	4629      	mov	r1, r5
 800fcba:	f7f0 ff7d 	bl	8000bb8 <__aeabi_dcmpeq>
 800fcbe:	b108      	cbz	r0, 800fcc4 <__cvt+0xa4>
 800fcc0:	f8cd 900c 	str.w	r9, [sp, #12]
 800fcc4:	2230      	movs	r2, #48	; 0x30
 800fcc6:	9b03      	ldr	r3, [sp, #12]
 800fcc8:	454b      	cmp	r3, r9
 800fcca:	d307      	bcc.n	800fcdc <__cvt+0xbc>
 800fccc:	9b03      	ldr	r3, [sp, #12]
 800fcce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcd0:	1bdb      	subs	r3, r3, r7
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	6013      	str	r3, [r2, #0]
 800fcd6:	b004      	add	sp, #16
 800fcd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcdc:	1c59      	adds	r1, r3, #1
 800fcde:	9103      	str	r1, [sp, #12]
 800fce0:	701a      	strb	r2, [r3, #0]
 800fce2:	e7f0      	b.n	800fcc6 <__cvt+0xa6>

0800fce4 <__exponent>:
 800fce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fce6:	4603      	mov	r3, r0
 800fce8:	2900      	cmp	r1, #0
 800fcea:	bfb8      	it	lt
 800fcec:	4249      	neglt	r1, r1
 800fcee:	f803 2b02 	strb.w	r2, [r3], #2
 800fcf2:	bfb4      	ite	lt
 800fcf4:	222d      	movlt	r2, #45	; 0x2d
 800fcf6:	222b      	movge	r2, #43	; 0x2b
 800fcf8:	2909      	cmp	r1, #9
 800fcfa:	7042      	strb	r2, [r0, #1]
 800fcfc:	dd2a      	ble.n	800fd54 <__exponent+0x70>
 800fcfe:	f10d 0407 	add.w	r4, sp, #7
 800fd02:	46a4      	mov	ip, r4
 800fd04:	270a      	movs	r7, #10
 800fd06:	46a6      	mov	lr, r4
 800fd08:	460a      	mov	r2, r1
 800fd0a:	fb91 f6f7 	sdiv	r6, r1, r7
 800fd0e:	fb07 1516 	mls	r5, r7, r6, r1
 800fd12:	3530      	adds	r5, #48	; 0x30
 800fd14:	2a63      	cmp	r2, #99	; 0x63
 800fd16:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd1e:	4631      	mov	r1, r6
 800fd20:	dcf1      	bgt.n	800fd06 <__exponent+0x22>
 800fd22:	3130      	adds	r1, #48	; 0x30
 800fd24:	f1ae 0502 	sub.w	r5, lr, #2
 800fd28:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd2c:	1c44      	adds	r4, r0, #1
 800fd2e:	4629      	mov	r1, r5
 800fd30:	4561      	cmp	r1, ip
 800fd32:	d30a      	bcc.n	800fd4a <__exponent+0x66>
 800fd34:	f10d 0209 	add.w	r2, sp, #9
 800fd38:	eba2 020e 	sub.w	r2, r2, lr
 800fd3c:	4565      	cmp	r5, ip
 800fd3e:	bf88      	it	hi
 800fd40:	2200      	movhi	r2, #0
 800fd42:	4413      	add	r3, r2
 800fd44:	1a18      	subs	r0, r3, r0
 800fd46:	b003      	add	sp, #12
 800fd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fd52:	e7ed      	b.n	800fd30 <__exponent+0x4c>
 800fd54:	2330      	movs	r3, #48	; 0x30
 800fd56:	3130      	adds	r1, #48	; 0x30
 800fd58:	7083      	strb	r3, [r0, #2]
 800fd5a:	70c1      	strb	r1, [r0, #3]
 800fd5c:	1d03      	adds	r3, r0, #4
 800fd5e:	e7f1      	b.n	800fd44 <__exponent+0x60>

0800fd60 <_printf_float>:
 800fd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd64:	ed2d 8b02 	vpush	{d8}
 800fd68:	b08d      	sub	sp, #52	; 0x34
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd70:	4616      	mov	r6, r2
 800fd72:	461f      	mov	r7, r3
 800fd74:	4605      	mov	r5, r0
 800fd76:	f001 fa8b 	bl	8011290 <_localeconv_r>
 800fd7a:	f8d0 a000 	ldr.w	sl, [r0]
 800fd7e:	4650      	mov	r0, sl
 800fd80:	f7f0 fa9a 	bl	80002b8 <strlen>
 800fd84:	2300      	movs	r3, #0
 800fd86:	930a      	str	r3, [sp, #40]	; 0x28
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	9305      	str	r3, [sp, #20]
 800fd8c:	f8d8 3000 	ldr.w	r3, [r8]
 800fd90:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fd94:	3307      	adds	r3, #7
 800fd96:	f023 0307 	bic.w	r3, r3, #7
 800fd9a:	f103 0208 	add.w	r2, r3, #8
 800fd9e:	f8c8 2000 	str.w	r2, [r8]
 800fda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fdaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fdae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fdb2:	9307      	str	r3, [sp, #28]
 800fdb4:	f8cd 8018 	str.w	r8, [sp, #24]
 800fdb8:	ee08 0a10 	vmov	s16, r0
 800fdbc:	4b9f      	ldr	r3, [pc, #636]	; (801003c <_printf_float+0x2dc>)
 800fdbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdc2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdc6:	f7f0 ff29 	bl	8000c1c <__aeabi_dcmpun>
 800fdca:	bb88      	cbnz	r0, 800fe30 <_printf_float+0xd0>
 800fdcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdd0:	4b9a      	ldr	r3, [pc, #616]	; (801003c <_printf_float+0x2dc>)
 800fdd2:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd6:	f7f0 ff03 	bl	8000be0 <__aeabi_dcmple>
 800fdda:	bb48      	cbnz	r0, 800fe30 <_printf_float+0xd0>
 800fddc:	2200      	movs	r2, #0
 800fdde:	2300      	movs	r3, #0
 800fde0:	4640      	mov	r0, r8
 800fde2:	4649      	mov	r1, r9
 800fde4:	f7f0 fef2 	bl	8000bcc <__aeabi_dcmplt>
 800fde8:	b110      	cbz	r0, 800fdf0 <_printf_float+0x90>
 800fdea:	232d      	movs	r3, #45	; 0x2d
 800fdec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdf0:	4b93      	ldr	r3, [pc, #588]	; (8010040 <_printf_float+0x2e0>)
 800fdf2:	4894      	ldr	r0, [pc, #592]	; (8010044 <_printf_float+0x2e4>)
 800fdf4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fdf8:	bf94      	ite	ls
 800fdfa:	4698      	movls	r8, r3
 800fdfc:	4680      	movhi	r8, r0
 800fdfe:	2303      	movs	r3, #3
 800fe00:	6123      	str	r3, [r4, #16]
 800fe02:	9b05      	ldr	r3, [sp, #20]
 800fe04:	f023 0204 	bic.w	r2, r3, #4
 800fe08:	6022      	str	r2, [r4, #0]
 800fe0a:	f04f 0900 	mov.w	r9, #0
 800fe0e:	9700      	str	r7, [sp, #0]
 800fe10:	4633      	mov	r3, r6
 800fe12:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe14:	4621      	mov	r1, r4
 800fe16:	4628      	mov	r0, r5
 800fe18:	f000 f9d8 	bl	80101cc <_printf_common>
 800fe1c:	3001      	adds	r0, #1
 800fe1e:	f040 8090 	bne.w	800ff42 <_printf_float+0x1e2>
 800fe22:	f04f 30ff 	mov.w	r0, #4294967295
 800fe26:	b00d      	add	sp, #52	; 0x34
 800fe28:	ecbd 8b02 	vpop	{d8}
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe30:	4642      	mov	r2, r8
 800fe32:	464b      	mov	r3, r9
 800fe34:	4640      	mov	r0, r8
 800fe36:	4649      	mov	r1, r9
 800fe38:	f7f0 fef0 	bl	8000c1c <__aeabi_dcmpun>
 800fe3c:	b140      	cbz	r0, 800fe50 <_printf_float+0xf0>
 800fe3e:	464b      	mov	r3, r9
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	bfbc      	itt	lt
 800fe44:	232d      	movlt	r3, #45	; 0x2d
 800fe46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe4a:	487f      	ldr	r0, [pc, #508]	; (8010048 <_printf_float+0x2e8>)
 800fe4c:	4b7f      	ldr	r3, [pc, #508]	; (801004c <_printf_float+0x2ec>)
 800fe4e:	e7d1      	b.n	800fdf4 <_printf_float+0x94>
 800fe50:	6863      	ldr	r3, [r4, #4]
 800fe52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fe56:	9206      	str	r2, [sp, #24]
 800fe58:	1c5a      	adds	r2, r3, #1
 800fe5a:	d13f      	bne.n	800fedc <_printf_float+0x17c>
 800fe5c:	2306      	movs	r3, #6
 800fe5e:	6063      	str	r3, [r4, #4]
 800fe60:	9b05      	ldr	r3, [sp, #20]
 800fe62:	6861      	ldr	r1, [r4, #4]
 800fe64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fe68:	2300      	movs	r3, #0
 800fe6a:	9303      	str	r3, [sp, #12]
 800fe6c:	ab0a      	add	r3, sp, #40	; 0x28
 800fe6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fe72:	ab09      	add	r3, sp, #36	; 0x24
 800fe74:	ec49 8b10 	vmov	d0, r8, r9
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	6022      	str	r2, [r4, #0]
 800fe7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fe80:	4628      	mov	r0, r5
 800fe82:	f7ff fecd 	bl	800fc20 <__cvt>
 800fe86:	9b06      	ldr	r3, [sp, #24]
 800fe88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe8a:	2b47      	cmp	r3, #71	; 0x47
 800fe8c:	4680      	mov	r8, r0
 800fe8e:	d108      	bne.n	800fea2 <_printf_float+0x142>
 800fe90:	1cc8      	adds	r0, r1, #3
 800fe92:	db02      	blt.n	800fe9a <_printf_float+0x13a>
 800fe94:	6863      	ldr	r3, [r4, #4]
 800fe96:	4299      	cmp	r1, r3
 800fe98:	dd41      	ble.n	800ff1e <_printf_float+0x1be>
 800fe9a:	f1ab 0b02 	sub.w	fp, fp, #2
 800fe9e:	fa5f fb8b 	uxtb.w	fp, fp
 800fea2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fea6:	d820      	bhi.n	800feea <_printf_float+0x18a>
 800fea8:	3901      	subs	r1, #1
 800feaa:	465a      	mov	r2, fp
 800feac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800feb0:	9109      	str	r1, [sp, #36]	; 0x24
 800feb2:	f7ff ff17 	bl	800fce4 <__exponent>
 800feb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800feb8:	1813      	adds	r3, r2, r0
 800feba:	2a01      	cmp	r2, #1
 800febc:	4681      	mov	r9, r0
 800febe:	6123      	str	r3, [r4, #16]
 800fec0:	dc02      	bgt.n	800fec8 <_printf_float+0x168>
 800fec2:	6822      	ldr	r2, [r4, #0]
 800fec4:	07d2      	lsls	r2, r2, #31
 800fec6:	d501      	bpl.n	800fecc <_printf_float+0x16c>
 800fec8:	3301      	adds	r3, #1
 800feca:	6123      	str	r3, [r4, #16]
 800fecc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d09c      	beq.n	800fe0e <_printf_float+0xae>
 800fed4:	232d      	movs	r3, #45	; 0x2d
 800fed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800feda:	e798      	b.n	800fe0e <_printf_float+0xae>
 800fedc:	9a06      	ldr	r2, [sp, #24]
 800fede:	2a47      	cmp	r2, #71	; 0x47
 800fee0:	d1be      	bne.n	800fe60 <_printf_float+0x100>
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d1bc      	bne.n	800fe60 <_printf_float+0x100>
 800fee6:	2301      	movs	r3, #1
 800fee8:	e7b9      	b.n	800fe5e <_printf_float+0xfe>
 800feea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800feee:	d118      	bne.n	800ff22 <_printf_float+0x1c2>
 800fef0:	2900      	cmp	r1, #0
 800fef2:	6863      	ldr	r3, [r4, #4]
 800fef4:	dd0b      	ble.n	800ff0e <_printf_float+0x1ae>
 800fef6:	6121      	str	r1, [r4, #16]
 800fef8:	b913      	cbnz	r3, 800ff00 <_printf_float+0x1a0>
 800fefa:	6822      	ldr	r2, [r4, #0]
 800fefc:	07d0      	lsls	r0, r2, #31
 800fefe:	d502      	bpl.n	800ff06 <_printf_float+0x1a6>
 800ff00:	3301      	adds	r3, #1
 800ff02:	440b      	add	r3, r1
 800ff04:	6123      	str	r3, [r4, #16]
 800ff06:	65a1      	str	r1, [r4, #88]	; 0x58
 800ff08:	f04f 0900 	mov.w	r9, #0
 800ff0c:	e7de      	b.n	800fecc <_printf_float+0x16c>
 800ff0e:	b913      	cbnz	r3, 800ff16 <_printf_float+0x1b6>
 800ff10:	6822      	ldr	r2, [r4, #0]
 800ff12:	07d2      	lsls	r2, r2, #31
 800ff14:	d501      	bpl.n	800ff1a <_printf_float+0x1ba>
 800ff16:	3302      	adds	r3, #2
 800ff18:	e7f4      	b.n	800ff04 <_printf_float+0x1a4>
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e7f2      	b.n	800ff04 <_printf_float+0x1a4>
 800ff1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff24:	4299      	cmp	r1, r3
 800ff26:	db05      	blt.n	800ff34 <_printf_float+0x1d4>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	6121      	str	r1, [r4, #16]
 800ff2c:	07d8      	lsls	r0, r3, #31
 800ff2e:	d5ea      	bpl.n	800ff06 <_printf_float+0x1a6>
 800ff30:	1c4b      	adds	r3, r1, #1
 800ff32:	e7e7      	b.n	800ff04 <_printf_float+0x1a4>
 800ff34:	2900      	cmp	r1, #0
 800ff36:	bfd4      	ite	le
 800ff38:	f1c1 0202 	rsble	r2, r1, #2
 800ff3c:	2201      	movgt	r2, #1
 800ff3e:	4413      	add	r3, r2
 800ff40:	e7e0      	b.n	800ff04 <_printf_float+0x1a4>
 800ff42:	6823      	ldr	r3, [r4, #0]
 800ff44:	055a      	lsls	r2, r3, #21
 800ff46:	d407      	bmi.n	800ff58 <_printf_float+0x1f8>
 800ff48:	6923      	ldr	r3, [r4, #16]
 800ff4a:	4642      	mov	r2, r8
 800ff4c:	4631      	mov	r1, r6
 800ff4e:	4628      	mov	r0, r5
 800ff50:	47b8      	blx	r7
 800ff52:	3001      	adds	r0, #1
 800ff54:	d12c      	bne.n	800ffb0 <_printf_float+0x250>
 800ff56:	e764      	b.n	800fe22 <_printf_float+0xc2>
 800ff58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff5c:	f240 80e0 	bls.w	8010120 <_printf_float+0x3c0>
 800ff60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff64:	2200      	movs	r2, #0
 800ff66:	2300      	movs	r3, #0
 800ff68:	f7f0 fe26 	bl	8000bb8 <__aeabi_dcmpeq>
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d034      	beq.n	800ffda <_printf_float+0x27a>
 800ff70:	4a37      	ldr	r2, [pc, #220]	; (8010050 <_printf_float+0x2f0>)
 800ff72:	2301      	movs	r3, #1
 800ff74:	4631      	mov	r1, r6
 800ff76:	4628      	mov	r0, r5
 800ff78:	47b8      	blx	r7
 800ff7a:	3001      	adds	r0, #1
 800ff7c:	f43f af51 	beq.w	800fe22 <_printf_float+0xc2>
 800ff80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff84:	429a      	cmp	r2, r3
 800ff86:	db02      	blt.n	800ff8e <_printf_float+0x22e>
 800ff88:	6823      	ldr	r3, [r4, #0]
 800ff8a:	07d8      	lsls	r0, r3, #31
 800ff8c:	d510      	bpl.n	800ffb0 <_printf_float+0x250>
 800ff8e:	ee18 3a10 	vmov	r3, s16
 800ff92:	4652      	mov	r2, sl
 800ff94:	4631      	mov	r1, r6
 800ff96:	4628      	mov	r0, r5
 800ff98:	47b8      	blx	r7
 800ff9a:	3001      	adds	r0, #1
 800ff9c:	f43f af41 	beq.w	800fe22 <_printf_float+0xc2>
 800ffa0:	f04f 0800 	mov.w	r8, #0
 800ffa4:	f104 091a 	add.w	r9, r4, #26
 800ffa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	4543      	cmp	r3, r8
 800ffae:	dc09      	bgt.n	800ffc4 <_printf_float+0x264>
 800ffb0:	6823      	ldr	r3, [r4, #0]
 800ffb2:	079b      	lsls	r3, r3, #30
 800ffb4:	f100 8105 	bmi.w	80101c2 <_printf_float+0x462>
 800ffb8:	68e0      	ldr	r0, [r4, #12]
 800ffba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffbc:	4298      	cmp	r0, r3
 800ffbe:	bfb8      	it	lt
 800ffc0:	4618      	movlt	r0, r3
 800ffc2:	e730      	b.n	800fe26 <_printf_float+0xc6>
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	464a      	mov	r2, r9
 800ffc8:	4631      	mov	r1, r6
 800ffca:	4628      	mov	r0, r5
 800ffcc:	47b8      	blx	r7
 800ffce:	3001      	adds	r0, #1
 800ffd0:	f43f af27 	beq.w	800fe22 <_printf_float+0xc2>
 800ffd4:	f108 0801 	add.w	r8, r8, #1
 800ffd8:	e7e6      	b.n	800ffa8 <_printf_float+0x248>
 800ffda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	dc39      	bgt.n	8010054 <_printf_float+0x2f4>
 800ffe0:	4a1b      	ldr	r2, [pc, #108]	; (8010050 <_printf_float+0x2f0>)
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	4631      	mov	r1, r6
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	47b8      	blx	r7
 800ffea:	3001      	adds	r0, #1
 800ffec:	f43f af19 	beq.w	800fe22 <_printf_float+0xc2>
 800fff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fff4:	4313      	orrs	r3, r2
 800fff6:	d102      	bne.n	800fffe <_printf_float+0x29e>
 800fff8:	6823      	ldr	r3, [r4, #0]
 800fffa:	07d9      	lsls	r1, r3, #31
 800fffc:	d5d8      	bpl.n	800ffb0 <_printf_float+0x250>
 800fffe:	ee18 3a10 	vmov	r3, s16
 8010002:	4652      	mov	r2, sl
 8010004:	4631      	mov	r1, r6
 8010006:	4628      	mov	r0, r5
 8010008:	47b8      	blx	r7
 801000a:	3001      	adds	r0, #1
 801000c:	f43f af09 	beq.w	800fe22 <_printf_float+0xc2>
 8010010:	f04f 0900 	mov.w	r9, #0
 8010014:	f104 0a1a 	add.w	sl, r4, #26
 8010018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801001a:	425b      	negs	r3, r3
 801001c:	454b      	cmp	r3, r9
 801001e:	dc01      	bgt.n	8010024 <_printf_float+0x2c4>
 8010020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010022:	e792      	b.n	800ff4a <_printf_float+0x1ea>
 8010024:	2301      	movs	r3, #1
 8010026:	4652      	mov	r2, sl
 8010028:	4631      	mov	r1, r6
 801002a:	4628      	mov	r0, r5
 801002c:	47b8      	blx	r7
 801002e:	3001      	adds	r0, #1
 8010030:	f43f aef7 	beq.w	800fe22 <_printf_float+0xc2>
 8010034:	f109 0901 	add.w	r9, r9, #1
 8010038:	e7ee      	b.n	8010018 <_printf_float+0x2b8>
 801003a:	bf00      	nop
 801003c:	7fefffff 	.word	0x7fefffff
 8010040:	08012eb4 	.word	0x08012eb4
 8010044:	08012eb8 	.word	0x08012eb8
 8010048:	08012ec0 	.word	0x08012ec0
 801004c:	08012ebc 	.word	0x08012ebc
 8010050:	08012ec4 	.word	0x08012ec4
 8010054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010058:	429a      	cmp	r2, r3
 801005a:	bfa8      	it	ge
 801005c:	461a      	movge	r2, r3
 801005e:	2a00      	cmp	r2, #0
 8010060:	4691      	mov	r9, r2
 8010062:	dc37      	bgt.n	80100d4 <_printf_float+0x374>
 8010064:	f04f 0b00 	mov.w	fp, #0
 8010068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801006c:	f104 021a 	add.w	r2, r4, #26
 8010070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010072:	9305      	str	r3, [sp, #20]
 8010074:	eba3 0309 	sub.w	r3, r3, r9
 8010078:	455b      	cmp	r3, fp
 801007a:	dc33      	bgt.n	80100e4 <_printf_float+0x384>
 801007c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010080:	429a      	cmp	r2, r3
 8010082:	db3b      	blt.n	80100fc <_printf_float+0x39c>
 8010084:	6823      	ldr	r3, [r4, #0]
 8010086:	07da      	lsls	r2, r3, #31
 8010088:	d438      	bmi.n	80100fc <_printf_float+0x39c>
 801008a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801008c:	9b05      	ldr	r3, [sp, #20]
 801008e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010090:	1ad3      	subs	r3, r2, r3
 8010092:	eba2 0901 	sub.w	r9, r2, r1
 8010096:	4599      	cmp	r9, r3
 8010098:	bfa8      	it	ge
 801009a:	4699      	movge	r9, r3
 801009c:	f1b9 0f00 	cmp.w	r9, #0
 80100a0:	dc35      	bgt.n	801010e <_printf_float+0x3ae>
 80100a2:	f04f 0800 	mov.w	r8, #0
 80100a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80100aa:	f104 0a1a 	add.w	sl, r4, #26
 80100ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80100b2:	1a9b      	subs	r3, r3, r2
 80100b4:	eba3 0309 	sub.w	r3, r3, r9
 80100b8:	4543      	cmp	r3, r8
 80100ba:	f77f af79 	ble.w	800ffb0 <_printf_float+0x250>
 80100be:	2301      	movs	r3, #1
 80100c0:	4652      	mov	r2, sl
 80100c2:	4631      	mov	r1, r6
 80100c4:	4628      	mov	r0, r5
 80100c6:	47b8      	blx	r7
 80100c8:	3001      	adds	r0, #1
 80100ca:	f43f aeaa 	beq.w	800fe22 <_printf_float+0xc2>
 80100ce:	f108 0801 	add.w	r8, r8, #1
 80100d2:	e7ec      	b.n	80100ae <_printf_float+0x34e>
 80100d4:	4613      	mov	r3, r2
 80100d6:	4631      	mov	r1, r6
 80100d8:	4642      	mov	r2, r8
 80100da:	4628      	mov	r0, r5
 80100dc:	47b8      	blx	r7
 80100de:	3001      	adds	r0, #1
 80100e0:	d1c0      	bne.n	8010064 <_printf_float+0x304>
 80100e2:	e69e      	b.n	800fe22 <_printf_float+0xc2>
 80100e4:	2301      	movs	r3, #1
 80100e6:	4631      	mov	r1, r6
 80100e8:	4628      	mov	r0, r5
 80100ea:	9205      	str	r2, [sp, #20]
 80100ec:	47b8      	blx	r7
 80100ee:	3001      	adds	r0, #1
 80100f0:	f43f ae97 	beq.w	800fe22 <_printf_float+0xc2>
 80100f4:	9a05      	ldr	r2, [sp, #20]
 80100f6:	f10b 0b01 	add.w	fp, fp, #1
 80100fa:	e7b9      	b.n	8010070 <_printf_float+0x310>
 80100fc:	ee18 3a10 	vmov	r3, s16
 8010100:	4652      	mov	r2, sl
 8010102:	4631      	mov	r1, r6
 8010104:	4628      	mov	r0, r5
 8010106:	47b8      	blx	r7
 8010108:	3001      	adds	r0, #1
 801010a:	d1be      	bne.n	801008a <_printf_float+0x32a>
 801010c:	e689      	b.n	800fe22 <_printf_float+0xc2>
 801010e:	9a05      	ldr	r2, [sp, #20]
 8010110:	464b      	mov	r3, r9
 8010112:	4442      	add	r2, r8
 8010114:	4631      	mov	r1, r6
 8010116:	4628      	mov	r0, r5
 8010118:	47b8      	blx	r7
 801011a:	3001      	adds	r0, #1
 801011c:	d1c1      	bne.n	80100a2 <_printf_float+0x342>
 801011e:	e680      	b.n	800fe22 <_printf_float+0xc2>
 8010120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010122:	2a01      	cmp	r2, #1
 8010124:	dc01      	bgt.n	801012a <_printf_float+0x3ca>
 8010126:	07db      	lsls	r3, r3, #31
 8010128:	d538      	bpl.n	801019c <_printf_float+0x43c>
 801012a:	2301      	movs	r3, #1
 801012c:	4642      	mov	r2, r8
 801012e:	4631      	mov	r1, r6
 8010130:	4628      	mov	r0, r5
 8010132:	47b8      	blx	r7
 8010134:	3001      	adds	r0, #1
 8010136:	f43f ae74 	beq.w	800fe22 <_printf_float+0xc2>
 801013a:	ee18 3a10 	vmov	r3, s16
 801013e:	4652      	mov	r2, sl
 8010140:	4631      	mov	r1, r6
 8010142:	4628      	mov	r0, r5
 8010144:	47b8      	blx	r7
 8010146:	3001      	adds	r0, #1
 8010148:	f43f ae6b 	beq.w	800fe22 <_printf_float+0xc2>
 801014c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010150:	2200      	movs	r2, #0
 8010152:	2300      	movs	r3, #0
 8010154:	f7f0 fd30 	bl	8000bb8 <__aeabi_dcmpeq>
 8010158:	b9d8      	cbnz	r0, 8010192 <_printf_float+0x432>
 801015a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801015c:	f108 0201 	add.w	r2, r8, #1
 8010160:	3b01      	subs	r3, #1
 8010162:	4631      	mov	r1, r6
 8010164:	4628      	mov	r0, r5
 8010166:	47b8      	blx	r7
 8010168:	3001      	adds	r0, #1
 801016a:	d10e      	bne.n	801018a <_printf_float+0x42a>
 801016c:	e659      	b.n	800fe22 <_printf_float+0xc2>
 801016e:	2301      	movs	r3, #1
 8010170:	4652      	mov	r2, sl
 8010172:	4631      	mov	r1, r6
 8010174:	4628      	mov	r0, r5
 8010176:	47b8      	blx	r7
 8010178:	3001      	adds	r0, #1
 801017a:	f43f ae52 	beq.w	800fe22 <_printf_float+0xc2>
 801017e:	f108 0801 	add.w	r8, r8, #1
 8010182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010184:	3b01      	subs	r3, #1
 8010186:	4543      	cmp	r3, r8
 8010188:	dcf1      	bgt.n	801016e <_printf_float+0x40e>
 801018a:	464b      	mov	r3, r9
 801018c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010190:	e6dc      	b.n	800ff4c <_printf_float+0x1ec>
 8010192:	f04f 0800 	mov.w	r8, #0
 8010196:	f104 0a1a 	add.w	sl, r4, #26
 801019a:	e7f2      	b.n	8010182 <_printf_float+0x422>
 801019c:	2301      	movs	r3, #1
 801019e:	4642      	mov	r2, r8
 80101a0:	e7df      	b.n	8010162 <_printf_float+0x402>
 80101a2:	2301      	movs	r3, #1
 80101a4:	464a      	mov	r2, r9
 80101a6:	4631      	mov	r1, r6
 80101a8:	4628      	mov	r0, r5
 80101aa:	47b8      	blx	r7
 80101ac:	3001      	adds	r0, #1
 80101ae:	f43f ae38 	beq.w	800fe22 <_printf_float+0xc2>
 80101b2:	f108 0801 	add.w	r8, r8, #1
 80101b6:	68e3      	ldr	r3, [r4, #12]
 80101b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80101ba:	1a5b      	subs	r3, r3, r1
 80101bc:	4543      	cmp	r3, r8
 80101be:	dcf0      	bgt.n	80101a2 <_printf_float+0x442>
 80101c0:	e6fa      	b.n	800ffb8 <_printf_float+0x258>
 80101c2:	f04f 0800 	mov.w	r8, #0
 80101c6:	f104 0919 	add.w	r9, r4, #25
 80101ca:	e7f4      	b.n	80101b6 <_printf_float+0x456>

080101cc <_printf_common>:
 80101cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d0:	4616      	mov	r6, r2
 80101d2:	4699      	mov	r9, r3
 80101d4:	688a      	ldr	r2, [r1, #8]
 80101d6:	690b      	ldr	r3, [r1, #16]
 80101d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101dc:	4293      	cmp	r3, r2
 80101de:	bfb8      	it	lt
 80101e0:	4613      	movlt	r3, r2
 80101e2:	6033      	str	r3, [r6, #0]
 80101e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101e8:	4607      	mov	r7, r0
 80101ea:	460c      	mov	r4, r1
 80101ec:	b10a      	cbz	r2, 80101f2 <_printf_common+0x26>
 80101ee:	3301      	adds	r3, #1
 80101f0:	6033      	str	r3, [r6, #0]
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	0699      	lsls	r1, r3, #26
 80101f6:	bf42      	ittt	mi
 80101f8:	6833      	ldrmi	r3, [r6, #0]
 80101fa:	3302      	addmi	r3, #2
 80101fc:	6033      	strmi	r3, [r6, #0]
 80101fe:	6825      	ldr	r5, [r4, #0]
 8010200:	f015 0506 	ands.w	r5, r5, #6
 8010204:	d106      	bne.n	8010214 <_printf_common+0x48>
 8010206:	f104 0a19 	add.w	sl, r4, #25
 801020a:	68e3      	ldr	r3, [r4, #12]
 801020c:	6832      	ldr	r2, [r6, #0]
 801020e:	1a9b      	subs	r3, r3, r2
 8010210:	42ab      	cmp	r3, r5
 8010212:	dc26      	bgt.n	8010262 <_printf_common+0x96>
 8010214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010218:	1e13      	subs	r3, r2, #0
 801021a:	6822      	ldr	r2, [r4, #0]
 801021c:	bf18      	it	ne
 801021e:	2301      	movne	r3, #1
 8010220:	0692      	lsls	r2, r2, #26
 8010222:	d42b      	bmi.n	801027c <_printf_common+0xb0>
 8010224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010228:	4649      	mov	r1, r9
 801022a:	4638      	mov	r0, r7
 801022c:	47c0      	blx	r8
 801022e:	3001      	adds	r0, #1
 8010230:	d01e      	beq.n	8010270 <_printf_common+0xa4>
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	68e5      	ldr	r5, [r4, #12]
 8010236:	6832      	ldr	r2, [r6, #0]
 8010238:	f003 0306 	and.w	r3, r3, #6
 801023c:	2b04      	cmp	r3, #4
 801023e:	bf08      	it	eq
 8010240:	1aad      	subeq	r5, r5, r2
 8010242:	68a3      	ldr	r3, [r4, #8]
 8010244:	6922      	ldr	r2, [r4, #16]
 8010246:	bf0c      	ite	eq
 8010248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801024c:	2500      	movne	r5, #0
 801024e:	4293      	cmp	r3, r2
 8010250:	bfc4      	itt	gt
 8010252:	1a9b      	subgt	r3, r3, r2
 8010254:	18ed      	addgt	r5, r5, r3
 8010256:	2600      	movs	r6, #0
 8010258:	341a      	adds	r4, #26
 801025a:	42b5      	cmp	r5, r6
 801025c:	d11a      	bne.n	8010294 <_printf_common+0xc8>
 801025e:	2000      	movs	r0, #0
 8010260:	e008      	b.n	8010274 <_printf_common+0xa8>
 8010262:	2301      	movs	r3, #1
 8010264:	4652      	mov	r2, sl
 8010266:	4649      	mov	r1, r9
 8010268:	4638      	mov	r0, r7
 801026a:	47c0      	blx	r8
 801026c:	3001      	adds	r0, #1
 801026e:	d103      	bne.n	8010278 <_printf_common+0xac>
 8010270:	f04f 30ff 	mov.w	r0, #4294967295
 8010274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010278:	3501      	adds	r5, #1
 801027a:	e7c6      	b.n	801020a <_printf_common+0x3e>
 801027c:	18e1      	adds	r1, r4, r3
 801027e:	1c5a      	adds	r2, r3, #1
 8010280:	2030      	movs	r0, #48	; 0x30
 8010282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010286:	4422      	add	r2, r4
 8010288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801028c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010290:	3302      	adds	r3, #2
 8010292:	e7c7      	b.n	8010224 <_printf_common+0x58>
 8010294:	2301      	movs	r3, #1
 8010296:	4622      	mov	r2, r4
 8010298:	4649      	mov	r1, r9
 801029a:	4638      	mov	r0, r7
 801029c:	47c0      	blx	r8
 801029e:	3001      	adds	r0, #1
 80102a0:	d0e6      	beq.n	8010270 <_printf_common+0xa4>
 80102a2:	3601      	adds	r6, #1
 80102a4:	e7d9      	b.n	801025a <_printf_common+0x8e>
	...

080102a8 <_printf_i>:
 80102a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102ac:	460c      	mov	r4, r1
 80102ae:	4691      	mov	r9, r2
 80102b0:	7e27      	ldrb	r7, [r4, #24]
 80102b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80102b4:	2f78      	cmp	r7, #120	; 0x78
 80102b6:	4680      	mov	r8, r0
 80102b8:	469a      	mov	sl, r3
 80102ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102be:	d807      	bhi.n	80102d0 <_printf_i+0x28>
 80102c0:	2f62      	cmp	r7, #98	; 0x62
 80102c2:	d80a      	bhi.n	80102da <_printf_i+0x32>
 80102c4:	2f00      	cmp	r7, #0
 80102c6:	f000 80d8 	beq.w	801047a <_printf_i+0x1d2>
 80102ca:	2f58      	cmp	r7, #88	; 0x58
 80102cc:	f000 80a3 	beq.w	8010416 <_printf_i+0x16e>
 80102d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80102d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80102d8:	e03a      	b.n	8010350 <_printf_i+0xa8>
 80102da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80102de:	2b15      	cmp	r3, #21
 80102e0:	d8f6      	bhi.n	80102d0 <_printf_i+0x28>
 80102e2:	a001      	add	r0, pc, #4	; (adr r0, 80102e8 <_printf_i+0x40>)
 80102e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80102e8:	08010341 	.word	0x08010341
 80102ec:	08010355 	.word	0x08010355
 80102f0:	080102d1 	.word	0x080102d1
 80102f4:	080102d1 	.word	0x080102d1
 80102f8:	080102d1 	.word	0x080102d1
 80102fc:	080102d1 	.word	0x080102d1
 8010300:	08010355 	.word	0x08010355
 8010304:	080102d1 	.word	0x080102d1
 8010308:	080102d1 	.word	0x080102d1
 801030c:	080102d1 	.word	0x080102d1
 8010310:	080102d1 	.word	0x080102d1
 8010314:	08010461 	.word	0x08010461
 8010318:	08010385 	.word	0x08010385
 801031c:	08010443 	.word	0x08010443
 8010320:	080102d1 	.word	0x080102d1
 8010324:	080102d1 	.word	0x080102d1
 8010328:	08010483 	.word	0x08010483
 801032c:	080102d1 	.word	0x080102d1
 8010330:	08010385 	.word	0x08010385
 8010334:	080102d1 	.word	0x080102d1
 8010338:	080102d1 	.word	0x080102d1
 801033c:	0801044b 	.word	0x0801044b
 8010340:	680b      	ldr	r3, [r1, #0]
 8010342:	1d1a      	adds	r2, r3, #4
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	600a      	str	r2, [r1, #0]
 8010348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801034c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010350:	2301      	movs	r3, #1
 8010352:	e0a3      	b.n	801049c <_printf_i+0x1f4>
 8010354:	6825      	ldr	r5, [r4, #0]
 8010356:	6808      	ldr	r0, [r1, #0]
 8010358:	062e      	lsls	r6, r5, #24
 801035a:	f100 0304 	add.w	r3, r0, #4
 801035e:	d50a      	bpl.n	8010376 <_printf_i+0xce>
 8010360:	6805      	ldr	r5, [r0, #0]
 8010362:	600b      	str	r3, [r1, #0]
 8010364:	2d00      	cmp	r5, #0
 8010366:	da03      	bge.n	8010370 <_printf_i+0xc8>
 8010368:	232d      	movs	r3, #45	; 0x2d
 801036a:	426d      	negs	r5, r5
 801036c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010370:	485e      	ldr	r0, [pc, #376]	; (80104ec <_printf_i+0x244>)
 8010372:	230a      	movs	r3, #10
 8010374:	e019      	b.n	80103aa <_printf_i+0x102>
 8010376:	f015 0f40 	tst.w	r5, #64	; 0x40
 801037a:	6805      	ldr	r5, [r0, #0]
 801037c:	600b      	str	r3, [r1, #0]
 801037e:	bf18      	it	ne
 8010380:	b22d      	sxthne	r5, r5
 8010382:	e7ef      	b.n	8010364 <_printf_i+0xbc>
 8010384:	680b      	ldr	r3, [r1, #0]
 8010386:	6825      	ldr	r5, [r4, #0]
 8010388:	1d18      	adds	r0, r3, #4
 801038a:	6008      	str	r0, [r1, #0]
 801038c:	0628      	lsls	r0, r5, #24
 801038e:	d501      	bpl.n	8010394 <_printf_i+0xec>
 8010390:	681d      	ldr	r5, [r3, #0]
 8010392:	e002      	b.n	801039a <_printf_i+0xf2>
 8010394:	0669      	lsls	r1, r5, #25
 8010396:	d5fb      	bpl.n	8010390 <_printf_i+0xe8>
 8010398:	881d      	ldrh	r5, [r3, #0]
 801039a:	4854      	ldr	r0, [pc, #336]	; (80104ec <_printf_i+0x244>)
 801039c:	2f6f      	cmp	r7, #111	; 0x6f
 801039e:	bf0c      	ite	eq
 80103a0:	2308      	moveq	r3, #8
 80103a2:	230a      	movne	r3, #10
 80103a4:	2100      	movs	r1, #0
 80103a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80103aa:	6866      	ldr	r6, [r4, #4]
 80103ac:	60a6      	str	r6, [r4, #8]
 80103ae:	2e00      	cmp	r6, #0
 80103b0:	bfa2      	ittt	ge
 80103b2:	6821      	ldrge	r1, [r4, #0]
 80103b4:	f021 0104 	bicge.w	r1, r1, #4
 80103b8:	6021      	strge	r1, [r4, #0]
 80103ba:	b90d      	cbnz	r5, 80103c0 <_printf_i+0x118>
 80103bc:	2e00      	cmp	r6, #0
 80103be:	d04d      	beq.n	801045c <_printf_i+0x1b4>
 80103c0:	4616      	mov	r6, r2
 80103c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80103c6:	fb03 5711 	mls	r7, r3, r1, r5
 80103ca:	5dc7      	ldrb	r7, [r0, r7]
 80103cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80103d0:	462f      	mov	r7, r5
 80103d2:	42bb      	cmp	r3, r7
 80103d4:	460d      	mov	r5, r1
 80103d6:	d9f4      	bls.n	80103c2 <_printf_i+0x11a>
 80103d8:	2b08      	cmp	r3, #8
 80103da:	d10b      	bne.n	80103f4 <_printf_i+0x14c>
 80103dc:	6823      	ldr	r3, [r4, #0]
 80103de:	07df      	lsls	r7, r3, #31
 80103e0:	d508      	bpl.n	80103f4 <_printf_i+0x14c>
 80103e2:	6923      	ldr	r3, [r4, #16]
 80103e4:	6861      	ldr	r1, [r4, #4]
 80103e6:	4299      	cmp	r1, r3
 80103e8:	bfde      	ittt	le
 80103ea:	2330      	movle	r3, #48	; 0x30
 80103ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80103f4:	1b92      	subs	r2, r2, r6
 80103f6:	6122      	str	r2, [r4, #16]
 80103f8:	f8cd a000 	str.w	sl, [sp]
 80103fc:	464b      	mov	r3, r9
 80103fe:	aa03      	add	r2, sp, #12
 8010400:	4621      	mov	r1, r4
 8010402:	4640      	mov	r0, r8
 8010404:	f7ff fee2 	bl	80101cc <_printf_common>
 8010408:	3001      	adds	r0, #1
 801040a:	d14c      	bne.n	80104a6 <_printf_i+0x1fe>
 801040c:	f04f 30ff 	mov.w	r0, #4294967295
 8010410:	b004      	add	sp, #16
 8010412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010416:	4835      	ldr	r0, [pc, #212]	; (80104ec <_printf_i+0x244>)
 8010418:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801041c:	6823      	ldr	r3, [r4, #0]
 801041e:	680e      	ldr	r6, [r1, #0]
 8010420:	061f      	lsls	r7, r3, #24
 8010422:	f856 5b04 	ldr.w	r5, [r6], #4
 8010426:	600e      	str	r6, [r1, #0]
 8010428:	d514      	bpl.n	8010454 <_printf_i+0x1ac>
 801042a:	07d9      	lsls	r1, r3, #31
 801042c:	bf44      	itt	mi
 801042e:	f043 0320 	orrmi.w	r3, r3, #32
 8010432:	6023      	strmi	r3, [r4, #0]
 8010434:	b91d      	cbnz	r5, 801043e <_printf_i+0x196>
 8010436:	6823      	ldr	r3, [r4, #0]
 8010438:	f023 0320 	bic.w	r3, r3, #32
 801043c:	6023      	str	r3, [r4, #0]
 801043e:	2310      	movs	r3, #16
 8010440:	e7b0      	b.n	80103a4 <_printf_i+0xfc>
 8010442:	6823      	ldr	r3, [r4, #0]
 8010444:	f043 0320 	orr.w	r3, r3, #32
 8010448:	6023      	str	r3, [r4, #0]
 801044a:	2378      	movs	r3, #120	; 0x78
 801044c:	4828      	ldr	r0, [pc, #160]	; (80104f0 <_printf_i+0x248>)
 801044e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010452:	e7e3      	b.n	801041c <_printf_i+0x174>
 8010454:	065e      	lsls	r6, r3, #25
 8010456:	bf48      	it	mi
 8010458:	b2ad      	uxthmi	r5, r5
 801045a:	e7e6      	b.n	801042a <_printf_i+0x182>
 801045c:	4616      	mov	r6, r2
 801045e:	e7bb      	b.n	80103d8 <_printf_i+0x130>
 8010460:	680b      	ldr	r3, [r1, #0]
 8010462:	6826      	ldr	r6, [r4, #0]
 8010464:	6960      	ldr	r0, [r4, #20]
 8010466:	1d1d      	adds	r5, r3, #4
 8010468:	600d      	str	r5, [r1, #0]
 801046a:	0635      	lsls	r5, r6, #24
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	d501      	bpl.n	8010474 <_printf_i+0x1cc>
 8010470:	6018      	str	r0, [r3, #0]
 8010472:	e002      	b.n	801047a <_printf_i+0x1d2>
 8010474:	0671      	lsls	r1, r6, #25
 8010476:	d5fb      	bpl.n	8010470 <_printf_i+0x1c8>
 8010478:	8018      	strh	r0, [r3, #0]
 801047a:	2300      	movs	r3, #0
 801047c:	6123      	str	r3, [r4, #16]
 801047e:	4616      	mov	r6, r2
 8010480:	e7ba      	b.n	80103f8 <_printf_i+0x150>
 8010482:	680b      	ldr	r3, [r1, #0]
 8010484:	1d1a      	adds	r2, r3, #4
 8010486:	600a      	str	r2, [r1, #0]
 8010488:	681e      	ldr	r6, [r3, #0]
 801048a:	6862      	ldr	r2, [r4, #4]
 801048c:	2100      	movs	r1, #0
 801048e:	4630      	mov	r0, r6
 8010490:	f7ef ff1e 	bl	80002d0 <memchr>
 8010494:	b108      	cbz	r0, 801049a <_printf_i+0x1f2>
 8010496:	1b80      	subs	r0, r0, r6
 8010498:	6060      	str	r0, [r4, #4]
 801049a:	6863      	ldr	r3, [r4, #4]
 801049c:	6123      	str	r3, [r4, #16]
 801049e:	2300      	movs	r3, #0
 80104a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104a4:	e7a8      	b.n	80103f8 <_printf_i+0x150>
 80104a6:	6923      	ldr	r3, [r4, #16]
 80104a8:	4632      	mov	r2, r6
 80104aa:	4649      	mov	r1, r9
 80104ac:	4640      	mov	r0, r8
 80104ae:	47d0      	blx	sl
 80104b0:	3001      	adds	r0, #1
 80104b2:	d0ab      	beq.n	801040c <_printf_i+0x164>
 80104b4:	6823      	ldr	r3, [r4, #0]
 80104b6:	079b      	lsls	r3, r3, #30
 80104b8:	d413      	bmi.n	80104e2 <_printf_i+0x23a>
 80104ba:	68e0      	ldr	r0, [r4, #12]
 80104bc:	9b03      	ldr	r3, [sp, #12]
 80104be:	4298      	cmp	r0, r3
 80104c0:	bfb8      	it	lt
 80104c2:	4618      	movlt	r0, r3
 80104c4:	e7a4      	b.n	8010410 <_printf_i+0x168>
 80104c6:	2301      	movs	r3, #1
 80104c8:	4632      	mov	r2, r6
 80104ca:	4649      	mov	r1, r9
 80104cc:	4640      	mov	r0, r8
 80104ce:	47d0      	blx	sl
 80104d0:	3001      	adds	r0, #1
 80104d2:	d09b      	beq.n	801040c <_printf_i+0x164>
 80104d4:	3501      	adds	r5, #1
 80104d6:	68e3      	ldr	r3, [r4, #12]
 80104d8:	9903      	ldr	r1, [sp, #12]
 80104da:	1a5b      	subs	r3, r3, r1
 80104dc:	42ab      	cmp	r3, r5
 80104de:	dcf2      	bgt.n	80104c6 <_printf_i+0x21e>
 80104e0:	e7eb      	b.n	80104ba <_printf_i+0x212>
 80104e2:	2500      	movs	r5, #0
 80104e4:	f104 0619 	add.w	r6, r4, #25
 80104e8:	e7f5      	b.n	80104d6 <_printf_i+0x22e>
 80104ea:	bf00      	nop
 80104ec:	08012ec6 	.word	0x08012ec6
 80104f0:	08012ed7 	.word	0x08012ed7

080104f4 <sniprintf>:
 80104f4:	b40c      	push	{r2, r3}
 80104f6:	b530      	push	{r4, r5, lr}
 80104f8:	4b17      	ldr	r3, [pc, #92]	; (8010558 <sniprintf+0x64>)
 80104fa:	1e0c      	subs	r4, r1, #0
 80104fc:	681d      	ldr	r5, [r3, #0]
 80104fe:	b09d      	sub	sp, #116	; 0x74
 8010500:	da08      	bge.n	8010514 <sniprintf+0x20>
 8010502:	238b      	movs	r3, #139	; 0x8b
 8010504:	602b      	str	r3, [r5, #0]
 8010506:	f04f 30ff 	mov.w	r0, #4294967295
 801050a:	b01d      	add	sp, #116	; 0x74
 801050c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010510:	b002      	add	sp, #8
 8010512:	4770      	bx	lr
 8010514:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010518:	f8ad 3014 	strh.w	r3, [sp, #20]
 801051c:	bf14      	ite	ne
 801051e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010522:	4623      	moveq	r3, r4
 8010524:	9304      	str	r3, [sp, #16]
 8010526:	9307      	str	r3, [sp, #28]
 8010528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801052c:	9002      	str	r0, [sp, #8]
 801052e:	9006      	str	r0, [sp, #24]
 8010530:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010534:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010536:	ab21      	add	r3, sp, #132	; 0x84
 8010538:	a902      	add	r1, sp, #8
 801053a:	4628      	mov	r0, r5
 801053c:	9301      	str	r3, [sp, #4]
 801053e:	f001 fb47 	bl	8011bd0 <_svfiprintf_r>
 8010542:	1c43      	adds	r3, r0, #1
 8010544:	bfbc      	itt	lt
 8010546:	238b      	movlt	r3, #139	; 0x8b
 8010548:	602b      	strlt	r3, [r5, #0]
 801054a:	2c00      	cmp	r4, #0
 801054c:	d0dd      	beq.n	801050a <sniprintf+0x16>
 801054e:	9b02      	ldr	r3, [sp, #8]
 8010550:	2200      	movs	r2, #0
 8010552:	701a      	strb	r2, [r3, #0]
 8010554:	e7d9      	b.n	801050a <sniprintf+0x16>
 8010556:	bf00      	nop
 8010558:	20000034 	.word	0x20000034

0801055c <siprintf>:
 801055c:	b40e      	push	{r1, r2, r3}
 801055e:	b500      	push	{lr}
 8010560:	b09c      	sub	sp, #112	; 0x70
 8010562:	ab1d      	add	r3, sp, #116	; 0x74
 8010564:	9002      	str	r0, [sp, #8]
 8010566:	9006      	str	r0, [sp, #24]
 8010568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801056c:	4809      	ldr	r0, [pc, #36]	; (8010594 <siprintf+0x38>)
 801056e:	9107      	str	r1, [sp, #28]
 8010570:	9104      	str	r1, [sp, #16]
 8010572:	4909      	ldr	r1, [pc, #36]	; (8010598 <siprintf+0x3c>)
 8010574:	f853 2b04 	ldr.w	r2, [r3], #4
 8010578:	9105      	str	r1, [sp, #20]
 801057a:	6800      	ldr	r0, [r0, #0]
 801057c:	9301      	str	r3, [sp, #4]
 801057e:	a902      	add	r1, sp, #8
 8010580:	f001 fb26 	bl	8011bd0 <_svfiprintf_r>
 8010584:	9b02      	ldr	r3, [sp, #8]
 8010586:	2200      	movs	r2, #0
 8010588:	701a      	strb	r2, [r3, #0]
 801058a:	b01c      	add	sp, #112	; 0x70
 801058c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010590:	b003      	add	sp, #12
 8010592:	4770      	bx	lr
 8010594:	20000034 	.word	0x20000034
 8010598:	ffff0208 	.word	0xffff0208

0801059c <quorem>:
 801059c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a0:	6903      	ldr	r3, [r0, #16]
 80105a2:	690c      	ldr	r4, [r1, #16]
 80105a4:	42a3      	cmp	r3, r4
 80105a6:	4607      	mov	r7, r0
 80105a8:	f2c0 8081 	blt.w	80106ae <quorem+0x112>
 80105ac:	3c01      	subs	r4, #1
 80105ae:	f101 0814 	add.w	r8, r1, #20
 80105b2:	f100 0514 	add.w	r5, r0, #20
 80105b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80105ba:	9301      	str	r3, [sp, #4]
 80105bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80105c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80105c4:	3301      	adds	r3, #1
 80105c6:	429a      	cmp	r2, r3
 80105c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80105cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80105d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80105d4:	d331      	bcc.n	801063a <quorem+0x9e>
 80105d6:	f04f 0e00 	mov.w	lr, #0
 80105da:	4640      	mov	r0, r8
 80105dc:	46ac      	mov	ip, r5
 80105de:	46f2      	mov	sl, lr
 80105e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80105e4:	b293      	uxth	r3, r2
 80105e6:	fb06 e303 	mla	r3, r6, r3, lr
 80105ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	ebaa 0303 	sub.w	r3, sl, r3
 80105f4:	0c12      	lsrs	r2, r2, #16
 80105f6:	f8dc a000 	ldr.w	sl, [ip]
 80105fa:	fb06 e202 	mla	r2, r6, r2, lr
 80105fe:	fa13 f38a 	uxtah	r3, r3, sl
 8010602:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010606:	fa1f fa82 	uxth.w	sl, r2
 801060a:	f8dc 2000 	ldr.w	r2, [ip]
 801060e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010616:	b29b      	uxth	r3, r3
 8010618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801061c:	4581      	cmp	r9, r0
 801061e:	f84c 3b04 	str.w	r3, [ip], #4
 8010622:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010626:	d2db      	bcs.n	80105e0 <quorem+0x44>
 8010628:	f855 300b 	ldr.w	r3, [r5, fp]
 801062c:	b92b      	cbnz	r3, 801063a <quorem+0x9e>
 801062e:	9b01      	ldr	r3, [sp, #4]
 8010630:	3b04      	subs	r3, #4
 8010632:	429d      	cmp	r5, r3
 8010634:	461a      	mov	r2, r3
 8010636:	d32e      	bcc.n	8010696 <quorem+0xfa>
 8010638:	613c      	str	r4, [r7, #16]
 801063a:	4638      	mov	r0, r7
 801063c:	f001 f8b2 	bl	80117a4 <__mcmp>
 8010640:	2800      	cmp	r0, #0
 8010642:	db24      	blt.n	801068e <quorem+0xf2>
 8010644:	3601      	adds	r6, #1
 8010646:	4628      	mov	r0, r5
 8010648:	f04f 0c00 	mov.w	ip, #0
 801064c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010650:	f8d0 e000 	ldr.w	lr, [r0]
 8010654:	b293      	uxth	r3, r2
 8010656:	ebac 0303 	sub.w	r3, ip, r3
 801065a:	0c12      	lsrs	r2, r2, #16
 801065c:	fa13 f38e 	uxtah	r3, r3, lr
 8010660:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010664:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010668:	b29b      	uxth	r3, r3
 801066a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801066e:	45c1      	cmp	r9, r8
 8010670:	f840 3b04 	str.w	r3, [r0], #4
 8010674:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010678:	d2e8      	bcs.n	801064c <quorem+0xb0>
 801067a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801067e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010682:	b922      	cbnz	r2, 801068e <quorem+0xf2>
 8010684:	3b04      	subs	r3, #4
 8010686:	429d      	cmp	r5, r3
 8010688:	461a      	mov	r2, r3
 801068a:	d30a      	bcc.n	80106a2 <quorem+0x106>
 801068c:	613c      	str	r4, [r7, #16]
 801068e:	4630      	mov	r0, r6
 8010690:	b003      	add	sp, #12
 8010692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010696:	6812      	ldr	r2, [r2, #0]
 8010698:	3b04      	subs	r3, #4
 801069a:	2a00      	cmp	r2, #0
 801069c:	d1cc      	bne.n	8010638 <quorem+0x9c>
 801069e:	3c01      	subs	r4, #1
 80106a0:	e7c7      	b.n	8010632 <quorem+0x96>
 80106a2:	6812      	ldr	r2, [r2, #0]
 80106a4:	3b04      	subs	r3, #4
 80106a6:	2a00      	cmp	r2, #0
 80106a8:	d1f0      	bne.n	801068c <quorem+0xf0>
 80106aa:	3c01      	subs	r4, #1
 80106ac:	e7eb      	b.n	8010686 <quorem+0xea>
 80106ae:	2000      	movs	r0, #0
 80106b0:	e7ee      	b.n	8010690 <quorem+0xf4>
 80106b2:	0000      	movs	r0, r0
 80106b4:	0000      	movs	r0, r0
	...

080106b8 <_dtoa_r>:
 80106b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106bc:	ed2d 8b02 	vpush	{d8}
 80106c0:	ec57 6b10 	vmov	r6, r7, d0
 80106c4:	b095      	sub	sp, #84	; 0x54
 80106c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80106c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80106cc:	9105      	str	r1, [sp, #20]
 80106ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80106d2:	4604      	mov	r4, r0
 80106d4:	9209      	str	r2, [sp, #36]	; 0x24
 80106d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80106d8:	b975      	cbnz	r5, 80106f8 <_dtoa_r+0x40>
 80106da:	2010      	movs	r0, #16
 80106dc:	f000 fddc 	bl	8011298 <malloc>
 80106e0:	4602      	mov	r2, r0
 80106e2:	6260      	str	r0, [r4, #36]	; 0x24
 80106e4:	b920      	cbnz	r0, 80106f0 <_dtoa_r+0x38>
 80106e6:	4bb2      	ldr	r3, [pc, #712]	; (80109b0 <_dtoa_r+0x2f8>)
 80106e8:	21ea      	movs	r1, #234	; 0xea
 80106ea:	48b2      	ldr	r0, [pc, #712]	; (80109b4 <_dtoa_r+0x2fc>)
 80106ec:	f001 fb80 	bl	8011df0 <__assert_func>
 80106f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106f4:	6005      	str	r5, [r0, #0]
 80106f6:	60c5      	str	r5, [r0, #12]
 80106f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106fa:	6819      	ldr	r1, [r3, #0]
 80106fc:	b151      	cbz	r1, 8010714 <_dtoa_r+0x5c>
 80106fe:	685a      	ldr	r2, [r3, #4]
 8010700:	604a      	str	r2, [r1, #4]
 8010702:	2301      	movs	r3, #1
 8010704:	4093      	lsls	r3, r2
 8010706:	608b      	str	r3, [r1, #8]
 8010708:	4620      	mov	r0, r4
 801070a:	f000 fe0d 	bl	8011328 <_Bfree>
 801070e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010710:	2200      	movs	r2, #0
 8010712:	601a      	str	r2, [r3, #0]
 8010714:	1e3b      	subs	r3, r7, #0
 8010716:	bfb9      	ittee	lt
 8010718:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801071c:	9303      	strlt	r3, [sp, #12]
 801071e:	2300      	movge	r3, #0
 8010720:	f8c8 3000 	strge.w	r3, [r8]
 8010724:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010728:	4ba3      	ldr	r3, [pc, #652]	; (80109b8 <_dtoa_r+0x300>)
 801072a:	bfbc      	itt	lt
 801072c:	2201      	movlt	r2, #1
 801072e:	f8c8 2000 	strlt.w	r2, [r8]
 8010732:	ea33 0309 	bics.w	r3, r3, r9
 8010736:	d11b      	bne.n	8010770 <_dtoa_r+0xb8>
 8010738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801073a:	f242 730f 	movw	r3, #9999	; 0x270f
 801073e:	6013      	str	r3, [r2, #0]
 8010740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010744:	4333      	orrs	r3, r6
 8010746:	f000 857a 	beq.w	801123e <_dtoa_r+0xb86>
 801074a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801074c:	b963      	cbnz	r3, 8010768 <_dtoa_r+0xb0>
 801074e:	4b9b      	ldr	r3, [pc, #620]	; (80109bc <_dtoa_r+0x304>)
 8010750:	e024      	b.n	801079c <_dtoa_r+0xe4>
 8010752:	4b9b      	ldr	r3, [pc, #620]	; (80109c0 <_dtoa_r+0x308>)
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	3308      	adds	r3, #8
 8010758:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801075a:	6013      	str	r3, [r2, #0]
 801075c:	9800      	ldr	r0, [sp, #0]
 801075e:	b015      	add	sp, #84	; 0x54
 8010760:	ecbd 8b02 	vpop	{d8}
 8010764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010768:	4b94      	ldr	r3, [pc, #592]	; (80109bc <_dtoa_r+0x304>)
 801076a:	9300      	str	r3, [sp, #0]
 801076c:	3303      	adds	r3, #3
 801076e:	e7f3      	b.n	8010758 <_dtoa_r+0xa0>
 8010770:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010774:	2200      	movs	r2, #0
 8010776:	ec51 0b17 	vmov	r0, r1, d7
 801077a:	2300      	movs	r3, #0
 801077c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010780:	f7f0 fa1a 	bl	8000bb8 <__aeabi_dcmpeq>
 8010784:	4680      	mov	r8, r0
 8010786:	b158      	cbz	r0, 80107a0 <_dtoa_r+0xe8>
 8010788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801078a:	2301      	movs	r3, #1
 801078c:	6013      	str	r3, [r2, #0]
 801078e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010790:	2b00      	cmp	r3, #0
 8010792:	f000 8551 	beq.w	8011238 <_dtoa_r+0xb80>
 8010796:	488b      	ldr	r0, [pc, #556]	; (80109c4 <_dtoa_r+0x30c>)
 8010798:	6018      	str	r0, [r3, #0]
 801079a:	1e43      	subs	r3, r0, #1
 801079c:	9300      	str	r3, [sp, #0]
 801079e:	e7dd      	b.n	801075c <_dtoa_r+0xa4>
 80107a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80107a4:	aa12      	add	r2, sp, #72	; 0x48
 80107a6:	a913      	add	r1, sp, #76	; 0x4c
 80107a8:	4620      	mov	r0, r4
 80107aa:	f001 f89f 	bl	80118ec <__d2b>
 80107ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80107b2:	4683      	mov	fp, r0
 80107b4:	2d00      	cmp	r5, #0
 80107b6:	d07c      	beq.n	80108b2 <_dtoa_r+0x1fa>
 80107b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80107ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80107be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80107c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80107c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80107ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80107ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80107d2:	4b7d      	ldr	r3, [pc, #500]	; (80109c8 <_dtoa_r+0x310>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	4630      	mov	r0, r6
 80107d8:	4639      	mov	r1, r7
 80107da:	f7ef fdcd 	bl	8000378 <__aeabi_dsub>
 80107de:	a36e      	add	r3, pc, #440	; (adr r3, 8010998 <_dtoa_r+0x2e0>)
 80107e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e4:	f7ef ff80 	bl	80006e8 <__aeabi_dmul>
 80107e8:	a36d      	add	r3, pc, #436	; (adr r3, 80109a0 <_dtoa_r+0x2e8>)
 80107ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ee:	f7ef fdc5 	bl	800037c <__adddf3>
 80107f2:	4606      	mov	r6, r0
 80107f4:	4628      	mov	r0, r5
 80107f6:	460f      	mov	r7, r1
 80107f8:	f7ef ff0c 	bl	8000614 <__aeabi_i2d>
 80107fc:	a36a      	add	r3, pc, #424	; (adr r3, 80109a8 <_dtoa_r+0x2f0>)
 80107fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010802:	f7ef ff71 	bl	80006e8 <__aeabi_dmul>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	4630      	mov	r0, r6
 801080c:	4639      	mov	r1, r7
 801080e:	f7ef fdb5 	bl	800037c <__adddf3>
 8010812:	4606      	mov	r6, r0
 8010814:	460f      	mov	r7, r1
 8010816:	f7f0 fa17 	bl	8000c48 <__aeabi_d2iz>
 801081a:	2200      	movs	r2, #0
 801081c:	4682      	mov	sl, r0
 801081e:	2300      	movs	r3, #0
 8010820:	4630      	mov	r0, r6
 8010822:	4639      	mov	r1, r7
 8010824:	f7f0 f9d2 	bl	8000bcc <__aeabi_dcmplt>
 8010828:	b148      	cbz	r0, 801083e <_dtoa_r+0x186>
 801082a:	4650      	mov	r0, sl
 801082c:	f7ef fef2 	bl	8000614 <__aeabi_i2d>
 8010830:	4632      	mov	r2, r6
 8010832:	463b      	mov	r3, r7
 8010834:	f7f0 f9c0 	bl	8000bb8 <__aeabi_dcmpeq>
 8010838:	b908      	cbnz	r0, 801083e <_dtoa_r+0x186>
 801083a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801083e:	f1ba 0f16 	cmp.w	sl, #22
 8010842:	d854      	bhi.n	80108ee <_dtoa_r+0x236>
 8010844:	4b61      	ldr	r3, [pc, #388]	; (80109cc <_dtoa_r+0x314>)
 8010846:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801084a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010852:	f7f0 f9bb 	bl	8000bcc <__aeabi_dcmplt>
 8010856:	2800      	cmp	r0, #0
 8010858:	d04b      	beq.n	80108f2 <_dtoa_r+0x23a>
 801085a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801085e:	2300      	movs	r3, #0
 8010860:	930e      	str	r3, [sp, #56]	; 0x38
 8010862:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010864:	1b5d      	subs	r5, r3, r5
 8010866:	1e6b      	subs	r3, r5, #1
 8010868:	9304      	str	r3, [sp, #16]
 801086a:	bf43      	ittte	mi
 801086c:	2300      	movmi	r3, #0
 801086e:	f1c5 0801 	rsbmi	r8, r5, #1
 8010872:	9304      	strmi	r3, [sp, #16]
 8010874:	f04f 0800 	movpl.w	r8, #0
 8010878:	f1ba 0f00 	cmp.w	sl, #0
 801087c:	db3b      	blt.n	80108f6 <_dtoa_r+0x23e>
 801087e:	9b04      	ldr	r3, [sp, #16]
 8010880:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010884:	4453      	add	r3, sl
 8010886:	9304      	str	r3, [sp, #16]
 8010888:	2300      	movs	r3, #0
 801088a:	9306      	str	r3, [sp, #24]
 801088c:	9b05      	ldr	r3, [sp, #20]
 801088e:	2b09      	cmp	r3, #9
 8010890:	d869      	bhi.n	8010966 <_dtoa_r+0x2ae>
 8010892:	2b05      	cmp	r3, #5
 8010894:	bfc4      	itt	gt
 8010896:	3b04      	subgt	r3, #4
 8010898:	9305      	strgt	r3, [sp, #20]
 801089a:	9b05      	ldr	r3, [sp, #20]
 801089c:	f1a3 0302 	sub.w	r3, r3, #2
 80108a0:	bfcc      	ite	gt
 80108a2:	2500      	movgt	r5, #0
 80108a4:	2501      	movle	r5, #1
 80108a6:	2b03      	cmp	r3, #3
 80108a8:	d869      	bhi.n	801097e <_dtoa_r+0x2c6>
 80108aa:	e8df f003 	tbb	[pc, r3]
 80108ae:	4e2c      	.short	0x4e2c
 80108b0:	5a4c      	.short	0x5a4c
 80108b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80108b6:	441d      	add	r5, r3
 80108b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80108bc:	2b20      	cmp	r3, #32
 80108be:	bfc1      	itttt	gt
 80108c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80108c8:	fa09 f303 	lslgt.w	r3, r9, r3
 80108cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80108d0:	bfda      	itte	le
 80108d2:	f1c3 0320 	rsble	r3, r3, #32
 80108d6:	fa06 f003 	lslle.w	r0, r6, r3
 80108da:	4318      	orrgt	r0, r3
 80108dc:	f7ef fe8a 	bl	80005f4 <__aeabi_ui2d>
 80108e0:	2301      	movs	r3, #1
 80108e2:	4606      	mov	r6, r0
 80108e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80108e8:	3d01      	subs	r5, #1
 80108ea:	9310      	str	r3, [sp, #64]	; 0x40
 80108ec:	e771      	b.n	80107d2 <_dtoa_r+0x11a>
 80108ee:	2301      	movs	r3, #1
 80108f0:	e7b6      	b.n	8010860 <_dtoa_r+0x1a8>
 80108f2:	900e      	str	r0, [sp, #56]	; 0x38
 80108f4:	e7b5      	b.n	8010862 <_dtoa_r+0x1aa>
 80108f6:	f1ca 0300 	rsb	r3, sl, #0
 80108fa:	9306      	str	r3, [sp, #24]
 80108fc:	2300      	movs	r3, #0
 80108fe:	eba8 080a 	sub.w	r8, r8, sl
 8010902:	930d      	str	r3, [sp, #52]	; 0x34
 8010904:	e7c2      	b.n	801088c <_dtoa_r+0x1d4>
 8010906:	2300      	movs	r3, #0
 8010908:	9308      	str	r3, [sp, #32]
 801090a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801090c:	2b00      	cmp	r3, #0
 801090e:	dc39      	bgt.n	8010984 <_dtoa_r+0x2cc>
 8010910:	f04f 0901 	mov.w	r9, #1
 8010914:	f8cd 9004 	str.w	r9, [sp, #4]
 8010918:	464b      	mov	r3, r9
 801091a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801091e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010920:	2200      	movs	r2, #0
 8010922:	6042      	str	r2, [r0, #4]
 8010924:	2204      	movs	r2, #4
 8010926:	f102 0614 	add.w	r6, r2, #20
 801092a:	429e      	cmp	r6, r3
 801092c:	6841      	ldr	r1, [r0, #4]
 801092e:	d92f      	bls.n	8010990 <_dtoa_r+0x2d8>
 8010930:	4620      	mov	r0, r4
 8010932:	f000 fcb9 	bl	80112a8 <_Balloc>
 8010936:	9000      	str	r0, [sp, #0]
 8010938:	2800      	cmp	r0, #0
 801093a:	d14b      	bne.n	80109d4 <_dtoa_r+0x31c>
 801093c:	4b24      	ldr	r3, [pc, #144]	; (80109d0 <_dtoa_r+0x318>)
 801093e:	4602      	mov	r2, r0
 8010940:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010944:	e6d1      	b.n	80106ea <_dtoa_r+0x32>
 8010946:	2301      	movs	r3, #1
 8010948:	e7de      	b.n	8010908 <_dtoa_r+0x250>
 801094a:	2300      	movs	r3, #0
 801094c:	9308      	str	r3, [sp, #32]
 801094e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010950:	eb0a 0903 	add.w	r9, sl, r3
 8010954:	f109 0301 	add.w	r3, r9, #1
 8010958:	2b01      	cmp	r3, #1
 801095a:	9301      	str	r3, [sp, #4]
 801095c:	bfb8      	it	lt
 801095e:	2301      	movlt	r3, #1
 8010960:	e7dd      	b.n	801091e <_dtoa_r+0x266>
 8010962:	2301      	movs	r3, #1
 8010964:	e7f2      	b.n	801094c <_dtoa_r+0x294>
 8010966:	2501      	movs	r5, #1
 8010968:	2300      	movs	r3, #0
 801096a:	9305      	str	r3, [sp, #20]
 801096c:	9508      	str	r5, [sp, #32]
 801096e:	f04f 39ff 	mov.w	r9, #4294967295
 8010972:	2200      	movs	r2, #0
 8010974:	f8cd 9004 	str.w	r9, [sp, #4]
 8010978:	2312      	movs	r3, #18
 801097a:	9209      	str	r2, [sp, #36]	; 0x24
 801097c:	e7cf      	b.n	801091e <_dtoa_r+0x266>
 801097e:	2301      	movs	r3, #1
 8010980:	9308      	str	r3, [sp, #32]
 8010982:	e7f4      	b.n	801096e <_dtoa_r+0x2b6>
 8010984:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010988:	f8cd 9004 	str.w	r9, [sp, #4]
 801098c:	464b      	mov	r3, r9
 801098e:	e7c6      	b.n	801091e <_dtoa_r+0x266>
 8010990:	3101      	adds	r1, #1
 8010992:	6041      	str	r1, [r0, #4]
 8010994:	0052      	lsls	r2, r2, #1
 8010996:	e7c6      	b.n	8010926 <_dtoa_r+0x26e>
 8010998:	636f4361 	.word	0x636f4361
 801099c:	3fd287a7 	.word	0x3fd287a7
 80109a0:	8b60c8b3 	.word	0x8b60c8b3
 80109a4:	3fc68a28 	.word	0x3fc68a28
 80109a8:	509f79fb 	.word	0x509f79fb
 80109ac:	3fd34413 	.word	0x3fd34413
 80109b0:	08012ef5 	.word	0x08012ef5
 80109b4:	08012f0c 	.word	0x08012f0c
 80109b8:	7ff00000 	.word	0x7ff00000
 80109bc:	08012ef1 	.word	0x08012ef1
 80109c0:	08012ee8 	.word	0x08012ee8
 80109c4:	08012ec5 	.word	0x08012ec5
 80109c8:	3ff80000 	.word	0x3ff80000
 80109cc:	08013008 	.word	0x08013008
 80109d0:	08012f6b 	.word	0x08012f6b
 80109d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109d6:	9a00      	ldr	r2, [sp, #0]
 80109d8:	601a      	str	r2, [r3, #0]
 80109da:	9b01      	ldr	r3, [sp, #4]
 80109dc:	2b0e      	cmp	r3, #14
 80109de:	f200 80ad 	bhi.w	8010b3c <_dtoa_r+0x484>
 80109e2:	2d00      	cmp	r5, #0
 80109e4:	f000 80aa 	beq.w	8010b3c <_dtoa_r+0x484>
 80109e8:	f1ba 0f00 	cmp.w	sl, #0
 80109ec:	dd36      	ble.n	8010a5c <_dtoa_r+0x3a4>
 80109ee:	4ac3      	ldr	r2, [pc, #780]	; (8010cfc <_dtoa_r+0x644>)
 80109f0:	f00a 030f 	and.w	r3, sl, #15
 80109f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80109f8:	ed93 7b00 	vldr	d7, [r3]
 80109fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010a00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010a04:	eeb0 8a47 	vmov.f32	s16, s14
 8010a08:	eef0 8a67 	vmov.f32	s17, s15
 8010a0c:	d016      	beq.n	8010a3c <_dtoa_r+0x384>
 8010a0e:	4bbc      	ldr	r3, [pc, #752]	; (8010d00 <_dtoa_r+0x648>)
 8010a10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010a18:	f7ef ff90 	bl	800093c <__aeabi_ddiv>
 8010a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a20:	f007 070f 	and.w	r7, r7, #15
 8010a24:	2503      	movs	r5, #3
 8010a26:	4eb6      	ldr	r6, [pc, #728]	; (8010d00 <_dtoa_r+0x648>)
 8010a28:	b957      	cbnz	r7, 8010a40 <_dtoa_r+0x388>
 8010a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a2e:	ec53 2b18 	vmov	r2, r3, d8
 8010a32:	f7ef ff83 	bl	800093c <__aeabi_ddiv>
 8010a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a3a:	e029      	b.n	8010a90 <_dtoa_r+0x3d8>
 8010a3c:	2502      	movs	r5, #2
 8010a3e:	e7f2      	b.n	8010a26 <_dtoa_r+0x36e>
 8010a40:	07f9      	lsls	r1, r7, #31
 8010a42:	d508      	bpl.n	8010a56 <_dtoa_r+0x39e>
 8010a44:	ec51 0b18 	vmov	r0, r1, d8
 8010a48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010a4c:	f7ef fe4c 	bl	80006e8 <__aeabi_dmul>
 8010a50:	ec41 0b18 	vmov	d8, r0, r1
 8010a54:	3501      	adds	r5, #1
 8010a56:	107f      	asrs	r7, r7, #1
 8010a58:	3608      	adds	r6, #8
 8010a5a:	e7e5      	b.n	8010a28 <_dtoa_r+0x370>
 8010a5c:	f000 80a6 	beq.w	8010bac <_dtoa_r+0x4f4>
 8010a60:	f1ca 0600 	rsb	r6, sl, #0
 8010a64:	4ba5      	ldr	r3, [pc, #660]	; (8010cfc <_dtoa_r+0x644>)
 8010a66:	4fa6      	ldr	r7, [pc, #664]	; (8010d00 <_dtoa_r+0x648>)
 8010a68:	f006 020f 	and.w	r2, r6, #15
 8010a6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010a78:	f7ef fe36 	bl	80006e8 <__aeabi_dmul>
 8010a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a80:	1136      	asrs	r6, r6, #4
 8010a82:	2300      	movs	r3, #0
 8010a84:	2502      	movs	r5, #2
 8010a86:	2e00      	cmp	r6, #0
 8010a88:	f040 8085 	bne.w	8010b96 <_dtoa_r+0x4de>
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d1d2      	bne.n	8010a36 <_dtoa_r+0x37e>
 8010a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f000 808c 	beq.w	8010bb0 <_dtoa_r+0x4f8>
 8010a98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010a9c:	4b99      	ldr	r3, [pc, #612]	; (8010d04 <_dtoa_r+0x64c>)
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	4639      	mov	r1, r7
 8010aa4:	f7f0 f892 	bl	8000bcc <__aeabi_dcmplt>
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	f000 8081 	beq.w	8010bb0 <_dtoa_r+0x4f8>
 8010aae:	9b01      	ldr	r3, [sp, #4]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d07d      	beq.n	8010bb0 <_dtoa_r+0x4f8>
 8010ab4:	f1b9 0f00 	cmp.w	r9, #0
 8010ab8:	dd3c      	ble.n	8010b34 <_dtoa_r+0x47c>
 8010aba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010abe:	9307      	str	r3, [sp, #28]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	4b91      	ldr	r3, [pc, #580]	; (8010d08 <_dtoa_r+0x650>)
 8010ac4:	4630      	mov	r0, r6
 8010ac6:	4639      	mov	r1, r7
 8010ac8:	f7ef fe0e 	bl	80006e8 <__aeabi_dmul>
 8010acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ad0:	3501      	adds	r5, #1
 8010ad2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010ad6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ada:	4628      	mov	r0, r5
 8010adc:	f7ef fd9a 	bl	8000614 <__aeabi_i2d>
 8010ae0:	4632      	mov	r2, r6
 8010ae2:	463b      	mov	r3, r7
 8010ae4:	f7ef fe00 	bl	80006e8 <__aeabi_dmul>
 8010ae8:	4b88      	ldr	r3, [pc, #544]	; (8010d0c <_dtoa_r+0x654>)
 8010aea:	2200      	movs	r2, #0
 8010aec:	f7ef fc46 	bl	800037c <__adddf3>
 8010af0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010af8:	9303      	str	r3, [sp, #12]
 8010afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d15c      	bne.n	8010bba <_dtoa_r+0x502>
 8010b00:	4b83      	ldr	r3, [pc, #524]	; (8010d10 <_dtoa_r+0x658>)
 8010b02:	2200      	movs	r2, #0
 8010b04:	4630      	mov	r0, r6
 8010b06:	4639      	mov	r1, r7
 8010b08:	f7ef fc36 	bl	8000378 <__aeabi_dsub>
 8010b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b10:	4606      	mov	r6, r0
 8010b12:	460f      	mov	r7, r1
 8010b14:	f7f0 f878 	bl	8000c08 <__aeabi_dcmpgt>
 8010b18:	2800      	cmp	r0, #0
 8010b1a:	f040 8296 	bne.w	801104a <_dtoa_r+0x992>
 8010b1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b22:	4630      	mov	r0, r6
 8010b24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010b28:	4639      	mov	r1, r7
 8010b2a:	f7f0 f84f 	bl	8000bcc <__aeabi_dcmplt>
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	f040 8288 	bne.w	8011044 <_dtoa_r+0x98c>
 8010b34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	f2c0 8158 	blt.w	8010df4 <_dtoa_r+0x73c>
 8010b44:	f1ba 0f0e 	cmp.w	sl, #14
 8010b48:	f300 8154 	bgt.w	8010df4 <_dtoa_r+0x73c>
 8010b4c:	4b6b      	ldr	r3, [pc, #428]	; (8010cfc <_dtoa_r+0x644>)
 8010b4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	f280 80e3 	bge.w	8010d24 <_dtoa_r+0x66c>
 8010b5e:	9b01      	ldr	r3, [sp, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f300 80df 	bgt.w	8010d24 <_dtoa_r+0x66c>
 8010b66:	f040 826d 	bne.w	8011044 <_dtoa_r+0x98c>
 8010b6a:	4b69      	ldr	r3, [pc, #420]	; (8010d10 <_dtoa_r+0x658>)
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	4640      	mov	r0, r8
 8010b70:	4649      	mov	r1, r9
 8010b72:	f7ef fdb9 	bl	80006e8 <__aeabi_dmul>
 8010b76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b7a:	f7f0 f83b 	bl	8000bf4 <__aeabi_dcmpge>
 8010b7e:	9e01      	ldr	r6, [sp, #4]
 8010b80:	4637      	mov	r7, r6
 8010b82:	2800      	cmp	r0, #0
 8010b84:	f040 8243 	bne.w	801100e <_dtoa_r+0x956>
 8010b88:	9d00      	ldr	r5, [sp, #0]
 8010b8a:	2331      	movs	r3, #49	; 0x31
 8010b8c:	f805 3b01 	strb.w	r3, [r5], #1
 8010b90:	f10a 0a01 	add.w	sl, sl, #1
 8010b94:	e23f      	b.n	8011016 <_dtoa_r+0x95e>
 8010b96:	07f2      	lsls	r2, r6, #31
 8010b98:	d505      	bpl.n	8010ba6 <_dtoa_r+0x4ee>
 8010b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010b9e:	f7ef fda3 	bl	80006e8 <__aeabi_dmul>
 8010ba2:	3501      	adds	r5, #1
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	1076      	asrs	r6, r6, #1
 8010ba8:	3708      	adds	r7, #8
 8010baa:	e76c      	b.n	8010a86 <_dtoa_r+0x3ce>
 8010bac:	2502      	movs	r5, #2
 8010bae:	e76f      	b.n	8010a90 <_dtoa_r+0x3d8>
 8010bb0:	9b01      	ldr	r3, [sp, #4]
 8010bb2:	f8cd a01c 	str.w	sl, [sp, #28]
 8010bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8010bb8:	e78d      	b.n	8010ad6 <_dtoa_r+0x41e>
 8010bba:	9900      	ldr	r1, [sp, #0]
 8010bbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010bc0:	4b4e      	ldr	r3, [pc, #312]	; (8010cfc <_dtoa_r+0x644>)
 8010bc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010bc6:	4401      	add	r1, r0
 8010bc8:	9102      	str	r1, [sp, #8]
 8010bca:	9908      	ldr	r1, [sp, #32]
 8010bcc:	eeb0 8a47 	vmov.f32	s16, s14
 8010bd0:	eef0 8a67 	vmov.f32	s17, s15
 8010bd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010bdc:	2900      	cmp	r1, #0
 8010bde:	d045      	beq.n	8010c6c <_dtoa_r+0x5b4>
 8010be0:	494c      	ldr	r1, [pc, #304]	; (8010d14 <_dtoa_r+0x65c>)
 8010be2:	2000      	movs	r0, #0
 8010be4:	f7ef feaa 	bl	800093c <__aeabi_ddiv>
 8010be8:	ec53 2b18 	vmov	r2, r3, d8
 8010bec:	f7ef fbc4 	bl	8000378 <__aeabi_dsub>
 8010bf0:	9d00      	ldr	r5, [sp, #0]
 8010bf2:	ec41 0b18 	vmov	d8, r0, r1
 8010bf6:	4639      	mov	r1, r7
 8010bf8:	4630      	mov	r0, r6
 8010bfa:	f7f0 f825 	bl	8000c48 <__aeabi_d2iz>
 8010bfe:	900c      	str	r0, [sp, #48]	; 0x30
 8010c00:	f7ef fd08 	bl	8000614 <__aeabi_i2d>
 8010c04:	4602      	mov	r2, r0
 8010c06:	460b      	mov	r3, r1
 8010c08:	4630      	mov	r0, r6
 8010c0a:	4639      	mov	r1, r7
 8010c0c:	f7ef fbb4 	bl	8000378 <__aeabi_dsub>
 8010c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c12:	3330      	adds	r3, #48	; 0x30
 8010c14:	f805 3b01 	strb.w	r3, [r5], #1
 8010c18:	ec53 2b18 	vmov	r2, r3, d8
 8010c1c:	4606      	mov	r6, r0
 8010c1e:	460f      	mov	r7, r1
 8010c20:	f7ef ffd4 	bl	8000bcc <__aeabi_dcmplt>
 8010c24:	2800      	cmp	r0, #0
 8010c26:	d165      	bne.n	8010cf4 <_dtoa_r+0x63c>
 8010c28:	4632      	mov	r2, r6
 8010c2a:	463b      	mov	r3, r7
 8010c2c:	4935      	ldr	r1, [pc, #212]	; (8010d04 <_dtoa_r+0x64c>)
 8010c2e:	2000      	movs	r0, #0
 8010c30:	f7ef fba2 	bl	8000378 <__aeabi_dsub>
 8010c34:	ec53 2b18 	vmov	r2, r3, d8
 8010c38:	f7ef ffc8 	bl	8000bcc <__aeabi_dcmplt>
 8010c3c:	2800      	cmp	r0, #0
 8010c3e:	f040 80b9 	bne.w	8010db4 <_dtoa_r+0x6fc>
 8010c42:	9b02      	ldr	r3, [sp, #8]
 8010c44:	429d      	cmp	r5, r3
 8010c46:	f43f af75 	beq.w	8010b34 <_dtoa_r+0x47c>
 8010c4a:	4b2f      	ldr	r3, [pc, #188]	; (8010d08 <_dtoa_r+0x650>)
 8010c4c:	ec51 0b18 	vmov	r0, r1, d8
 8010c50:	2200      	movs	r2, #0
 8010c52:	f7ef fd49 	bl	80006e8 <__aeabi_dmul>
 8010c56:	4b2c      	ldr	r3, [pc, #176]	; (8010d08 <_dtoa_r+0x650>)
 8010c58:	ec41 0b18 	vmov	d8, r0, r1
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	4630      	mov	r0, r6
 8010c60:	4639      	mov	r1, r7
 8010c62:	f7ef fd41 	bl	80006e8 <__aeabi_dmul>
 8010c66:	4606      	mov	r6, r0
 8010c68:	460f      	mov	r7, r1
 8010c6a:	e7c4      	b.n	8010bf6 <_dtoa_r+0x53e>
 8010c6c:	ec51 0b17 	vmov	r0, r1, d7
 8010c70:	f7ef fd3a 	bl	80006e8 <__aeabi_dmul>
 8010c74:	9b02      	ldr	r3, [sp, #8]
 8010c76:	9d00      	ldr	r5, [sp, #0]
 8010c78:	930c      	str	r3, [sp, #48]	; 0x30
 8010c7a:	ec41 0b18 	vmov	d8, r0, r1
 8010c7e:	4639      	mov	r1, r7
 8010c80:	4630      	mov	r0, r6
 8010c82:	f7ef ffe1 	bl	8000c48 <__aeabi_d2iz>
 8010c86:	9011      	str	r0, [sp, #68]	; 0x44
 8010c88:	f7ef fcc4 	bl	8000614 <__aeabi_i2d>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	460b      	mov	r3, r1
 8010c90:	4630      	mov	r0, r6
 8010c92:	4639      	mov	r1, r7
 8010c94:	f7ef fb70 	bl	8000378 <__aeabi_dsub>
 8010c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c9a:	3330      	adds	r3, #48	; 0x30
 8010c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8010ca0:	9b02      	ldr	r3, [sp, #8]
 8010ca2:	429d      	cmp	r5, r3
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	460f      	mov	r7, r1
 8010ca8:	f04f 0200 	mov.w	r2, #0
 8010cac:	d134      	bne.n	8010d18 <_dtoa_r+0x660>
 8010cae:	4b19      	ldr	r3, [pc, #100]	; (8010d14 <_dtoa_r+0x65c>)
 8010cb0:	ec51 0b18 	vmov	r0, r1, d8
 8010cb4:	f7ef fb62 	bl	800037c <__adddf3>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	460b      	mov	r3, r1
 8010cbc:	4630      	mov	r0, r6
 8010cbe:	4639      	mov	r1, r7
 8010cc0:	f7ef ffa2 	bl	8000c08 <__aeabi_dcmpgt>
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	d175      	bne.n	8010db4 <_dtoa_r+0x6fc>
 8010cc8:	ec53 2b18 	vmov	r2, r3, d8
 8010ccc:	4911      	ldr	r1, [pc, #68]	; (8010d14 <_dtoa_r+0x65c>)
 8010cce:	2000      	movs	r0, #0
 8010cd0:	f7ef fb52 	bl	8000378 <__aeabi_dsub>
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	460b      	mov	r3, r1
 8010cd8:	4630      	mov	r0, r6
 8010cda:	4639      	mov	r1, r7
 8010cdc:	f7ef ff76 	bl	8000bcc <__aeabi_dcmplt>
 8010ce0:	2800      	cmp	r0, #0
 8010ce2:	f43f af27 	beq.w	8010b34 <_dtoa_r+0x47c>
 8010ce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010ce8:	1e6b      	subs	r3, r5, #1
 8010cea:	930c      	str	r3, [sp, #48]	; 0x30
 8010cec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010cf0:	2b30      	cmp	r3, #48	; 0x30
 8010cf2:	d0f8      	beq.n	8010ce6 <_dtoa_r+0x62e>
 8010cf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010cf8:	e04a      	b.n	8010d90 <_dtoa_r+0x6d8>
 8010cfa:	bf00      	nop
 8010cfc:	08013008 	.word	0x08013008
 8010d00:	08012fe0 	.word	0x08012fe0
 8010d04:	3ff00000 	.word	0x3ff00000
 8010d08:	40240000 	.word	0x40240000
 8010d0c:	401c0000 	.word	0x401c0000
 8010d10:	40140000 	.word	0x40140000
 8010d14:	3fe00000 	.word	0x3fe00000
 8010d18:	4baf      	ldr	r3, [pc, #700]	; (8010fd8 <_dtoa_r+0x920>)
 8010d1a:	f7ef fce5 	bl	80006e8 <__aeabi_dmul>
 8010d1e:	4606      	mov	r6, r0
 8010d20:	460f      	mov	r7, r1
 8010d22:	e7ac      	b.n	8010c7e <_dtoa_r+0x5c6>
 8010d24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d28:	9d00      	ldr	r5, [sp, #0]
 8010d2a:	4642      	mov	r2, r8
 8010d2c:	464b      	mov	r3, r9
 8010d2e:	4630      	mov	r0, r6
 8010d30:	4639      	mov	r1, r7
 8010d32:	f7ef fe03 	bl	800093c <__aeabi_ddiv>
 8010d36:	f7ef ff87 	bl	8000c48 <__aeabi_d2iz>
 8010d3a:	9002      	str	r0, [sp, #8]
 8010d3c:	f7ef fc6a 	bl	8000614 <__aeabi_i2d>
 8010d40:	4642      	mov	r2, r8
 8010d42:	464b      	mov	r3, r9
 8010d44:	f7ef fcd0 	bl	80006e8 <__aeabi_dmul>
 8010d48:	4602      	mov	r2, r0
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	4639      	mov	r1, r7
 8010d50:	f7ef fb12 	bl	8000378 <__aeabi_dsub>
 8010d54:	9e02      	ldr	r6, [sp, #8]
 8010d56:	9f01      	ldr	r7, [sp, #4]
 8010d58:	3630      	adds	r6, #48	; 0x30
 8010d5a:	f805 6b01 	strb.w	r6, [r5], #1
 8010d5e:	9e00      	ldr	r6, [sp, #0]
 8010d60:	1bae      	subs	r6, r5, r6
 8010d62:	42b7      	cmp	r7, r6
 8010d64:	4602      	mov	r2, r0
 8010d66:	460b      	mov	r3, r1
 8010d68:	d137      	bne.n	8010dda <_dtoa_r+0x722>
 8010d6a:	f7ef fb07 	bl	800037c <__adddf3>
 8010d6e:	4642      	mov	r2, r8
 8010d70:	464b      	mov	r3, r9
 8010d72:	4606      	mov	r6, r0
 8010d74:	460f      	mov	r7, r1
 8010d76:	f7ef ff47 	bl	8000c08 <__aeabi_dcmpgt>
 8010d7a:	b9c8      	cbnz	r0, 8010db0 <_dtoa_r+0x6f8>
 8010d7c:	4642      	mov	r2, r8
 8010d7e:	464b      	mov	r3, r9
 8010d80:	4630      	mov	r0, r6
 8010d82:	4639      	mov	r1, r7
 8010d84:	f7ef ff18 	bl	8000bb8 <__aeabi_dcmpeq>
 8010d88:	b110      	cbz	r0, 8010d90 <_dtoa_r+0x6d8>
 8010d8a:	9b02      	ldr	r3, [sp, #8]
 8010d8c:	07d9      	lsls	r1, r3, #31
 8010d8e:	d40f      	bmi.n	8010db0 <_dtoa_r+0x6f8>
 8010d90:	4620      	mov	r0, r4
 8010d92:	4659      	mov	r1, fp
 8010d94:	f000 fac8 	bl	8011328 <_Bfree>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	702b      	strb	r3, [r5, #0]
 8010d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d9e:	f10a 0001 	add.w	r0, sl, #1
 8010da2:	6018      	str	r0, [r3, #0]
 8010da4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	f43f acd8 	beq.w	801075c <_dtoa_r+0xa4>
 8010dac:	601d      	str	r5, [r3, #0]
 8010dae:	e4d5      	b.n	801075c <_dtoa_r+0xa4>
 8010db0:	f8cd a01c 	str.w	sl, [sp, #28]
 8010db4:	462b      	mov	r3, r5
 8010db6:	461d      	mov	r5, r3
 8010db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010dbc:	2a39      	cmp	r2, #57	; 0x39
 8010dbe:	d108      	bne.n	8010dd2 <_dtoa_r+0x71a>
 8010dc0:	9a00      	ldr	r2, [sp, #0]
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d1f7      	bne.n	8010db6 <_dtoa_r+0x6fe>
 8010dc6:	9a07      	ldr	r2, [sp, #28]
 8010dc8:	9900      	ldr	r1, [sp, #0]
 8010dca:	3201      	adds	r2, #1
 8010dcc:	9207      	str	r2, [sp, #28]
 8010dce:	2230      	movs	r2, #48	; 0x30
 8010dd0:	700a      	strb	r2, [r1, #0]
 8010dd2:	781a      	ldrb	r2, [r3, #0]
 8010dd4:	3201      	adds	r2, #1
 8010dd6:	701a      	strb	r2, [r3, #0]
 8010dd8:	e78c      	b.n	8010cf4 <_dtoa_r+0x63c>
 8010dda:	4b7f      	ldr	r3, [pc, #508]	; (8010fd8 <_dtoa_r+0x920>)
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f7ef fc83 	bl	80006e8 <__aeabi_dmul>
 8010de2:	2200      	movs	r2, #0
 8010de4:	2300      	movs	r3, #0
 8010de6:	4606      	mov	r6, r0
 8010de8:	460f      	mov	r7, r1
 8010dea:	f7ef fee5 	bl	8000bb8 <__aeabi_dcmpeq>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d09b      	beq.n	8010d2a <_dtoa_r+0x672>
 8010df2:	e7cd      	b.n	8010d90 <_dtoa_r+0x6d8>
 8010df4:	9a08      	ldr	r2, [sp, #32]
 8010df6:	2a00      	cmp	r2, #0
 8010df8:	f000 80c4 	beq.w	8010f84 <_dtoa_r+0x8cc>
 8010dfc:	9a05      	ldr	r2, [sp, #20]
 8010dfe:	2a01      	cmp	r2, #1
 8010e00:	f300 80a8 	bgt.w	8010f54 <_dtoa_r+0x89c>
 8010e04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e06:	2a00      	cmp	r2, #0
 8010e08:	f000 80a0 	beq.w	8010f4c <_dtoa_r+0x894>
 8010e0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010e10:	9e06      	ldr	r6, [sp, #24]
 8010e12:	4645      	mov	r5, r8
 8010e14:	9a04      	ldr	r2, [sp, #16]
 8010e16:	2101      	movs	r1, #1
 8010e18:	441a      	add	r2, r3
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	4498      	add	r8, r3
 8010e1e:	9204      	str	r2, [sp, #16]
 8010e20:	f000 fb3e 	bl	80114a0 <__i2b>
 8010e24:	4607      	mov	r7, r0
 8010e26:	2d00      	cmp	r5, #0
 8010e28:	dd0b      	ble.n	8010e42 <_dtoa_r+0x78a>
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	dd08      	ble.n	8010e42 <_dtoa_r+0x78a>
 8010e30:	42ab      	cmp	r3, r5
 8010e32:	9a04      	ldr	r2, [sp, #16]
 8010e34:	bfa8      	it	ge
 8010e36:	462b      	movge	r3, r5
 8010e38:	eba8 0803 	sub.w	r8, r8, r3
 8010e3c:	1aed      	subs	r5, r5, r3
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	9304      	str	r3, [sp, #16]
 8010e42:	9b06      	ldr	r3, [sp, #24]
 8010e44:	b1fb      	cbz	r3, 8010e86 <_dtoa_r+0x7ce>
 8010e46:	9b08      	ldr	r3, [sp, #32]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	f000 809f 	beq.w	8010f8c <_dtoa_r+0x8d4>
 8010e4e:	2e00      	cmp	r6, #0
 8010e50:	dd11      	ble.n	8010e76 <_dtoa_r+0x7be>
 8010e52:	4639      	mov	r1, r7
 8010e54:	4632      	mov	r2, r6
 8010e56:	4620      	mov	r0, r4
 8010e58:	f000 fbde 	bl	8011618 <__pow5mult>
 8010e5c:	465a      	mov	r2, fp
 8010e5e:	4601      	mov	r1, r0
 8010e60:	4607      	mov	r7, r0
 8010e62:	4620      	mov	r0, r4
 8010e64:	f000 fb32 	bl	80114cc <__multiply>
 8010e68:	4659      	mov	r1, fp
 8010e6a:	9007      	str	r0, [sp, #28]
 8010e6c:	4620      	mov	r0, r4
 8010e6e:	f000 fa5b 	bl	8011328 <_Bfree>
 8010e72:	9b07      	ldr	r3, [sp, #28]
 8010e74:	469b      	mov	fp, r3
 8010e76:	9b06      	ldr	r3, [sp, #24]
 8010e78:	1b9a      	subs	r2, r3, r6
 8010e7a:	d004      	beq.n	8010e86 <_dtoa_r+0x7ce>
 8010e7c:	4659      	mov	r1, fp
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f000 fbca 	bl	8011618 <__pow5mult>
 8010e84:	4683      	mov	fp, r0
 8010e86:	2101      	movs	r1, #1
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f000 fb09 	bl	80114a0 <__i2b>
 8010e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	4606      	mov	r6, r0
 8010e94:	dd7c      	ble.n	8010f90 <_dtoa_r+0x8d8>
 8010e96:	461a      	mov	r2, r3
 8010e98:	4601      	mov	r1, r0
 8010e9a:	4620      	mov	r0, r4
 8010e9c:	f000 fbbc 	bl	8011618 <__pow5mult>
 8010ea0:	9b05      	ldr	r3, [sp, #20]
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	dd76      	ble.n	8010f96 <_dtoa_r+0x8de>
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	9306      	str	r3, [sp, #24]
 8010eac:	6933      	ldr	r3, [r6, #16]
 8010eae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010eb2:	6918      	ldr	r0, [r3, #16]
 8010eb4:	f000 faa4 	bl	8011400 <__hi0bits>
 8010eb8:	f1c0 0020 	rsb	r0, r0, #32
 8010ebc:	9b04      	ldr	r3, [sp, #16]
 8010ebe:	4418      	add	r0, r3
 8010ec0:	f010 001f 	ands.w	r0, r0, #31
 8010ec4:	f000 8086 	beq.w	8010fd4 <_dtoa_r+0x91c>
 8010ec8:	f1c0 0320 	rsb	r3, r0, #32
 8010ecc:	2b04      	cmp	r3, #4
 8010ece:	dd7f      	ble.n	8010fd0 <_dtoa_r+0x918>
 8010ed0:	f1c0 001c 	rsb	r0, r0, #28
 8010ed4:	9b04      	ldr	r3, [sp, #16]
 8010ed6:	4403      	add	r3, r0
 8010ed8:	4480      	add	r8, r0
 8010eda:	4405      	add	r5, r0
 8010edc:	9304      	str	r3, [sp, #16]
 8010ede:	f1b8 0f00 	cmp.w	r8, #0
 8010ee2:	dd05      	ble.n	8010ef0 <_dtoa_r+0x838>
 8010ee4:	4659      	mov	r1, fp
 8010ee6:	4642      	mov	r2, r8
 8010ee8:	4620      	mov	r0, r4
 8010eea:	f000 fbef 	bl	80116cc <__lshift>
 8010eee:	4683      	mov	fp, r0
 8010ef0:	9b04      	ldr	r3, [sp, #16]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	dd05      	ble.n	8010f02 <_dtoa_r+0x84a>
 8010ef6:	4631      	mov	r1, r6
 8010ef8:	461a      	mov	r2, r3
 8010efa:	4620      	mov	r0, r4
 8010efc:	f000 fbe6 	bl	80116cc <__lshift>
 8010f00:	4606      	mov	r6, r0
 8010f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d069      	beq.n	8010fdc <_dtoa_r+0x924>
 8010f08:	4631      	mov	r1, r6
 8010f0a:	4658      	mov	r0, fp
 8010f0c:	f000 fc4a 	bl	80117a4 <__mcmp>
 8010f10:	2800      	cmp	r0, #0
 8010f12:	da63      	bge.n	8010fdc <_dtoa_r+0x924>
 8010f14:	2300      	movs	r3, #0
 8010f16:	4659      	mov	r1, fp
 8010f18:	220a      	movs	r2, #10
 8010f1a:	4620      	mov	r0, r4
 8010f1c:	f000 fa26 	bl	801136c <__multadd>
 8010f20:	9b08      	ldr	r3, [sp, #32]
 8010f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f26:	4683      	mov	fp, r0
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f000 818f 	beq.w	801124c <_dtoa_r+0xb94>
 8010f2e:	4639      	mov	r1, r7
 8010f30:	2300      	movs	r3, #0
 8010f32:	220a      	movs	r2, #10
 8010f34:	4620      	mov	r0, r4
 8010f36:	f000 fa19 	bl	801136c <__multadd>
 8010f3a:	f1b9 0f00 	cmp.w	r9, #0
 8010f3e:	4607      	mov	r7, r0
 8010f40:	f300 808e 	bgt.w	8011060 <_dtoa_r+0x9a8>
 8010f44:	9b05      	ldr	r3, [sp, #20]
 8010f46:	2b02      	cmp	r3, #2
 8010f48:	dc50      	bgt.n	8010fec <_dtoa_r+0x934>
 8010f4a:	e089      	b.n	8011060 <_dtoa_r+0x9a8>
 8010f4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010f4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010f52:	e75d      	b.n	8010e10 <_dtoa_r+0x758>
 8010f54:	9b01      	ldr	r3, [sp, #4]
 8010f56:	1e5e      	subs	r6, r3, #1
 8010f58:	9b06      	ldr	r3, [sp, #24]
 8010f5a:	42b3      	cmp	r3, r6
 8010f5c:	bfbf      	itttt	lt
 8010f5e:	9b06      	ldrlt	r3, [sp, #24]
 8010f60:	9606      	strlt	r6, [sp, #24]
 8010f62:	1af2      	sublt	r2, r6, r3
 8010f64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8010f66:	bfb6      	itet	lt
 8010f68:	189b      	addlt	r3, r3, r2
 8010f6a:	1b9e      	subge	r6, r3, r6
 8010f6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010f6e:	9b01      	ldr	r3, [sp, #4]
 8010f70:	bfb8      	it	lt
 8010f72:	2600      	movlt	r6, #0
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	bfb5      	itete	lt
 8010f78:	eba8 0503 	sublt.w	r5, r8, r3
 8010f7c:	9b01      	ldrge	r3, [sp, #4]
 8010f7e:	2300      	movlt	r3, #0
 8010f80:	4645      	movge	r5, r8
 8010f82:	e747      	b.n	8010e14 <_dtoa_r+0x75c>
 8010f84:	9e06      	ldr	r6, [sp, #24]
 8010f86:	9f08      	ldr	r7, [sp, #32]
 8010f88:	4645      	mov	r5, r8
 8010f8a:	e74c      	b.n	8010e26 <_dtoa_r+0x76e>
 8010f8c:	9a06      	ldr	r2, [sp, #24]
 8010f8e:	e775      	b.n	8010e7c <_dtoa_r+0x7c4>
 8010f90:	9b05      	ldr	r3, [sp, #20]
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	dc18      	bgt.n	8010fc8 <_dtoa_r+0x910>
 8010f96:	9b02      	ldr	r3, [sp, #8]
 8010f98:	b9b3      	cbnz	r3, 8010fc8 <_dtoa_r+0x910>
 8010f9a:	9b03      	ldr	r3, [sp, #12]
 8010f9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010fa0:	b9a3      	cbnz	r3, 8010fcc <_dtoa_r+0x914>
 8010fa2:	9b03      	ldr	r3, [sp, #12]
 8010fa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010fa8:	0d1b      	lsrs	r3, r3, #20
 8010faa:	051b      	lsls	r3, r3, #20
 8010fac:	b12b      	cbz	r3, 8010fba <_dtoa_r+0x902>
 8010fae:	9b04      	ldr	r3, [sp, #16]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	9304      	str	r3, [sp, #16]
 8010fb4:	f108 0801 	add.w	r8, r8, #1
 8010fb8:	2301      	movs	r3, #1
 8010fba:	9306      	str	r3, [sp, #24]
 8010fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	f47f af74 	bne.w	8010eac <_dtoa_r+0x7f4>
 8010fc4:	2001      	movs	r0, #1
 8010fc6:	e779      	b.n	8010ebc <_dtoa_r+0x804>
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e7f6      	b.n	8010fba <_dtoa_r+0x902>
 8010fcc:	9b02      	ldr	r3, [sp, #8]
 8010fce:	e7f4      	b.n	8010fba <_dtoa_r+0x902>
 8010fd0:	d085      	beq.n	8010ede <_dtoa_r+0x826>
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	301c      	adds	r0, #28
 8010fd6:	e77d      	b.n	8010ed4 <_dtoa_r+0x81c>
 8010fd8:	40240000 	.word	0x40240000
 8010fdc:	9b01      	ldr	r3, [sp, #4]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	dc38      	bgt.n	8011054 <_dtoa_r+0x99c>
 8010fe2:	9b05      	ldr	r3, [sp, #20]
 8010fe4:	2b02      	cmp	r3, #2
 8010fe6:	dd35      	ble.n	8011054 <_dtoa_r+0x99c>
 8010fe8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010fec:	f1b9 0f00 	cmp.w	r9, #0
 8010ff0:	d10d      	bne.n	801100e <_dtoa_r+0x956>
 8010ff2:	4631      	mov	r1, r6
 8010ff4:	464b      	mov	r3, r9
 8010ff6:	2205      	movs	r2, #5
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f000 f9b7 	bl	801136c <__multadd>
 8010ffe:	4601      	mov	r1, r0
 8011000:	4606      	mov	r6, r0
 8011002:	4658      	mov	r0, fp
 8011004:	f000 fbce 	bl	80117a4 <__mcmp>
 8011008:	2800      	cmp	r0, #0
 801100a:	f73f adbd 	bgt.w	8010b88 <_dtoa_r+0x4d0>
 801100e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011010:	9d00      	ldr	r5, [sp, #0]
 8011012:	ea6f 0a03 	mvn.w	sl, r3
 8011016:	f04f 0800 	mov.w	r8, #0
 801101a:	4631      	mov	r1, r6
 801101c:	4620      	mov	r0, r4
 801101e:	f000 f983 	bl	8011328 <_Bfree>
 8011022:	2f00      	cmp	r7, #0
 8011024:	f43f aeb4 	beq.w	8010d90 <_dtoa_r+0x6d8>
 8011028:	f1b8 0f00 	cmp.w	r8, #0
 801102c:	d005      	beq.n	801103a <_dtoa_r+0x982>
 801102e:	45b8      	cmp	r8, r7
 8011030:	d003      	beq.n	801103a <_dtoa_r+0x982>
 8011032:	4641      	mov	r1, r8
 8011034:	4620      	mov	r0, r4
 8011036:	f000 f977 	bl	8011328 <_Bfree>
 801103a:	4639      	mov	r1, r7
 801103c:	4620      	mov	r0, r4
 801103e:	f000 f973 	bl	8011328 <_Bfree>
 8011042:	e6a5      	b.n	8010d90 <_dtoa_r+0x6d8>
 8011044:	2600      	movs	r6, #0
 8011046:	4637      	mov	r7, r6
 8011048:	e7e1      	b.n	801100e <_dtoa_r+0x956>
 801104a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801104c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011050:	4637      	mov	r7, r6
 8011052:	e599      	b.n	8010b88 <_dtoa_r+0x4d0>
 8011054:	9b08      	ldr	r3, [sp, #32]
 8011056:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	f000 80fd 	beq.w	801125a <_dtoa_r+0xba2>
 8011060:	2d00      	cmp	r5, #0
 8011062:	dd05      	ble.n	8011070 <_dtoa_r+0x9b8>
 8011064:	4639      	mov	r1, r7
 8011066:	462a      	mov	r2, r5
 8011068:	4620      	mov	r0, r4
 801106a:	f000 fb2f 	bl	80116cc <__lshift>
 801106e:	4607      	mov	r7, r0
 8011070:	9b06      	ldr	r3, [sp, #24]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d05c      	beq.n	8011130 <_dtoa_r+0xa78>
 8011076:	6879      	ldr	r1, [r7, #4]
 8011078:	4620      	mov	r0, r4
 801107a:	f000 f915 	bl	80112a8 <_Balloc>
 801107e:	4605      	mov	r5, r0
 8011080:	b928      	cbnz	r0, 801108e <_dtoa_r+0x9d6>
 8011082:	4b80      	ldr	r3, [pc, #512]	; (8011284 <_dtoa_r+0xbcc>)
 8011084:	4602      	mov	r2, r0
 8011086:	f240 21ea 	movw	r1, #746	; 0x2ea
 801108a:	f7ff bb2e 	b.w	80106ea <_dtoa_r+0x32>
 801108e:	693a      	ldr	r2, [r7, #16]
 8011090:	3202      	adds	r2, #2
 8011092:	0092      	lsls	r2, r2, #2
 8011094:	f107 010c 	add.w	r1, r7, #12
 8011098:	300c      	adds	r0, #12
 801109a:	f7fe fdab 	bl	800fbf4 <memcpy>
 801109e:	2201      	movs	r2, #1
 80110a0:	4629      	mov	r1, r5
 80110a2:	4620      	mov	r0, r4
 80110a4:	f000 fb12 	bl	80116cc <__lshift>
 80110a8:	9b00      	ldr	r3, [sp, #0]
 80110aa:	3301      	adds	r3, #1
 80110ac:	9301      	str	r3, [sp, #4]
 80110ae:	9b00      	ldr	r3, [sp, #0]
 80110b0:	444b      	add	r3, r9
 80110b2:	9307      	str	r3, [sp, #28]
 80110b4:	9b02      	ldr	r3, [sp, #8]
 80110b6:	f003 0301 	and.w	r3, r3, #1
 80110ba:	46b8      	mov	r8, r7
 80110bc:	9306      	str	r3, [sp, #24]
 80110be:	4607      	mov	r7, r0
 80110c0:	9b01      	ldr	r3, [sp, #4]
 80110c2:	4631      	mov	r1, r6
 80110c4:	3b01      	subs	r3, #1
 80110c6:	4658      	mov	r0, fp
 80110c8:	9302      	str	r3, [sp, #8]
 80110ca:	f7ff fa67 	bl	801059c <quorem>
 80110ce:	4603      	mov	r3, r0
 80110d0:	3330      	adds	r3, #48	; 0x30
 80110d2:	9004      	str	r0, [sp, #16]
 80110d4:	4641      	mov	r1, r8
 80110d6:	4658      	mov	r0, fp
 80110d8:	9308      	str	r3, [sp, #32]
 80110da:	f000 fb63 	bl	80117a4 <__mcmp>
 80110de:	463a      	mov	r2, r7
 80110e0:	4681      	mov	r9, r0
 80110e2:	4631      	mov	r1, r6
 80110e4:	4620      	mov	r0, r4
 80110e6:	f000 fb79 	bl	80117dc <__mdiff>
 80110ea:	68c2      	ldr	r2, [r0, #12]
 80110ec:	9b08      	ldr	r3, [sp, #32]
 80110ee:	4605      	mov	r5, r0
 80110f0:	bb02      	cbnz	r2, 8011134 <_dtoa_r+0xa7c>
 80110f2:	4601      	mov	r1, r0
 80110f4:	4658      	mov	r0, fp
 80110f6:	f000 fb55 	bl	80117a4 <__mcmp>
 80110fa:	9b08      	ldr	r3, [sp, #32]
 80110fc:	4602      	mov	r2, r0
 80110fe:	4629      	mov	r1, r5
 8011100:	4620      	mov	r0, r4
 8011102:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011106:	f000 f90f 	bl	8011328 <_Bfree>
 801110a:	9b05      	ldr	r3, [sp, #20]
 801110c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801110e:	9d01      	ldr	r5, [sp, #4]
 8011110:	ea43 0102 	orr.w	r1, r3, r2
 8011114:	9b06      	ldr	r3, [sp, #24]
 8011116:	430b      	orrs	r3, r1
 8011118:	9b08      	ldr	r3, [sp, #32]
 801111a:	d10d      	bne.n	8011138 <_dtoa_r+0xa80>
 801111c:	2b39      	cmp	r3, #57	; 0x39
 801111e:	d029      	beq.n	8011174 <_dtoa_r+0xabc>
 8011120:	f1b9 0f00 	cmp.w	r9, #0
 8011124:	dd01      	ble.n	801112a <_dtoa_r+0xa72>
 8011126:	9b04      	ldr	r3, [sp, #16]
 8011128:	3331      	adds	r3, #49	; 0x31
 801112a:	9a02      	ldr	r2, [sp, #8]
 801112c:	7013      	strb	r3, [r2, #0]
 801112e:	e774      	b.n	801101a <_dtoa_r+0x962>
 8011130:	4638      	mov	r0, r7
 8011132:	e7b9      	b.n	80110a8 <_dtoa_r+0x9f0>
 8011134:	2201      	movs	r2, #1
 8011136:	e7e2      	b.n	80110fe <_dtoa_r+0xa46>
 8011138:	f1b9 0f00 	cmp.w	r9, #0
 801113c:	db06      	blt.n	801114c <_dtoa_r+0xa94>
 801113e:	9905      	ldr	r1, [sp, #20]
 8011140:	ea41 0909 	orr.w	r9, r1, r9
 8011144:	9906      	ldr	r1, [sp, #24]
 8011146:	ea59 0101 	orrs.w	r1, r9, r1
 801114a:	d120      	bne.n	801118e <_dtoa_r+0xad6>
 801114c:	2a00      	cmp	r2, #0
 801114e:	ddec      	ble.n	801112a <_dtoa_r+0xa72>
 8011150:	4659      	mov	r1, fp
 8011152:	2201      	movs	r2, #1
 8011154:	4620      	mov	r0, r4
 8011156:	9301      	str	r3, [sp, #4]
 8011158:	f000 fab8 	bl	80116cc <__lshift>
 801115c:	4631      	mov	r1, r6
 801115e:	4683      	mov	fp, r0
 8011160:	f000 fb20 	bl	80117a4 <__mcmp>
 8011164:	2800      	cmp	r0, #0
 8011166:	9b01      	ldr	r3, [sp, #4]
 8011168:	dc02      	bgt.n	8011170 <_dtoa_r+0xab8>
 801116a:	d1de      	bne.n	801112a <_dtoa_r+0xa72>
 801116c:	07da      	lsls	r2, r3, #31
 801116e:	d5dc      	bpl.n	801112a <_dtoa_r+0xa72>
 8011170:	2b39      	cmp	r3, #57	; 0x39
 8011172:	d1d8      	bne.n	8011126 <_dtoa_r+0xa6e>
 8011174:	9a02      	ldr	r2, [sp, #8]
 8011176:	2339      	movs	r3, #57	; 0x39
 8011178:	7013      	strb	r3, [r2, #0]
 801117a:	462b      	mov	r3, r5
 801117c:	461d      	mov	r5, r3
 801117e:	3b01      	subs	r3, #1
 8011180:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011184:	2a39      	cmp	r2, #57	; 0x39
 8011186:	d050      	beq.n	801122a <_dtoa_r+0xb72>
 8011188:	3201      	adds	r2, #1
 801118a:	701a      	strb	r2, [r3, #0]
 801118c:	e745      	b.n	801101a <_dtoa_r+0x962>
 801118e:	2a00      	cmp	r2, #0
 8011190:	dd03      	ble.n	801119a <_dtoa_r+0xae2>
 8011192:	2b39      	cmp	r3, #57	; 0x39
 8011194:	d0ee      	beq.n	8011174 <_dtoa_r+0xabc>
 8011196:	3301      	adds	r3, #1
 8011198:	e7c7      	b.n	801112a <_dtoa_r+0xa72>
 801119a:	9a01      	ldr	r2, [sp, #4]
 801119c:	9907      	ldr	r1, [sp, #28]
 801119e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80111a2:	428a      	cmp	r2, r1
 80111a4:	d02a      	beq.n	80111fc <_dtoa_r+0xb44>
 80111a6:	4659      	mov	r1, fp
 80111a8:	2300      	movs	r3, #0
 80111aa:	220a      	movs	r2, #10
 80111ac:	4620      	mov	r0, r4
 80111ae:	f000 f8dd 	bl	801136c <__multadd>
 80111b2:	45b8      	cmp	r8, r7
 80111b4:	4683      	mov	fp, r0
 80111b6:	f04f 0300 	mov.w	r3, #0
 80111ba:	f04f 020a 	mov.w	r2, #10
 80111be:	4641      	mov	r1, r8
 80111c0:	4620      	mov	r0, r4
 80111c2:	d107      	bne.n	80111d4 <_dtoa_r+0xb1c>
 80111c4:	f000 f8d2 	bl	801136c <__multadd>
 80111c8:	4680      	mov	r8, r0
 80111ca:	4607      	mov	r7, r0
 80111cc:	9b01      	ldr	r3, [sp, #4]
 80111ce:	3301      	adds	r3, #1
 80111d0:	9301      	str	r3, [sp, #4]
 80111d2:	e775      	b.n	80110c0 <_dtoa_r+0xa08>
 80111d4:	f000 f8ca 	bl	801136c <__multadd>
 80111d8:	4639      	mov	r1, r7
 80111da:	4680      	mov	r8, r0
 80111dc:	2300      	movs	r3, #0
 80111de:	220a      	movs	r2, #10
 80111e0:	4620      	mov	r0, r4
 80111e2:	f000 f8c3 	bl	801136c <__multadd>
 80111e6:	4607      	mov	r7, r0
 80111e8:	e7f0      	b.n	80111cc <_dtoa_r+0xb14>
 80111ea:	f1b9 0f00 	cmp.w	r9, #0
 80111ee:	9a00      	ldr	r2, [sp, #0]
 80111f0:	bfcc      	ite	gt
 80111f2:	464d      	movgt	r5, r9
 80111f4:	2501      	movle	r5, #1
 80111f6:	4415      	add	r5, r2
 80111f8:	f04f 0800 	mov.w	r8, #0
 80111fc:	4659      	mov	r1, fp
 80111fe:	2201      	movs	r2, #1
 8011200:	4620      	mov	r0, r4
 8011202:	9301      	str	r3, [sp, #4]
 8011204:	f000 fa62 	bl	80116cc <__lshift>
 8011208:	4631      	mov	r1, r6
 801120a:	4683      	mov	fp, r0
 801120c:	f000 faca 	bl	80117a4 <__mcmp>
 8011210:	2800      	cmp	r0, #0
 8011212:	dcb2      	bgt.n	801117a <_dtoa_r+0xac2>
 8011214:	d102      	bne.n	801121c <_dtoa_r+0xb64>
 8011216:	9b01      	ldr	r3, [sp, #4]
 8011218:	07db      	lsls	r3, r3, #31
 801121a:	d4ae      	bmi.n	801117a <_dtoa_r+0xac2>
 801121c:	462b      	mov	r3, r5
 801121e:	461d      	mov	r5, r3
 8011220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011224:	2a30      	cmp	r2, #48	; 0x30
 8011226:	d0fa      	beq.n	801121e <_dtoa_r+0xb66>
 8011228:	e6f7      	b.n	801101a <_dtoa_r+0x962>
 801122a:	9a00      	ldr	r2, [sp, #0]
 801122c:	429a      	cmp	r2, r3
 801122e:	d1a5      	bne.n	801117c <_dtoa_r+0xac4>
 8011230:	f10a 0a01 	add.w	sl, sl, #1
 8011234:	2331      	movs	r3, #49	; 0x31
 8011236:	e779      	b.n	801112c <_dtoa_r+0xa74>
 8011238:	4b13      	ldr	r3, [pc, #76]	; (8011288 <_dtoa_r+0xbd0>)
 801123a:	f7ff baaf 	b.w	801079c <_dtoa_r+0xe4>
 801123e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011240:	2b00      	cmp	r3, #0
 8011242:	f47f aa86 	bne.w	8010752 <_dtoa_r+0x9a>
 8011246:	4b11      	ldr	r3, [pc, #68]	; (801128c <_dtoa_r+0xbd4>)
 8011248:	f7ff baa8 	b.w	801079c <_dtoa_r+0xe4>
 801124c:	f1b9 0f00 	cmp.w	r9, #0
 8011250:	dc03      	bgt.n	801125a <_dtoa_r+0xba2>
 8011252:	9b05      	ldr	r3, [sp, #20]
 8011254:	2b02      	cmp	r3, #2
 8011256:	f73f aec9 	bgt.w	8010fec <_dtoa_r+0x934>
 801125a:	9d00      	ldr	r5, [sp, #0]
 801125c:	4631      	mov	r1, r6
 801125e:	4658      	mov	r0, fp
 8011260:	f7ff f99c 	bl	801059c <quorem>
 8011264:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011268:	f805 3b01 	strb.w	r3, [r5], #1
 801126c:	9a00      	ldr	r2, [sp, #0]
 801126e:	1aaa      	subs	r2, r5, r2
 8011270:	4591      	cmp	r9, r2
 8011272:	ddba      	ble.n	80111ea <_dtoa_r+0xb32>
 8011274:	4659      	mov	r1, fp
 8011276:	2300      	movs	r3, #0
 8011278:	220a      	movs	r2, #10
 801127a:	4620      	mov	r0, r4
 801127c:	f000 f876 	bl	801136c <__multadd>
 8011280:	4683      	mov	fp, r0
 8011282:	e7eb      	b.n	801125c <_dtoa_r+0xba4>
 8011284:	08012f6b 	.word	0x08012f6b
 8011288:	08012ec4 	.word	0x08012ec4
 801128c:	08012ee8 	.word	0x08012ee8

08011290 <_localeconv_r>:
 8011290:	4800      	ldr	r0, [pc, #0]	; (8011294 <_localeconv_r+0x4>)
 8011292:	4770      	bx	lr
 8011294:	20000188 	.word	0x20000188

08011298 <malloc>:
 8011298:	4b02      	ldr	r3, [pc, #8]	; (80112a4 <malloc+0xc>)
 801129a:	4601      	mov	r1, r0
 801129c:	6818      	ldr	r0, [r3, #0]
 801129e:	f000 bbe1 	b.w	8011a64 <_malloc_r>
 80112a2:	bf00      	nop
 80112a4:	20000034 	.word	0x20000034

080112a8 <_Balloc>:
 80112a8:	b570      	push	{r4, r5, r6, lr}
 80112aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80112ac:	4604      	mov	r4, r0
 80112ae:	460d      	mov	r5, r1
 80112b0:	b976      	cbnz	r6, 80112d0 <_Balloc+0x28>
 80112b2:	2010      	movs	r0, #16
 80112b4:	f7ff fff0 	bl	8011298 <malloc>
 80112b8:	4602      	mov	r2, r0
 80112ba:	6260      	str	r0, [r4, #36]	; 0x24
 80112bc:	b920      	cbnz	r0, 80112c8 <_Balloc+0x20>
 80112be:	4b18      	ldr	r3, [pc, #96]	; (8011320 <_Balloc+0x78>)
 80112c0:	4818      	ldr	r0, [pc, #96]	; (8011324 <_Balloc+0x7c>)
 80112c2:	2166      	movs	r1, #102	; 0x66
 80112c4:	f000 fd94 	bl	8011df0 <__assert_func>
 80112c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112cc:	6006      	str	r6, [r0, #0]
 80112ce:	60c6      	str	r6, [r0, #12]
 80112d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80112d2:	68f3      	ldr	r3, [r6, #12]
 80112d4:	b183      	cbz	r3, 80112f8 <_Balloc+0x50>
 80112d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80112de:	b9b8      	cbnz	r0, 8011310 <_Balloc+0x68>
 80112e0:	2101      	movs	r1, #1
 80112e2:	fa01 f605 	lsl.w	r6, r1, r5
 80112e6:	1d72      	adds	r2, r6, #5
 80112e8:	0092      	lsls	r2, r2, #2
 80112ea:	4620      	mov	r0, r4
 80112ec:	f000 fb5a 	bl	80119a4 <_calloc_r>
 80112f0:	b160      	cbz	r0, 801130c <_Balloc+0x64>
 80112f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80112f6:	e00e      	b.n	8011316 <_Balloc+0x6e>
 80112f8:	2221      	movs	r2, #33	; 0x21
 80112fa:	2104      	movs	r1, #4
 80112fc:	4620      	mov	r0, r4
 80112fe:	f000 fb51 	bl	80119a4 <_calloc_r>
 8011302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011304:	60f0      	str	r0, [r6, #12]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d1e4      	bne.n	80112d6 <_Balloc+0x2e>
 801130c:	2000      	movs	r0, #0
 801130e:	bd70      	pop	{r4, r5, r6, pc}
 8011310:	6802      	ldr	r2, [r0, #0]
 8011312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011316:	2300      	movs	r3, #0
 8011318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801131c:	e7f7      	b.n	801130e <_Balloc+0x66>
 801131e:	bf00      	nop
 8011320:	08012ef5 	.word	0x08012ef5
 8011324:	08012f7c 	.word	0x08012f7c

08011328 <_Bfree>:
 8011328:	b570      	push	{r4, r5, r6, lr}
 801132a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801132c:	4605      	mov	r5, r0
 801132e:	460c      	mov	r4, r1
 8011330:	b976      	cbnz	r6, 8011350 <_Bfree+0x28>
 8011332:	2010      	movs	r0, #16
 8011334:	f7ff ffb0 	bl	8011298 <malloc>
 8011338:	4602      	mov	r2, r0
 801133a:	6268      	str	r0, [r5, #36]	; 0x24
 801133c:	b920      	cbnz	r0, 8011348 <_Bfree+0x20>
 801133e:	4b09      	ldr	r3, [pc, #36]	; (8011364 <_Bfree+0x3c>)
 8011340:	4809      	ldr	r0, [pc, #36]	; (8011368 <_Bfree+0x40>)
 8011342:	218a      	movs	r1, #138	; 0x8a
 8011344:	f000 fd54 	bl	8011df0 <__assert_func>
 8011348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801134c:	6006      	str	r6, [r0, #0]
 801134e:	60c6      	str	r6, [r0, #12]
 8011350:	b13c      	cbz	r4, 8011362 <_Bfree+0x3a>
 8011352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011354:	6862      	ldr	r2, [r4, #4]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801135c:	6021      	str	r1, [r4, #0]
 801135e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011362:	bd70      	pop	{r4, r5, r6, pc}
 8011364:	08012ef5 	.word	0x08012ef5
 8011368:	08012f7c 	.word	0x08012f7c

0801136c <__multadd>:
 801136c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011370:	690e      	ldr	r6, [r1, #16]
 8011372:	4607      	mov	r7, r0
 8011374:	4698      	mov	r8, r3
 8011376:	460c      	mov	r4, r1
 8011378:	f101 0014 	add.w	r0, r1, #20
 801137c:	2300      	movs	r3, #0
 801137e:	6805      	ldr	r5, [r0, #0]
 8011380:	b2a9      	uxth	r1, r5
 8011382:	fb02 8101 	mla	r1, r2, r1, r8
 8011386:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801138a:	0c2d      	lsrs	r5, r5, #16
 801138c:	fb02 c505 	mla	r5, r2, r5, ip
 8011390:	b289      	uxth	r1, r1
 8011392:	3301      	adds	r3, #1
 8011394:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011398:	429e      	cmp	r6, r3
 801139a:	f840 1b04 	str.w	r1, [r0], #4
 801139e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80113a2:	dcec      	bgt.n	801137e <__multadd+0x12>
 80113a4:	f1b8 0f00 	cmp.w	r8, #0
 80113a8:	d022      	beq.n	80113f0 <__multadd+0x84>
 80113aa:	68a3      	ldr	r3, [r4, #8]
 80113ac:	42b3      	cmp	r3, r6
 80113ae:	dc19      	bgt.n	80113e4 <__multadd+0x78>
 80113b0:	6861      	ldr	r1, [r4, #4]
 80113b2:	4638      	mov	r0, r7
 80113b4:	3101      	adds	r1, #1
 80113b6:	f7ff ff77 	bl	80112a8 <_Balloc>
 80113ba:	4605      	mov	r5, r0
 80113bc:	b928      	cbnz	r0, 80113ca <__multadd+0x5e>
 80113be:	4602      	mov	r2, r0
 80113c0:	4b0d      	ldr	r3, [pc, #52]	; (80113f8 <__multadd+0x8c>)
 80113c2:	480e      	ldr	r0, [pc, #56]	; (80113fc <__multadd+0x90>)
 80113c4:	21b5      	movs	r1, #181	; 0xb5
 80113c6:	f000 fd13 	bl	8011df0 <__assert_func>
 80113ca:	6922      	ldr	r2, [r4, #16]
 80113cc:	3202      	adds	r2, #2
 80113ce:	f104 010c 	add.w	r1, r4, #12
 80113d2:	0092      	lsls	r2, r2, #2
 80113d4:	300c      	adds	r0, #12
 80113d6:	f7fe fc0d 	bl	800fbf4 <memcpy>
 80113da:	4621      	mov	r1, r4
 80113dc:	4638      	mov	r0, r7
 80113de:	f7ff ffa3 	bl	8011328 <_Bfree>
 80113e2:	462c      	mov	r4, r5
 80113e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80113e8:	3601      	adds	r6, #1
 80113ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80113ee:	6126      	str	r6, [r4, #16]
 80113f0:	4620      	mov	r0, r4
 80113f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f6:	bf00      	nop
 80113f8:	08012f6b 	.word	0x08012f6b
 80113fc:	08012f7c 	.word	0x08012f7c

08011400 <__hi0bits>:
 8011400:	0c03      	lsrs	r3, r0, #16
 8011402:	041b      	lsls	r3, r3, #16
 8011404:	b9d3      	cbnz	r3, 801143c <__hi0bits+0x3c>
 8011406:	0400      	lsls	r0, r0, #16
 8011408:	2310      	movs	r3, #16
 801140a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801140e:	bf04      	itt	eq
 8011410:	0200      	lsleq	r0, r0, #8
 8011412:	3308      	addeq	r3, #8
 8011414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011418:	bf04      	itt	eq
 801141a:	0100      	lsleq	r0, r0, #4
 801141c:	3304      	addeq	r3, #4
 801141e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011422:	bf04      	itt	eq
 8011424:	0080      	lsleq	r0, r0, #2
 8011426:	3302      	addeq	r3, #2
 8011428:	2800      	cmp	r0, #0
 801142a:	db05      	blt.n	8011438 <__hi0bits+0x38>
 801142c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011430:	f103 0301 	add.w	r3, r3, #1
 8011434:	bf08      	it	eq
 8011436:	2320      	moveq	r3, #32
 8011438:	4618      	mov	r0, r3
 801143a:	4770      	bx	lr
 801143c:	2300      	movs	r3, #0
 801143e:	e7e4      	b.n	801140a <__hi0bits+0xa>

08011440 <__lo0bits>:
 8011440:	6803      	ldr	r3, [r0, #0]
 8011442:	f013 0207 	ands.w	r2, r3, #7
 8011446:	4601      	mov	r1, r0
 8011448:	d00b      	beq.n	8011462 <__lo0bits+0x22>
 801144a:	07da      	lsls	r2, r3, #31
 801144c:	d424      	bmi.n	8011498 <__lo0bits+0x58>
 801144e:	0798      	lsls	r0, r3, #30
 8011450:	bf49      	itett	mi
 8011452:	085b      	lsrmi	r3, r3, #1
 8011454:	089b      	lsrpl	r3, r3, #2
 8011456:	2001      	movmi	r0, #1
 8011458:	600b      	strmi	r3, [r1, #0]
 801145a:	bf5c      	itt	pl
 801145c:	600b      	strpl	r3, [r1, #0]
 801145e:	2002      	movpl	r0, #2
 8011460:	4770      	bx	lr
 8011462:	b298      	uxth	r0, r3
 8011464:	b9b0      	cbnz	r0, 8011494 <__lo0bits+0x54>
 8011466:	0c1b      	lsrs	r3, r3, #16
 8011468:	2010      	movs	r0, #16
 801146a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801146e:	bf04      	itt	eq
 8011470:	0a1b      	lsreq	r3, r3, #8
 8011472:	3008      	addeq	r0, #8
 8011474:	071a      	lsls	r2, r3, #28
 8011476:	bf04      	itt	eq
 8011478:	091b      	lsreq	r3, r3, #4
 801147a:	3004      	addeq	r0, #4
 801147c:	079a      	lsls	r2, r3, #30
 801147e:	bf04      	itt	eq
 8011480:	089b      	lsreq	r3, r3, #2
 8011482:	3002      	addeq	r0, #2
 8011484:	07da      	lsls	r2, r3, #31
 8011486:	d403      	bmi.n	8011490 <__lo0bits+0x50>
 8011488:	085b      	lsrs	r3, r3, #1
 801148a:	f100 0001 	add.w	r0, r0, #1
 801148e:	d005      	beq.n	801149c <__lo0bits+0x5c>
 8011490:	600b      	str	r3, [r1, #0]
 8011492:	4770      	bx	lr
 8011494:	4610      	mov	r0, r2
 8011496:	e7e8      	b.n	801146a <__lo0bits+0x2a>
 8011498:	2000      	movs	r0, #0
 801149a:	4770      	bx	lr
 801149c:	2020      	movs	r0, #32
 801149e:	4770      	bx	lr

080114a0 <__i2b>:
 80114a0:	b510      	push	{r4, lr}
 80114a2:	460c      	mov	r4, r1
 80114a4:	2101      	movs	r1, #1
 80114a6:	f7ff feff 	bl	80112a8 <_Balloc>
 80114aa:	4602      	mov	r2, r0
 80114ac:	b928      	cbnz	r0, 80114ba <__i2b+0x1a>
 80114ae:	4b05      	ldr	r3, [pc, #20]	; (80114c4 <__i2b+0x24>)
 80114b0:	4805      	ldr	r0, [pc, #20]	; (80114c8 <__i2b+0x28>)
 80114b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80114b6:	f000 fc9b 	bl	8011df0 <__assert_func>
 80114ba:	2301      	movs	r3, #1
 80114bc:	6144      	str	r4, [r0, #20]
 80114be:	6103      	str	r3, [r0, #16]
 80114c0:	bd10      	pop	{r4, pc}
 80114c2:	bf00      	nop
 80114c4:	08012f6b 	.word	0x08012f6b
 80114c8:	08012f7c 	.word	0x08012f7c

080114cc <__multiply>:
 80114cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d0:	4614      	mov	r4, r2
 80114d2:	690a      	ldr	r2, [r1, #16]
 80114d4:	6923      	ldr	r3, [r4, #16]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	bfb8      	it	lt
 80114da:	460b      	movlt	r3, r1
 80114dc:	460d      	mov	r5, r1
 80114de:	bfbc      	itt	lt
 80114e0:	4625      	movlt	r5, r4
 80114e2:	461c      	movlt	r4, r3
 80114e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80114e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80114ec:	68ab      	ldr	r3, [r5, #8]
 80114ee:	6869      	ldr	r1, [r5, #4]
 80114f0:	eb0a 0709 	add.w	r7, sl, r9
 80114f4:	42bb      	cmp	r3, r7
 80114f6:	b085      	sub	sp, #20
 80114f8:	bfb8      	it	lt
 80114fa:	3101      	addlt	r1, #1
 80114fc:	f7ff fed4 	bl	80112a8 <_Balloc>
 8011500:	b930      	cbnz	r0, 8011510 <__multiply+0x44>
 8011502:	4602      	mov	r2, r0
 8011504:	4b42      	ldr	r3, [pc, #264]	; (8011610 <__multiply+0x144>)
 8011506:	4843      	ldr	r0, [pc, #268]	; (8011614 <__multiply+0x148>)
 8011508:	f240 115d 	movw	r1, #349	; 0x15d
 801150c:	f000 fc70 	bl	8011df0 <__assert_func>
 8011510:	f100 0614 	add.w	r6, r0, #20
 8011514:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011518:	4633      	mov	r3, r6
 801151a:	2200      	movs	r2, #0
 801151c:	4543      	cmp	r3, r8
 801151e:	d31e      	bcc.n	801155e <__multiply+0x92>
 8011520:	f105 0c14 	add.w	ip, r5, #20
 8011524:	f104 0314 	add.w	r3, r4, #20
 8011528:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801152c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011530:	9202      	str	r2, [sp, #8]
 8011532:	ebac 0205 	sub.w	r2, ip, r5
 8011536:	3a15      	subs	r2, #21
 8011538:	f022 0203 	bic.w	r2, r2, #3
 801153c:	3204      	adds	r2, #4
 801153e:	f105 0115 	add.w	r1, r5, #21
 8011542:	458c      	cmp	ip, r1
 8011544:	bf38      	it	cc
 8011546:	2204      	movcc	r2, #4
 8011548:	9201      	str	r2, [sp, #4]
 801154a:	9a02      	ldr	r2, [sp, #8]
 801154c:	9303      	str	r3, [sp, #12]
 801154e:	429a      	cmp	r2, r3
 8011550:	d808      	bhi.n	8011564 <__multiply+0x98>
 8011552:	2f00      	cmp	r7, #0
 8011554:	dc55      	bgt.n	8011602 <__multiply+0x136>
 8011556:	6107      	str	r7, [r0, #16]
 8011558:	b005      	add	sp, #20
 801155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801155e:	f843 2b04 	str.w	r2, [r3], #4
 8011562:	e7db      	b.n	801151c <__multiply+0x50>
 8011564:	f8b3 a000 	ldrh.w	sl, [r3]
 8011568:	f1ba 0f00 	cmp.w	sl, #0
 801156c:	d020      	beq.n	80115b0 <__multiply+0xe4>
 801156e:	f105 0e14 	add.w	lr, r5, #20
 8011572:	46b1      	mov	r9, r6
 8011574:	2200      	movs	r2, #0
 8011576:	f85e 4b04 	ldr.w	r4, [lr], #4
 801157a:	f8d9 b000 	ldr.w	fp, [r9]
 801157e:	b2a1      	uxth	r1, r4
 8011580:	fa1f fb8b 	uxth.w	fp, fp
 8011584:	fb0a b101 	mla	r1, sl, r1, fp
 8011588:	4411      	add	r1, r2
 801158a:	f8d9 2000 	ldr.w	r2, [r9]
 801158e:	0c24      	lsrs	r4, r4, #16
 8011590:	0c12      	lsrs	r2, r2, #16
 8011592:	fb0a 2404 	mla	r4, sl, r4, r2
 8011596:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801159a:	b289      	uxth	r1, r1
 801159c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80115a0:	45f4      	cmp	ip, lr
 80115a2:	f849 1b04 	str.w	r1, [r9], #4
 80115a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80115aa:	d8e4      	bhi.n	8011576 <__multiply+0xaa>
 80115ac:	9901      	ldr	r1, [sp, #4]
 80115ae:	5072      	str	r2, [r6, r1]
 80115b0:	9a03      	ldr	r2, [sp, #12]
 80115b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80115b6:	3304      	adds	r3, #4
 80115b8:	f1b9 0f00 	cmp.w	r9, #0
 80115bc:	d01f      	beq.n	80115fe <__multiply+0x132>
 80115be:	6834      	ldr	r4, [r6, #0]
 80115c0:	f105 0114 	add.w	r1, r5, #20
 80115c4:	46b6      	mov	lr, r6
 80115c6:	f04f 0a00 	mov.w	sl, #0
 80115ca:	880a      	ldrh	r2, [r1, #0]
 80115cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80115d0:	fb09 b202 	mla	r2, r9, r2, fp
 80115d4:	4492      	add	sl, r2
 80115d6:	b2a4      	uxth	r4, r4
 80115d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80115dc:	f84e 4b04 	str.w	r4, [lr], #4
 80115e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80115e4:	f8be 2000 	ldrh.w	r2, [lr]
 80115e8:	0c24      	lsrs	r4, r4, #16
 80115ea:	fb09 2404 	mla	r4, r9, r4, r2
 80115ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80115f2:	458c      	cmp	ip, r1
 80115f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80115f8:	d8e7      	bhi.n	80115ca <__multiply+0xfe>
 80115fa:	9a01      	ldr	r2, [sp, #4]
 80115fc:	50b4      	str	r4, [r6, r2]
 80115fe:	3604      	adds	r6, #4
 8011600:	e7a3      	b.n	801154a <__multiply+0x7e>
 8011602:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011606:	2b00      	cmp	r3, #0
 8011608:	d1a5      	bne.n	8011556 <__multiply+0x8a>
 801160a:	3f01      	subs	r7, #1
 801160c:	e7a1      	b.n	8011552 <__multiply+0x86>
 801160e:	bf00      	nop
 8011610:	08012f6b 	.word	0x08012f6b
 8011614:	08012f7c 	.word	0x08012f7c

08011618 <__pow5mult>:
 8011618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801161c:	4615      	mov	r5, r2
 801161e:	f012 0203 	ands.w	r2, r2, #3
 8011622:	4606      	mov	r6, r0
 8011624:	460f      	mov	r7, r1
 8011626:	d007      	beq.n	8011638 <__pow5mult+0x20>
 8011628:	4c25      	ldr	r4, [pc, #148]	; (80116c0 <__pow5mult+0xa8>)
 801162a:	3a01      	subs	r2, #1
 801162c:	2300      	movs	r3, #0
 801162e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011632:	f7ff fe9b 	bl	801136c <__multadd>
 8011636:	4607      	mov	r7, r0
 8011638:	10ad      	asrs	r5, r5, #2
 801163a:	d03d      	beq.n	80116b8 <__pow5mult+0xa0>
 801163c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801163e:	b97c      	cbnz	r4, 8011660 <__pow5mult+0x48>
 8011640:	2010      	movs	r0, #16
 8011642:	f7ff fe29 	bl	8011298 <malloc>
 8011646:	4602      	mov	r2, r0
 8011648:	6270      	str	r0, [r6, #36]	; 0x24
 801164a:	b928      	cbnz	r0, 8011658 <__pow5mult+0x40>
 801164c:	4b1d      	ldr	r3, [pc, #116]	; (80116c4 <__pow5mult+0xac>)
 801164e:	481e      	ldr	r0, [pc, #120]	; (80116c8 <__pow5mult+0xb0>)
 8011650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011654:	f000 fbcc 	bl	8011df0 <__assert_func>
 8011658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801165c:	6004      	str	r4, [r0, #0]
 801165e:	60c4      	str	r4, [r0, #12]
 8011660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011668:	b94c      	cbnz	r4, 801167e <__pow5mult+0x66>
 801166a:	f240 2171 	movw	r1, #625	; 0x271
 801166e:	4630      	mov	r0, r6
 8011670:	f7ff ff16 	bl	80114a0 <__i2b>
 8011674:	2300      	movs	r3, #0
 8011676:	f8c8 0008 	str.w	r0, [r8, #8]
 801167a:	4604      	mov	r4, r0
 801167c:	6003      	str	r3, [r0, #0]
 801167e:	f04f 0900 	mov.w	r9, #0
 8011682:	07eb      	lsls	r3, r5, #31
 8011684:	d50a      	bpl.n	801169c <__pow5mult+0x84>
 8011686:	4639      	mov	r1, r7
 8011688:	4622      	mov	r2, r4
 801168a:	4630      	mov	r0, r6
 801168c:	f7ff ff1e 	bl	80114cc <__multiply>
 8011690:	4639      	mov	r1, r7
 8011692:	4680      	mov	r8, r0
 8011694:	4630      	mov	r0, r6
 8011696:	f7ff fe47 	bl	8011328 <_Bfree>
 801169a:	4647      	mov	r7, r8
 801169c:	106d      	asrs	r5, r5, #1
 801169e:	d00b      	beq.n	80116b8 <__pow5mult+0xa0>
 80116a0:	6820      	ldr	r0, [r4, #0]
 80116a2:	b938      	cbnz	r0, 80116b4 <__pow5mult+0x9c>
 80116a4:	4622      	mov	r2, r4
 80116a6:	4621      	mov	r1, r4
 80116a8:	4630      	mov	r0, r6
 80116aa:	f7ff ff0f 	bl	80114cc <__multiply>
 80116ae:	6020      	str	r0, [r4, #0]
 80116b0:	f8c0 9000 	str.w	r9, [r0]
 80116b4:	4604      	mov	r4, r0
 80116b6:	e7e4      	b.n	8011682 <__pow5mult+0x6a>
 80116b8:	4638      	mov	r0, r7
 80116ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116be:	bf00      	nop
 80116c0:	080130d0 	.word	0x080130d0
 80116c4:	08012ef5 	.word	0x08012ef5
 80116c8:	08012f7c 	.word	0x08012f7c

080116cc <__lshift>:
 80116cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116d0:	460c      	mov	r4, r1
 80116d2:	6849      	ldr	r1, [r1, #4]
 80116d4:	6923      	ldr	r3, [r4, #16]
 80116d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80116da:	68a3      	ldr	r3, [r4, #8]
 80116dc:	4607      	mov	r7, r0
 80116de:	4691      	mov	r9, r2
 80116e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80116e4:	f108 0601 	add.w	r6, r8, #1
 80116e8:	42b3      	cmp	r3, r6
 80116ea:	db0b      	blt.n	8011704 <__lshift+0x38>
 80116ec:	4638      	mov	r0, r7
 80116ee:	f7ff fddb 	bl	80112a8 <_Balloc>
 80116f2:	4605      	mov	r5, r0
 80116f4:	b948      	cbnz	r0, 801170a <__lshift+0x3e>
 80116f6:	4602      	mov	r2, r0
 80116f8:	4b28      	ldr	r3, [pc, #160]	; (801179c <__lshift+0xd0>)
 80116fa:	4829      	ldr	r0, [pc, #164]	; (80117a0 <__lshift+0xd4>)
 80116fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011700:	f000 fb76 	bl	8011df0 <__assert_func>
 8011704:	3101      	adds	r1, #1
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	e7ee      	b.n	80116e8 <__lshift+0x1c>
 801170a:	2300      	movs	r3, #0
 801170c:	f100 0114 	add.w	r1, r0, #20
 8011710:	f100 0210 	add.w	r2, r0, #16
 8011714:	4618      	mov	r0, r3
 8011716:	4553      	cmp	r3, sl
 8011718:	db33      	blt.n	8011782 <__lshift+0xb6>
 801171a:	6920      	ldr	r0, [r4, #16]
 801171c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011720:	f104 0314 	add.w	r3, r4, #20
 8011724:	f019 091f 	ands.w	r9, r9, #31
 8011728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801172c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011730:	d02b      	beq.n	801178a <__lshift+0xbe>
 8011732:	f1c9 0e20 	rsb	lr, r9, #32
 8011736:	468a      	mov	sl, r1
 8011738:	2200      	movs	r2, #0
 801173a:	6818      	ldr	r0, [r3, #0]
 801173c:	fa00 f009 	lsl.w	r0, r0, r9
 8011740:	4302      	orrs	r2, r0
 8011742:	f84a 2b04 	str.w	r2, [sl], #4
 8011746:	f853 2b04 	ldr.w	r2, [r3], #4
 801174a:	459c      	cmp	ip, r3
 801174c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011750:	d8f3      	bhi.n	801173a <__lshift+0x6e>
 8011752:	ebac 0304 	sub.w	r3, ip, r4
 8011756:	3b15      	subs	r3, #21
 8011758:	f023 0303 	bic.w	r3, r3, #3
 801175c:	3304      	adds	r3, #4
 801175e:	f104 0015 	add.w	r0, r4, #21
 8011762:	4584      	cmp	ip, r0
 8011764:	bf38      	it	cc
 8011766:	2304      	movcc	r3, #4
 8011768:	50ca      	str	r2, [r1, r3]
 801176a:	b10a      	cbz	r2, 8011770 <__lshift+0xa4>
 801176c:	f108 0602 	add.w	r6, r8, #2
 8011770:	3e01      	subs	r6, #1
 8011772:	4638      	mov	r0, r7
 8011774:	612e      	str	r6, [r5, #16]
 8011776:	4621      	mov	r1, r4
 8011778:	f7ff fdd6 	bl	8011328 <_Bfree>
 801177c:	4628      	mov	r0, r5
 801177e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011782:	f842 0f04 	str.w	r0, [r2, #4]!
 8011786:	3301      	adds	r3, #1
 8011788:	e7c5      	b.n	8011716 <__lshift+0x4a>
 801178a:	3904      	subs	r1, #4
 801178c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011790:	f841 2f04 	str.w	r2, [r1, #4]!
 8011794:	459c      	cmp	ip, r3
 8011796:	d8f9      	bhi.n	801178c <__lshift+0xc0>
 8011798:	e7ea      	b.n	8011770 <__lshift+0xa4>
 801179a:	bf00      	nop
 801179c:	08012f6b 	.word	0x08012f6b
 80117a0:	08012f7c 	.word	0x08012f7c

080117a4 <__mcmp>:
 80117a4:	b530      	push	{r4, r5, lr}
 80117a6:	6902      	ldr	r2, [r0, #16]
 80117a8:	690c      	ldr	r4, [r1, #16]
 80117aa:	1b12      	subs	r2, r2, r4
 80117ac:	d10e      	bne.n	80117cc <__mcmp+0x28>
 80117ae:	f100 0314 	add.w	r3, r0, #20
 80117b2:	3114      	adds	r1, #20
 80117b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80117b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80117bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80117c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80117c4:	42a5      	cmp	r5, r4
 80117c6:	d003      	beq.n	80117d0 <__mcmp+0x2c>
 80117c8:	d305      	bcc.n	80117d6 <__mcmp+0x32>
 80117ca:	2201      	movs	r2, #1
 80117cc:	4610      	mov	r0, r2
 80117ce:	bd30      	pop	{r4, r5, pc}
 80117d0:	4283      	cmp	r3, r0
 80117d2:	d3f3      	bcc.n	80117bc <__mcmp+0x18>
 80117d4:	e7fa      	b.n	80117cc <__mcmp+0x28>
 80117d6:	f04f 32ff 	mov.w	r2, #4294967295
 80117da:	e7f7      	b.n	80117cc <__mcmp+0x28>

080117dc <__mdiff>:
 80117dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e0:	460c      	mov	r4, r1
 80117e2:	4606      	mov	r6, r0
 80117e4:	4611      	mov	r1, r2
 80117e6:	4620      	mov	r0, r4
 80117e8:	4617      	mov	r7, r2
 80117ea:	f7ff ffdb 	bl	80117a4 <__mcmp>
 80117ee:	1e05      	subs	r5, r0, #0
 80117f0:	d110      	bne.n	8011814 <__mdiff+0x38>
 80117f2:	4629      	mov	r1, r5
 80117f4:	4630      	mov	r0, r6
 80117f6:	f7ff fd57 	bl	80112a8 <_Balloc>
 80117fa:	b930      	cbnz	r0, 801180a <__mdiff+0x2e>
 80117fc:	4b39      	ldr	r3, [pc, #228]	; (80118e4 <__mdiff+0x108>)
 80117fe:	4602      	mov	r2, r0
 8011800:	f240 2132 	movw	r1, #562	; 0x232
 8011804:	4838      	ldr	r0, [pc, #224]	; (80118e8 <__mdiff+0x10c>)
 8011806:	f000 faf3 	bl	8011df0 <__assert_func>
 801180a:	2301      	movs	r3, #1
 801180c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011814:	bfa4      	itt	ge
 8011816:	463b      	movge	r3, r7
 8011818:	4627      	movge	r7, r4
 801181a:	4630      	mov	r0, r6
 801181c:	6879      	ldr	r1, [r7, #4]
 801181e:	bfa6      	itte	ge
 8011820:	461c      	movge	r4, r3
 8011822:	2500      	movge	r5, #0
 8011824:	2501      	movlt	r5, #1
 8011826:	f7ff fd3f 	bl	80112a8 <_Balloc>
 801182a:	b920      	cbnz	r0, 8011836 <__mdiff+0x5a>
 801182c:	4b2d      	ldr	r3, [pc, #180]	; (80118e4 <__mdiff+0x108>)
 801182e:	4602      	mov	r2, r0
 8011830:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011834:	e7e6      	b.n	8011804 <__mdiff+0x28>
 8011836:	693e      	ldr	r6, [r7, #16]
 8011838:	60c5      	str	r5, [r0, #12]
 801183a:	6925      	ldr	r5, [r4, #16]
 801183c:	f107 0114 	add.w	r1, r7, #20
 8011840:	f104 0914 	add.w	r9, r4, #20
 8011844:	f100 0e14 	add.w	lr, r0, #20
 8011848:	f107 0210 	add.w	r2, r7, #16
 801184c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011850:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011854:	46f2      	mov	sl, lr
 8011856:	2700      	movs	r7, #0
 8011858:	f859 3b04 	ldr.w	r3, [r9], #4
 801185c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011860:	fa1f f883 	uxth.w	r8, r3
 8011864:	fa17 f78b 	uxtah	r7, r7, fp
 8011868:	0c1b      	lsrs	r3, r3, #16
 801186a:	eba7 0808 	sub.w	r8, r7, r8
 801186e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011872:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011876:	fa1f f888 	uxth.w	r8, r8
 801187a:	141f      	asrs	r7, r3, #16
 801187c:	454d      	cmp	r5, r9
 801187e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011882:	f84a 3b04 	str.w	r3, [sl], #4
 8011886:	d8e7      	bhi.n	8011858 <__mdiff+0x7c>
 8011888:	1b2b      	subs	r3, r5, r4
 801188a:	3b15      	subs	r3, #21
 801188c:	f023 0303 	bic.w	r3, r3, #3
 8011890:	3304      	adds	r3, #4
 8011892:	3415      	adds	r4, #21
 8011894:	42a5      	cmp	r5, r4
 8011896:	bf38      	it	cc
 8011898:	2304      	movcc	r3, #4
 801189a:	4419      	add	r1, r3
 801189c:	4473      	add	r3, lr
 801189e:	469e      	mov	lr, r3
 80118a0:	460d      	mov	r5, r1
 80118a2:	4565      	cmp	r5, ip
 80118a4:	d30e      	bcc.n	80118c4 <__mdiff+0xe8>
 80118a6:	f10c 0203 	add.w	r2, ip, #3
 80118aa:	1a52      	subs	r2, r2, r1
 80118ac:	f022 0203 	bic.w	r2, r2, #3
 80118b0:	3903      	subs	r1, #3
 80118b2:	458c      	cmp	ip, r1
 80118b4:	bf38      	it	cc
 80118b6:	2200      	movcc	r2, #0
 80118b8:	441a      	add	r2, r3
 80118ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80118be:	b17b      	cbz	r3, 80118e0 <__mdiff+0x104>
 80118c0:	6106      	str	r6, [r0, #16]
 80118c2:	e7a5      	b.n	8011810 <__mdiff+0x34>
 80118c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80118c8:	fa17 f488 	uxtah	r4, r7, r8
 80118cc:	1422      	asrs	r2, r4, #16
 80118ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80118d2:	b2a4      	uxth	r4, r4
 80118d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80118d8:	f84e 4b04 	str.w	r4, [lr], #4
 80118dc:	1417      	asrs	r7, r2, #16
 80118de:	e7e0      	b.n	80118a2 <__mdiff+0xc6>
 80118e0:	3e01      	subs	r6, #1
 80118e2:	e7ea      	b.n	80118ba <__mdiff+0xde>
 80118e4:	08012f6b 	.word	0x08012f6b
 80118e8:	08012f7c 	.word	0x08012f7c

080118ec <__d2b>:
 80118ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80118f0:	4689      	mov	r9, r1
 80118f2:	2101      	movs	r1, #1
 80118f4:	ec57 6b10 	vmov	r6, r7, d0
 80118f8:	4690      	mov	r8, r2
 80118fa:	f7ff fcd5 	bl	80112a8 <_Balloc>
 80118fe:	4604      	mov	r4, r0
 8011900:	b930      	cbnz	r0, 8011910 <__d2b+0x24>
 8011902:	4602      	mov	r2, r0
 8011904:	4b25      	ldr	r3, [pc, #148]	; (801199c <__d2b+0xb0>)
 8011906:	4826      	ldr	r0, [pc, #152]	; (80119a0 <__d2b+0xb4>)
 8011908:	f240 310a 	movw	r1, #778	; 0x30a
 801190c:	f000 fa70 	bl	8011df0 <__assert_func>
 8011910:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011914:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011918:	bb35      	cbnz	r5, 8011968 <__d2b+0x7c>
 801191a:	2e00      	cmp	r6, #0
 801191c:	9301      	str	r3, [sp, #4]
 801191e:	d028      	beq.n	8011972 <__d2b+0x86>
 8011920:	4668      	mov	r0, sp
 8011922:	9600      	str	r6, [sp, #0]
 8011924:	f7ff fd8c 	bl	8011440 <__lo0bits>
 8011928:	9900      	ldr	r1, [sp, #0]
 801192a:	b300      	cbz	r0, 801196e <__d2b+0x82>
 801192c:	9a01      	ldr	r2, [sp, #4]
 801192e:	f1c0 0320 	rsb	r3, r0, #32
 8011932:	fa02 f303 	lsl.w	r3, r2, r3
 8011936:	430b      	orrs	r3, r1
 8011938:	40c2      	lsrs	r2, r0
 801193a:	6163      	str	r3, [r4, #20]
 801193c:	9201      	str	r2, [sp, #4]
 801193e:	9b01      	ldr	r3, [sp, #4]
 8011940:	61a3      	str	r3, [r4, #24]
 8011942:	2b00      	cmp	r3, #0
 8011944:	bf14      	ite	ne
 8011946:	2202      	movne	r2, #2
 8011948:	2201      	moveq	r2, #1
 801194a:	6122      	str	r2, [r4, #16]
 801194c:	b1d5      	cbz	r5, 8011984 <__d2b+0x98>
 801194e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011952:	4405      	add	r5, r0
 8011954:	f8c9 5000 	str.w	r5, [r9]
 8011958:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801195c:	f8c8 0000 	str.w	r0, [r8]
 8011960:	4620      	mov	r0, r4
 8011962:	b003      	add	sp, #12
 8011964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801196c:	e7d5      	b.n	801191a <__d2b+0x2e>
 801196e:	6161      	str	r1, [r4, #20]
 8011970:	e7e5      	b.n	801193e <__d2b+0x52>
 8011972:	a801      	add	r0, sp, #4
 8011974:	f7ff fd64 	bl	8011440 <__lo0bits>
 8011978:	9b01      	ldr	r3, [sp, #4]
 801197a:	6163      	str	r3, [r4, #20]
 801197c:	2201      	movs	r2, #1
 801197e:	6122      	str	r2, [r4, #16]
 8011980:	3020      	adds	r0, #32
 8011982:	e7e3      	b.n	801194c <__d2b+0x60>
 8011984:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011988:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801198c:	f8c9 0000 	str.w	r0, [r9]
 8011990:	6918      	ldr	r0, [r3, #16]
 8011992:	f7ff fd35 	bl	8011400 <__hi0bits>
 8011996:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801199a:	e7df      	b.n	801195c <__d2b+0x70>
 801199c:	08012f6b 	.word	0x08012f6b
 80119a0:	08012f7c 	.word	0x08012f7c

080119a4 <_calloc_r>:
 80119a4:	b513      	push	{r0, r1, r4, lr}
 80119a6:	434a      	muls	r2, r1
 80119a8:	4611      	mov	r1, r2
 80119aa:	9201      	str	r2, [sp, #4]
 80119ac:	f000 f85a 	bl	8011a64 <_malloc_r>
 80119b0:	4604      	mov	r4, r0
 80119b2:	b118      	cbz	r0, 80119bc <_calloc_r+0x18>
 80119b4:	9a01      	ldr	r2, [sp, #4]
 80119b6:	2100      	movs	r1, #0
 80119b8:	f7fe f92a 	bl	800fc10 <memset>
 80119bc:	4620      	mov	r0, r4
 80119be:	b002      	add	sp, #8
 80119c0:	bd10      	pop	{r4, pc}
	...

080119c4 <_free_r>:
 80119c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80119c6:	2900      	cmp	r1, #0
 80119c8:	d048      	beq.n	8011a5c <_free_r+0x98>
 80119ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119ce:	9001      	str	r0, [sp, #4]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	f1a1 0404 	sub.w	r4, r1, #4
 80119d6:	bfb8      	it	lt
 80119d8:	18e4      	addlt	r4, r4, r3
 80119da:	f000 fa65 	bl	8011ea8 <__malloc_lock>
 80119de:	4a20      	ldr	r2, [pc, #128]	; (8011a60 <_free_r+0x9c>)
 80119e0:	9801      	ldr	r0, [sp, #4]
 80119e2:	6813      	ldr	r3, [r2, #0]
 80119e4:	4615      	mov	r5, r2
 80119e6:	b933      	cbnz	r3, 80119f6 <_free_r+0x32>
 80119e8:	6063      	str	r3, [r4, #4]
 80119ea:	6014      	str	r4, [r2, #0]
 80119ec:	b003      	add	sp, #12
 80119ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119f2:	f000 ba5f 	b.w	8011eb4 <__malloc_unlock>
 80119f6:	42a3      	cmp	r3, r4
 80119f8:	d90b      	bls.n	8011a12 <_free_r+0x4e>
 80119fa:	6821      	ldr	r1, [r4, #0]
 80119fc:	1862      	adds	r2, r4, r1
 80119fe:	4293      	cmp	r3, r2
 8011a00:	bf04      	itt	eq
 8011a02:	681a      	ldreq	r2, [r3, #0]
 8011a04:	685b      	ldreq	r3, [r3, #4]
 8011a06:	6063      	str	r3, [r4, #4]
 8011a08:	bf04      	itt	eq
 8011a0a:	1852      	addeq	r2, r2, r1
 8011a0c:	6022      	streq	r2, [r4, #0]
 8011a0e:	602c      	str	r4, [r5, #0]
 8011a10:	e7ec      	b.n	80119ec <_free_r+0x28>
 8011a12:	461a      	mov	r2, r3
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	b10b      	cbz	r3, 8011a1c <_free_r+0x58>
 8011a18:	42a3      	cmp	r3, r4
 8011a1a:	d9fa      	bls.n	8011a12 <_free_r+0x4e>
 8011a1c:	6811      	ldr	r1, [r2, #0]
 8011a1e:	1855      	adds	r5, r2, r1
 8011a20:	42a5      	cmp	r5, r4
 8011a22:	d10b      	bne.n	8011a3c <_free_r+0x78>
 8011a24:	6824      	ldr	r4, [r4, #0]
 8011a26:	4421      	add	r1, r4
 8011a28:	1854      	adds	r4, r2, r1
 8011a2a:	42a3      	cmp	r3, r4
 8011a2c:	6011      	str	r1, [r2, #0]
 8011a2e:	d1dd      	bne.n	80119ec <_free_r+0x28>
 8011a30:	681c      	ldr	r4, [r3, #0]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	6053      	str	r3, [r2, #4]
 8011a36:	4421      	add	r1, r4
 8011a38:	6011      	str	r1, [r2, #0]
 8011a3a:	e7d7      	b.n	80119ec <_free_r+0x28>
 8011a3c:	d902      	bls.n	8011a44 <_free_r+0x80>
 8011a3e:	230c      	movs	r3, #12
 8011a40:	6003      	str	r3, [r0, #0]
 8011a42:	e7d3      	b.n	80119ec <_free_r+0x28>
 8011a44:	6825      	ldr	r5, [r4, #0]
 8011a46:	1961      	adds	r1, r4, r5
 8011a48:	428b      	cmp	r3, r1
 8011a4a:	bf04      	itt	eq
 8011a4c:	6819      	ldreq	r1, [r3, #0]
 8011a4e:	685b      	ldreq	r3, [r3, #4]
 8011a50:	6063      	str	r3, [r4, #4]
 8011a52:	bf04      	itt	eq
 8011a54:	1949      	addeq	r1, r1, r5
 8011a56:	6021      	streq	r1, [r4, #0]
 8011a58:	6054      	str	r4, [r2, #4]
 8011a5a:	e7c7      	b.n	80119ec <_free_r+0x28>
 8011a5c:	b003      	add	sp, #12
 8011a5e:	bd30      	pop	{r4, r5, pc}
 8011a60:	2001aa3c 	.word	0x2001aa3c

08011a64 <_malloc_r>:
 8011a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a66:	1ccd      	adds	r5, r1, #3
 8011a68:	f025 0503 	bic.w	r5, r5, #3
 8011a6c:	3508      	adds	r5, #8
 8011a6e:	2d0c      	cmp	r5, #12
 8011a70:	bf38      	it	cc
 8011a72:	250c      	movcc	r5, #12
 8011a74:	2d00      	cmp	r5, #0
 8011a76:	4606      	mov	r6, r0
 8011a78:	db01      	blt.n	8011a7e <_malloc_r+0x1a>
 8011a7a:	42a9      	cmp	r1, r5
 8011a7c:	d903      	bls.n	8011a86 <_malloc_r+0x22>
 8011a7e:	230c      	movs	r3, #12
 8011a80:	6033      	str	r3, [r6, #0]
 8011a82:	2000      	movs	r0, #0
 8011a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a86:	f000 fa0f 	bl	8011ea8 <__malloc_lock>
 8011a8a:	4921      	ldr	r1, [pc, #132]	; (8011b10 <_malloc_r+0xac>)
 8011a8c:	680a      	ldr	r2, [r1, #0]
 8011a8e:	4614      	mov	r4, r2
 8011a90:	b99c      	cbnz	r4, 8011aba <_malloc_r+0x56>
 8011a92:	4f20      	ldr	r7, [pc, #128]	; (8011b14 <_malloc_r+0xb0>)
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	b923      	cbnz	r3, 8011aa2 <_malloc_r+0x3e>
 8011a98:	4621      	mov	r1, r4
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	f000 f998 	bl	8011dd0 <_sbrk_r>
 8011aa0:	6038      	str	r0, [r7, #0]
 8011aa2:	4629      	mov	r1, r5
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f000 f993 	bl	8011dd0 <_sbrk_r>
 8011aaa:	1c43      	adds	r3, r0, #1
 8011aac:	d123      	bne.n	8011af6 <_malloc_r+0x92>
 8011aae:	230c      	movs	r3, #12
 8011ab0:	6033      	str	r3, [r6, #0]
 8011ab2:	4630      	mov	r0, r6
 8011ab4:	f000 f9fe 	bl	8011eb4 <__malloc_unlock>
 8011ab8:	e7e3      	b.n	8011a82 <_malloc_r+0x1e>
 8011aba:	6823      	ldr	r3, [r4, #0]
 8011abc:	1b5b      	subs	r3, r3, r5
 8011abe:	d417      	bmi.n	8011af0 <_malloc_r+0x8c>
 8011ac0:	2b0b      	cmp	r3, #11
 8011ac2:	d903      	bls.n	8011acc <_malloc_r+0x68>
 8011ac4:	6023      	str	r3, [r4, #0]
 8011ac6:	441c      	add	r4, r3
 8011ac8:	6025      	str	r5, [r4, #0]
 8011aca:	e004      	b.n	8011ad6 <_malloc_r+0x72>
 8011acc:	6863      	ldr	r3, [r4, #4]
 8011ace:	42a2      	cmp	r2, r4
 8011ad0:	bf0c      	ite	eq
 8011ad2:	600b      	streq	r3, [r1, #0]
 8011ad4:	6053      	strne	r3, [r2, #4]
 8011ad6:	4630      	mov	r0, r6
 8011ad8:	f000 f9ec 	bl	8011eb4 <__malloc_unlock>
 8011adc:	f104 000b 	add.w	r0, r4, #11
 8011ae0:	1d23      	adds	r3, r4, #4
 8011ae2:	f020 0007 	bic.w	r0, r0, #7
 8011ae6:	1ac2      	subs	r2, r0, r3
 8011ae8:	d0cc      	beq.n	8011a84 <_malloc_r+0x20>
 8011aea:	1a1b      	subs	r3, r3, r0
 8011aec:	50a3      	str	r3, [r4, r2]
 8011aee:	e7c9      	b.n	8011a84 <_malloc_r+0x20>
 8011af0:	4622      	mov	r2, r4
 8011af2:	6864      	ldr	r4, [r4, #4]
 8011af4:	e7cc      	b.n	8011a90 <_malloc_r+0x2c>
 8011af6:	1cc4      	adds	r4, r0, #3
 8011af8:	f024 0403 	bic.w	r4, r4, #3
 8011afc:	42a0      	cmp	r0, r4
 8011afe:	d0e3      	beq.n	8011ac8 <_malloc_r+0x64>
 8011b00:	1a21      	subs	r1, r4, r0
 8011b02:	4630      	mov	r0, r6
 8011b04:	f000 f964 	bl	8011dd0 <_sbrk_r>
 8011b08:	3001      	adds	r0, #1
 8011b0a:	d1dd      	bne.n	8011ac8 <_malloc_r+0x64>
 8011b0c:	e7cf      	b.n	8011aae <_malloc_r+0x4a>
 8011b0e:	bf00      	nop
 8011b10:	2001aa3c 	.word	0x2001aa3c
 8011b14:	2001aa40 	.word	0x2001aa40

08011b18 <__ssputs_r>:
 8011b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b1c:	688e      	ldr	r6, [r1, #8]
 8011b1e:	429e      	cmp	r6, r3
 8011b20:	4682      	mov	sl, r0
 8011b22:	460c      	mov	r4, r1
 8011b24:	4690      	mov	r8, r2
 8011b26:	461f      	mov	r7, r3
 8011b28:	d838      	bhi.n	8011b9c <__ssputs_r+0x84>
 8011b2a:	898a      	ldrh	r2, [r1, #12]
 8011b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b30:	d032      	beq.n	8011b98 <__ssputs_r+0x80>
 8011b32:	6825      	ldr	r5, [r4, #0]
 8011b34:	6909      	ldr	r1, [r1, #16]
 8011b36:	eba5 0901 	sub.w	r9, r5, r1
 8011b3a:	6965      	ldr	r5, [r4, #20]
 8011b3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b44:	3301      	adds	r3, #1
 8011b46:	444b      	add	r3, r9
 8011b48:	106d      	asrs	r5, r5, #1
 8011b4a:	429d      	cmp	r5, r3
 8011b4c:	bf38      	it	cc
 8011b4e:	461d      	movcc	r5, r3
 8011b50:	0553      	lsls	r3, r2, #21
 8011b52:	d531      	bpl.n	8011bb8 <__ssputs_r+0xa0>
 8011b54:	4629      	mov	r1, r5
 8011b56:	f7ff ff85 	bl	8011a64 <_malloc_r>
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	b950      	cbnz	r0, 8011b74 <__ssputs_r+0x5c>
 8011b5e:	230c      	movs	r3, #12
 8011b60:	f8ca 3000 	str.w	r3, [sl]
 8011b64:	89a3      	ldrh	r3, [r4, #12]
 8011b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b6a:	81a3      	strh	r3, [r4, #12]
 8011b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b74:	6921      	ldr	r1, [r4, #16]
 8011b76:	464a      	mov	r2, r9
 8011b78:	f7fe f83c 	bl	800fbf4 <memcpy>
 8011b7c:	89a3      	ldrh	r3, [r4, #12]
 8011b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b86:	81a3      	strh	r3, [r4, #12]
 8011b88:	6126      	str	r6, [r4, #16]
 8011b8a:	6165      	str	r5, [r4, #20]
 8011b8c:	444e      	add	r6, r9
 8011b8e:	eba5 0509 	sub.w	r5, r5, r9
 8011b92:	6026      	str	r6, [r4, #0]
 8011b94:	60a5      	str	r5, [r4, #8]
 8011b96:	463e      	mov	r6, r7
 8011b98:	42be      	cmp	r6, r7
 8011b9a:	d900      	bls.n	8011b9e <__ssputs_r+0x86>
 8011b9c:	463e      	mov	r6, r7
 8011b9e:	4632      	mov	r2, r6
 8011ba0:	6820      	ldr	r0, [r4, #0]
 8011ba2:	4641      	mov	r1, r8
 8011ba4:	f000 f966 	bl	8011e74 <memmove>
 8011ba8:	68a3      	ldr	r3, [r4, #8]
 8011baa:	6822      	ldr	r2, [r4, #0]
 8011bac:	1b9b      	subs	r3, r3, r6
 8011bae:	4432      	add	r2, r6
 8011bb0:	60a3      	str	r3, [r4, #8]
 8011bb2:	6022      	str	r2, [r4, #0]
 8011bb4:	2000      	movs	r0, #0
 8011bb6:	e7db      	b.n	8011b70 <__ssputs_r+0x58>
 8011bb8:	462a      	mov	r2, r5
 8011bba:	f000 f981 	bl	8011ec0 <_realloc_r>
 8011bbe:	4606      	mov	r6, r0
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d1e1      	bne.n	8011b88 <__ssputs_r+0x70>
 8011bc4:	6921      	ldr	r1, [r4, #16]
 8011bc6:	4650      	mov	r0, sl
 8011bc8:	f7ff fefc 	bl	80119c4 <_free_r>
 8011bcc:	e7c7      	b.n	8011b5e <__ssputs_r+0x46>
	...

08011bd0 <_svfiprintf_r>:
 8011bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bd4:	4698      	mov	r8, r3
 8011bd6:	898b      	ldrh	r3, [r1, #12]
 8011bd8:	061b      	lsls	r3, r3, #24
 8011bda:	b09d      	sub	sp, #116	; 0x74
 8011bdc:	4607      	mov	r7, r0
 8011bde:	460d      	mov	r5, r1
 8011be0:	4614      	mov	r4, r2
 8011be2:	d50e      	bpl.n	8011c02 <_svfiprintf_r+0x32>
 8011be4:	690b      	ldr	r3, [r1, #16]
 8011be6:	b963      	cbnz	r3, 8011c02 <_svfiprintf_r+0x32>
 8011be8:	2140      	movs	r1, #64	; 0x40
 8011bea:	f7ff ff3b 	bl	8011a64 <_malloc_r>
 8011bee:	6028      	str	r0, [r5, #0]
 8011bf0:	6128      	str	r0, [r5, #16]
 8011bf2:	b920      	cbnz	r0, 8011bfe <_svfiprintf_r+0x2e>
 8011bf4:	230c      	movs	r3, #12
 8011bf6:	603b      	str	r3, [r7, #0]
 8011bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bfc:	e0d1      	b.n	8011da2 <_svfiprintf_r+0x1d2>
 8011bfe:	2340      	movs	r3, #64	; 0x40
 8011c00:	616b      	str	r3, [r5, #20]
 8011c02:	2300      	movs	r3, #0
 8011c04:	9309      	str	r3, [sp, #36]	; 0x24
 8011c06:	2320      	movs	r3, #32
 8011c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c10:	2330      	movs	r3, #48	; 0x30
 8011c12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011dbc <_svfiprintf_r+0x1ec>
 8011c16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c1a:	f04f 0901 	mov.w	r9, #1
 8011c1e:	4623      	mov	r3, r4
 8011c20:	469a      	mov	sl, r3
 8011c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c26:	b10a      	cbz	r2, 8011c2c <_svfiprintf_r+0x5c>
 8011c28:	2a25      	cmp	r2, #37	; 0x25
 8011c2a:	d1f9      	bne.n	8011c20 <_svfiprintf_r+0x50>
 8011c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8011c30:	d00b      	beq.n	8011c4a <_svfiprintf_r+0x7a>
 8011c32:	465b      	mov	r3, fp
 8011c34:	4622      	mov	r2, r4
 8011c36:	4629      	mov	r1, r5
 8011c38:	4638      	mov	r0, r7
 8011c3a:	f7ff ff6d 	bl	8011b18 <__ssputs_r>
 8011c3e:	3001      	adds	r0, #1
 8011c40:	f000 80aa 	beq.w	8011d98 <_svfiprintf_r+0x1c8>
 8011c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c46:	445a      	add	r2, fp
 8011c48:	9209      	str	r2, [sp, #36]	; 0x24
 8011c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f000 80a2 	beq.w	8011d98 <_svfiprintf_r+0x1c8>
 8011c54:	2300      	movs	r3, #0
 8011c56:	f04f 32ff 	mov.w	r2, #4294967295
 8011c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c5e:	f10a 0a01 	add.w	sl, sl, #1
 8011c62:	9304      	str	r3, [sp, #16]
 8011c64:	9307      	str	r3, [sp, #28]
 8011c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8011c6c:	4654      	mov	r4, sl
 8011c6e:	2205      	movs	r2, #5
 8011c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c74:	4851      	ldr	r0, [pc, #324]	; (8011dbc <_svfiprintf_r+0x1ec>)
 8011c76:	f7ee fb2b 	bl	80002d0 <memchr>
 8011c7a:	9a04      	ldr	r2, [sp, #16]
 8011c7c:	b9d8      	cbnz	r0, 8011cb6 <_svfiprintf_r+0xe6>
 8011c7e:	06d0      	lsls	r0, r2, #27
 8011c80:	bf44      	itt	mi
 8011c82:	2320      	movmi	r3, #32
 8011c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c88:	0711      	lsls	r1, r2, #28
 8011c8a:	bf44      	itt	mi
 8011c8c:	232b      	movmi	r3, #43	; 0x2b
 8011c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c92:	f89a 3000 	ldrb.w	r3, [sl]
 8011c96:	2b2a      	cmp	r3, #42	; 0x2a
 8011c98:	d015      	beq.n	8011cc6 <_svfiprintf_r+0xf6>
 8011c9a:	9a07      	ldr	r2, [sp, #28]
 8011c9c:	4654      	mov	r4, sl
 8011c9e:	2000      	movs	r0, #0
 8011ca0:	f04f 0c0a 	mov.w	ip, #10
 8011ca4:	4621      	mov	r1, r4
 8011ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011caa:	3b30      	subs	r3, #48	; 0x30
 8011cac:	2b09      	cmp	r3, #9
 8011cae:	d94e      	bls.n	8011d4e <_svfiprintf_r+0x17e>
 8011cb0:	b1b0      	cbz	r0, 8011ce0 <_svfiprintf_r+0x110>
 8011cb2:	9207      	str	r2, [sp, #28]
 8011cb4:	e014      	b.n	8011ce0 <_svfiprintf_r+0x110>
 8011cb6:	eba0 0308 	sub.w	r3, r0, r8
 8011cba:	fa09 f303 	lsl.w	r3, r9, r3
 8011cbe:	4313      	orrs	r3, r2
 8011cc0:	9304      	str	r3, [sp, #16]
 8011cc2:	46a2      	mov	sl, r4
 8011cc4:	e7d2      	b.n	8011c6c <_svfiprintf_r+0x9c>
 8011cc6:	9b03      	ldr	r3, [sp, #12]
 8011cc8:	1d19      	adds	r1, r3, #4
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	9103      	str	r1, [sp, #12]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	bfbb      	ittet	lt
 8011cd2:	425b      	neglt	r3, r3
 8011cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8011cd8:	9307      	strge	r3, [sp, #28]
 8011cda:	9307      	strlt	r3, [sp, #28]
 8011cdc:	bfb8      	it	lt
 8011cde:	9204      	strlt	r2, [sp, #16]
 8011ce0:	7823      	ldrb	r3, [r4, #0]
 8011ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ce4:	d10c      	bne.n	8011d00 <_svfiprintf_r+0x130>
 8011ce6:	7863      	ldrb	r3, [r4, #1]
 8011ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8011cea:	d135      	bne.n	8011d58 <_svfiprintf_r+0x188>
 8011cec:	9b03      	ldr	r3, [sp, #12]
 8011cee:	1d1a      	adds	r2, r3, #4
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	9203      	str	r2, [sp, #12]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	bfb8      	it	lt
 8011cf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cfc:	3402      	adds	r4, #2
 8011cfe:	9305      	str	r3, [sp, #20]
 8011d00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011dcc <_svfiprintf_r+0x1fc>
 8011d04:	7821      	ldrb	r1, [r4, #0]
 8011d06:	2203      	movs	r2, #3
 8011d08:	4650      	mov	r0, sl
 8011d0a:	f7ee fae1 	bl	80002d0 <memchr>
 8011d0e:	b140      	cbz	r0, 8011d22 <_svfiprintf_r+0x152>
 8011d10:	2340      	movs	r3, #64	; 0x40
 8011d12:	eba0 000a 	sub.w	r0, r0, sl
 8011d16:	fa03 f000 	lsl.w	r0, r3, r0
 8011d1a:	9b04      	ldr	r3, [sp, #16]
 8011d1c:	4303      	orrs	r3, r0
 8011d1e:	3401      	adds	r4, #1
 8011d20:	9304      	str	r3, [sp, #16]
 8011d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d26:	4826      	ldr	r0, [pc, #152]	; (8011dc0 <_svfiprintf_r+0x1f0>)
 8011d28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d2c:	2206      	movs	r2, #6
 8011d2e:	f7ee facf 	bl	80002d0 <memchr>
 8011d32:	2800      	cmp	r0, #0
 8011d34:	d038      	beq.n	8011da8 <_svfiprintf_r+0x1d8>
 8011d36:	4b23      	ldr	r3, [pc, #140]	; (8011dc4 <_svfiprintf_r+0x1f4>)
 8011d38:	bb1b      	cbnz	r3, 8011d82 <_svfiprintf_r+0x1b2>
 8011d3a:	9b03      	ldr	r3, [sp, #12]
 8011d3c:	3307      	adds	r3, #7
 8011d3e:	f023 0307 	bic.w	r3, r3, #7
 8011d42:	3308      	adds	r3, #8
 8011d44:	9303      	str	r3, [sp, #12]
 8011d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d48:	4433      	add	r3, r6
 8011d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d4c:	e767      	b.n	8011c1e <_svfiprintf_r+0x4e>
 8011d4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d52:	460c      	mov	r4, r1
 8011d54:	2001      	movs	r0, #1
 8011d56:	e7a5      	b.n	8011ca4 <_svfiprintf_r+0xd4>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	3401      	adds	r4, #1
 8011d5c:	9305      	str	r3, [sp, #20]
 8011d5e:	4619      	mov	r1, r3
 8011d60:	f04f 0c0a 	mov.w	ip, #10
 8011d64:	4620      	mov	r0, r4
 8011d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d6a:	3a30      	subs	r2, #48	; 0x30
 8011d6c:	2a09      	cmp	r2, #9
 8011d6e:	d903      	bls.n	8011d78 <_svfiprintf_r+0x1a8>
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d0c5      	beq.n	8011d00 <_svfiprintf_r+0x130>
 8011d74:	9105      	str	r1, [sp, #20]
 8011d76:	e7c3      	b.n	8011d00 <_svfiprintf_r+0x130>
 8011d78:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e7f0      	b.n	8011d64 <_svfiprintf_r+0x194>
 8011d82:	ab03      	add	r3, sp, #12
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	462a      	mov	r2, r5
 8011d88:	4b0f      	ldr	r3, [pc, #60]	; (8011dc8 <_svfiprintf_r+0x1f8>)
 8011d8a:	a904      	add	r1, sp, #16
 8011d8c:	4638      	mov	r0, r7
 8011d8e:	f7fd ffe7 	bl	800fd60 <_printf_float>
 8011d92:	1c42      	adds	r2, r0, #1
 8011d94:	4606      	mov	r6, r0
 8011d96:	d1d6      	bne.n	8011d46 <_svfiprintf_r+0x176>
 8011d98:	89ab      	ldrh	r3, [r5, #12]
 8011d9a:	065b      	lsls	r3, r3, #25
 8011d9c:	f53f af2c 	bmi.w	8011bf8 <_svfiprintf_r+0x28>
 8011da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011da2:	b01d      	add	sp, #116	; 0x74
 8011da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da8:	ab03      	add	r3, sp, #12
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	462a      	mov	r2, r5
 8011dae:	4b06      	ldr	r3, [pc, #24]	; (8011dc8 <_svfiprintf_r+0x1f8>)
 8011db0:	a904      	add	r1, sp, #16
 8011db2:	4638      	mov	r0, r7
 8011db4:	f7fe fa78 	bl	80102a8 <_printf_i>
 8011db8:	e7eb      	b.n	8011d92 <_svfiprintf_r+0x1c2>
 8011dba:	bf00      	nop
 8011dbc:	080130dc 	.word	0x080130dc
 8011dc0:	080130e6 	.word	0x080130e6
 8011dc4:	0800fd61 	.word	0x0800fd61
 8011dc8:	08011b19 	.word	0x08011b19
 8011dcc:	080130e2 	.word	0x080130e2

08011dd0 <_sbrk_r>:
 8011dd0:	b538      	push	{r3, r4, r5, lr}
 8011dd2:	4d06      	ldr	r5, [pc, #24]	; (8011dec <_sbrk_r+0x1c>)
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	4604      	mov	r4, r0
 8011dd8:	4608      	mov	r0, r1
 8011dda:	602b      	str	r3, [r5, #0]
 8011ddc:	f7f2 f848 	bl	8003e70 <_sbrk>
 8011de0:	1c43      	adds	r3, r0, #1
 8011de2:	d102      	bne.n	8011dea <_sbrk_r+0x1a>
 8011de4:	682b      	ldr	r3, [r5, #0]
 8011de6:	b103      	cbz	r3, 8011dea <_sbrk_r+0x1a>
 8011de8:	6023      	str	r3, [r4, #0]
 8011dea:	bd38      	pop	{r3, r4, r5, pc}
 8011dec:	2001ad1c 	.word	0x2001ad1c

08011df0 <__assert_func>:
 8011df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011df2:	4614      	mov	r4, r2
 8011df4:	461a      	mov	r2, r3
 8011df6:	4b09      	ldr	r3, [pc, #36]	; (8011e1c <__assert_func+0x2c>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4605      	mov	r5, r0
 8011dfc:	68d8      	ldr	r0, [r3, #12]
 8011dfe:	b14c      	cbz	r4, 8011e14 <__assert_func+0x24>
 8011e00:	4b07      	ldr	r3, [pc, #28]	; (8011e20 <__assert_func+0x30>)
 8011e02:	9100      	str	r1, [sp, #0]
 8011e04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e08:	4906      	ldr	r1, [pc, #24]	; (8011e24 <__assert_func+0x34>)
 8011e0a:	462b      	mov	r3, r5
 8011e0c:	f000 f80e 	bl	8011e2c <fiprintf>
 8011e10:	f000 faa4 	bl	801235c <abort>
 8011e14:	4b04      	ldr	r3, [pc, #16]	; (8011e28 <__assert_func+0x38>)
 8011e16:	461c      	mov	r4, r3
 8011e18:	e7f3      	b.n	8011e02 <__assert_func+0x12>
 8011e1a:	bf00      	nop
 8011e1c:	20000034 	.word	0x20000034
 8011e20:	080130ed 	.word	0x080130ed
 8011e24:	080130fa 	.word	0x080130fa
 8011e28:	08013128 	.word	0x08013128

08011e2c <fiprintf>:
 8011e2c:	b40e      	push	{r1, r2, r3}
 8011e2e:	b503      	push	{r0, r1, lr}
 8011e30:	4601      	mov	r1, r0
 8011e32:	ab03      	add	r3, sp, #12
 8011e34:	4805      	ldr	r0, [pc, #20]	; (8011e4c <fiprintf+0x20>)
 8011e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e3a:	6800      	ldr	r0, [r0, #0]
 8011e3c:	9301      	str	r3, [sp, #4]
 8011e3e:	f000 f88f 	bl	8011f60 <_vfiprintf_r>
 8011e42:	b002      	add	sp, #8
 8011e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e48:	b003      	add	sp, #12
 8011e4a:	4770      	bx	lr
 8011e4c:	20000034 	.word	0x20000034

08011e50 <__ascii_mbtowc>:
 8011e50:	b082      	sub	sp, #8
 8011e52:	b901      	cbnz	r1, 8011e56 <__ascii_mbtowc+0x6>
 8011e54:	a901      	add	r1, sp, #4
 8011e56:	b142      	cbz	r2, 8011e6a <__ascii_mbtowc+0x1a>
 8011e58:	b14b      	cbz	r3, 8011e6e <__ascii_mbtowc+0x1e>
 8011e5a:	7813      	ldrb	r3, [r2, #0]
 8011e5c:	600b      	str	r3, [r1, #0]
 8011e5e:	7812      	ldrb	r2, [r2, #0]
 8011e60:	1e10      	subs	r0, r2, #0
 8011e62:	bf18      	it	ne
 8011e64:	2001      	movne	r0, #1
 8011e66:	b002      	add	sp, #8
 8011e68:	4770      	bx	lr
 8011e6a:	4610      	mov	r0, r2
 8011e6c:	e7fb      	b.n	8011e66 <__ascii_mbtowc+0x16>
 8011e6e:	f06f 0001 	mvn.w	r0, #1
 8011e72:	e7f8      	b.n	8011e66 <__ascii_mbtowc+0x16>

08011e74 <memmove>:
 8011e74:	4288      	cmp	r0, r1
 8011e76:	b510      	push	{r4, lr}
 8011e78:	eb01 0402 	add.w	r4, r1, r2
 8011e7c:	d902      	bls.n	8011e84 <memmove+0x10>
 8011e7e:	4284      	cmp	r4, r0
 8011e80:	4623      	mov	r3, r4
 8011e82:	d807      	bhi.n	8011e94 <memmove+0x20>
 8011e84:	1e43      	subs	r3, r0, #1
 8011e86:	42a1      	cmp	r1, r4
 8011e88:	d008      	beq.n	8011e9c <memmove+0x28>
 8011e8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e92:	e7f8      	b.n	8011e86 <memmove+0x12>
 8011e94:	4402      	add	r2, r0
 8011e96:	4601      	mov	r1, r0
 8011e98:	428a      	cmp	r2, r1
 8011e9a:	d100      	bne.n	8011e9e <memmove+0x2a>
 8011e9c:	bd10      	pop	{r4, pc}
 8011e9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ea2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ea6:	e7f7      	b.n	8011e98 <memmove+0x24>

08011ea8 <__malloc_lock>:
 8011ea8:	4801      	ldr	r0, [pc, #4]	; (8011eb0 <__malloc_lock+0x8>)
 8011eaa:	f000 bc17 	b.w	80126dc <__retarget_lock_acquire_recursive>
 8011eae:	bf00      	nop
 8011eb0:	2001ad24 	.word	0x2001ad24

08011eb4 <__malloc_unlock>:
 8011eb4:	4801      	ldr	r0, [pc, #4]	; (8011ebc <__malloc_unlock+0x8>)
 8011eb6:	f000 bc12 	b.w	80126de <__retarget_lock_release_recursive>
 8011eba:	bf00      	nop
 8011ebc:	2001ad24 	.word	0x2001ad24

08011ec0 <_realloc_r>:
 8011ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ec2:	4607      	mov	r7, r0
 8011ec4:	4614      	mov	r4, r2
 8011ec6:	460e      	mov	r6, r1
 8011ec8:	b921      	cbnz	r1, 8011ed4 <_realloc_r+0x14>
 8011eca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011ece:	4611      	mov	r1, r2
 8011ed0:	f7ff bdc8 	b.w	8011a64 <_malloc_r>
 8011ed4:	b922      	cbnz	r2, 8011ee0 <_realloc_r+0x20>
 8011ed6:	f7ff fd75 	bl	80119c4 <_free_r>
 8011eda:	4625      	mov	r5, r4
 8011edc:	4628      	mov	r0, r5
 8011ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ee0:	f000 fc62 	bl	80127a8 <_malloc_usable_size_r>
 8011ee4:	42a0      	cmp	r0, r4
 8011ee6:	d20f      	bcs.n	8011f08 <_realloc_r+0x48>
 8011ee8:	4621      	mov	r1, r4
 8011eea:	4638      	mov	r0, r7
 8011eec:	f7ff fdba 	bl	8011a64 <_malloc_r>
 8011ef0:	4605      	mov	r5, r0
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d0f2      	beq.n	8011edc <_realloc_r+0x1c>
 8011ef6:	4631      	mov	r1, r6
 8011ef8:	4622      	mov	r2, r4
 8011efa:	f7fd fe7b 	bl	800fbf4 <memcpy>
 8011efe:	4631      	mov	r1, r6
 8011f00:	4638      	mov	r0, r7
 8011f02:	f7ff fd5f 	bl	80119c4 <_free_r>
 8011f06:	e7e9      	b.n	8011edc <_realloc_r+0x1c>
 8011f08:	4635      	mov	r5, r6
 8011f0a:	e7e7      	b.n	8011edc <_realloc_r+0x1c>

08011f0c <__sfputc_r>:
 8011f0c:	6893      	ldr	r3, [r2, #8]
 8011f0e:	3b01      	subs	r3, #1
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	b410      	push	{r4}
 8011f14:	6093      	str	r3, [r2, #8]
 8011f16:	da08      	bge.n	8011f2a <__sfputc_r+0x1e>
 8011f18:	6994      	ldr	r4, [r2, #24]
 8011f1a:	42a3      	cmp	r3, r4
 8011f1c:	db01      	blt.n	8011f22 <__sfputc_r+0x16>
 8011f1e:	290a      	cmp	r1, #10
 8011f20:	d103      	bne.n	8011f2a <__sfputc_r+0x1e>
 8011f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f26:	f000 b94b 	b.w	80121c0 <__swbuf_r>
 8011f2a:	6813      	ldr	r3, [r2, #0]
 8011f2c:	1c58      	adds	r0, r3, #1
 8011f2e:	6010      	str	r0, [r2, #0]
 8011f30:	7019      	strb	r1, [r3, #0]
 8011f32:	4608      	mov	r0, r1
 8011f34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f38:	4770      	bx	lr

08011f3a <__sfputs_r>:
 8011f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3c:	4606      	mov	r6, r0
 8011f3e:	460f      	mov	r7, r1
 8011f40:	4614      	mov	r4, r2
 8011f42:	18d5      	adds	r5, r2, r3
 8011f44:	42ac      	cmp	r4, r5
 8011f46:	d101      	bne.n	8011f4c <__sfputs_r+0x12>
 8011f48:	2000      	movs	r0, #0
 8011f4a:	e007      	b.n	8011f5c <__sfputs_r+0x22>
 8011f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f50:	463a      	mov	r2, r7
 8011f52:	4630      	mov	r0, r6
 8011f54:	f7ff ffda 	bl	8011f0c <__sfputc_r>
 8011f58:	1c43      	adds	r3, r0, #1
 8011f5a:	d1f3      	bne.n	8011f44 <__sfputs_r+0xa>
 8011f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f60 <_vfiprintf_r>:
 8011f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f64:	460d      	mov	r5, r1
 8011f66:	b09d      	sub	sp, #116	; 0x74
 8011f68:	4614      	mov	r4, r2
 8011f6a:	4698      	mov	r8, r3
 8011f6c:	4606      	mov	r6, r0
 8011f6e:	b118      	cbz	r0, 8011f78 <_vfiprintf_r+0x18>
 8011f70:	6983      	ldr	r3, [r0, #24]
 8011f72:	b90b      	cbnz	r3, 8011f78 <_vfiprintf_r+0x18>
 8011f74:	f000 fb14 	bl	80125a0 <__sinit>
 8011f78:	4b89      	ldr	r3, [pc, #548]	; (80121a0 <_vfiprintf_r+0x240>)
 8011f7a:	429d      	cmp	r5, r3
 8011f7c:	d11b      	bne.n	8011fb6 <_vfiprintf_r+0x56>
 8011f7e:	6875      	ldr	r5, [r6, #4]
 8011f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f82:	07d9      	lsls	r1, r3, #31
 8011f84:	d405      	bmi.n	8011f92 <_vfiprintf_r+0x32>
 8011f86:	89ab      	ldrh	r3, [r5, #12]
 8011f88:	059a      	lsls	r2, r3, #22
 8011f8a:	d402      	bmi.n	8011f92 <_vfiprintf_r+0x32>
 8011f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f8e:	f000 fba5 	bl	80126dc <__retarget_lock_acquire_recursive>
 8011f92:	89ab      	ldrh	r3, [r5, #12]
 8011f94:	071b      	lsls	r3, r3, #28
 8011f96:	d501      	bpl.n	8011f9c <_vfiprintf_r+0x3c>
 8011f98:	692b      	ldr	r3, [r5, #16]
 8011f9a:	b9eb      	cbnz	r3, 8011fd8 <_vfiprintf_r+0x78>
 8011f9c:	4629      	mov	r1, r5
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f000 f96e 	bl	8012280 <__swsetup_r>
 8011fa4:	b1c0      	cbz	r0, 8011fd8 <_vfiprintf_r+0x78>
 8011fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fa8:	07dc      	lsls	r4, r3, #31
 8011faa:	d50e      	bpl.n	8011fca <_vfiprintf_r+0x6a>
 8011fac:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb0:	b01d      	add	sp, #116	; 0x74
 8011fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb6:	4b7b      	ldr	r3, [pc, #492]	; (80121a4 <_vfiprintf_r+0x244>)
 8011fb8:	429d      	cmp	r5, r3
 8011fba:	d101      	bne.n	8011fc0 <_vfiprintf_r+0x60>
 8011fbc:	68b5      	ldr	r5, [r6, #8]
 8011fbe:	e7df      	b.n	8011f80 <_vfiprintf_r+0x20>
 8011fc0:	4b79      	ldr	r3, [pc, #484]	; (80121a8 <_vfiprintf_r+0x248>)
 8011fc2:	429d      	cmp	r5, r3
 8011fc4:	bf08      	it	eq
 8011fc6:	68f5      	ldreq	r5, [r6, #12]
 8011fc8:	e7da      	b.n	8011f80 <_vfiprintf_r+0x20>
 8011fca:	89ab      	ldrh	r3, [r5, #12]
 8011fcc:	0598      	lsls	r0, r3, #22
 8011fce:	d4ed      	bmi.n	8011fac <_vfiprintf_r+0x4c>
 8011fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fd2:	f000 fb84 	bl	80126de <__retarget_lock_release_recursive>
 8011fd6:	e7e9      	b.n	8011fac <_vfiprintf_r+0x4c>
 8011fd8:	2300      	movs	r3, #0
 8011fda:	9309      	str	r3, [sp, #36]	; 0x24
 8011fdc:	2320      	movs	r3, #32
 8011fde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fe6:	2330      	movs	r3, #48	; 0x30
 8011fe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80121ac <_vfiprintf_r+0x24c>
 8011fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ff0:	f04f 0901 	mov.w	r9, #1
 8011ff4:	4623      	mov	r3, r4
 8011ff6:	469a      	mov	sl, r3
 8011ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ffc:	b10a      	cbz	r2, 8012002 <_vfiprintf_r+0xa2>
 8011ffe:	2a25      	cmp	r2, #37	; 0x25
 8012000:	d1f9      	bne.n	8011ff6 <_vfiprintf_r+0x96>
 8012002:	ebba 0b04 	subs.w	fp, sl, r4
 8012006:	d00b      	beq.n	8012020 <_vfiprintf_r+0xc0>
 8012008:	465b      	mov	r3, fp
 801200a:	4622      	mov	r2, r4
 801200c:	4629      	mov	r1, r5
 801200e:	4630      	mov	r0, r6
 8012010:	f7ff ff93 	bl	8011f3a <__sfputs_r>
 8012014:	3001      	adds	r0, #1
 8012016:	f000 80aa 	beq.w	801216e <_vfiprintf_r+0x20e>
 801201a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801201c:	445a      	add	r2, fp
 801201e:	9209      	str	r2, [sp, #36]	; 0x24
 8012020:	f89a 3000 	ldrb.w	r3, [sl]
 8012024:	2b00      	cmp	r3, #0
 8012026:	f000 80a2 	beq.w	801216e <_vfiprintf_r+0x20e>
 801202a:	2300      	movs	r3, #0
 801202c:	f04f 32ff 	mov.w	r2, #4294967295
 8012030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012034:	f10a 0a01 	add.w	sl, sl, #1
 8012038:	9304      	str	r3, [sp, #16]
 801203a:	9307      	str	r3, [sp, #28]
 801203c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012040:	931a      	str	r3, [sp, #104]	; 0x68
 8012042:	4654      	mov	r4, sl
 8012044:	2205      	movs	r2, #5
 8012046:	f814 1b01 	ldrb.w	r1, [r4], #1
 801204a:	4858      	ldr	r0, [pc, #352]	; (80121ac <_vfiprintf_r+0x24c>)
 801204c:	f7ee f940 	bl	80002d0 <memchr>
 8012050:	9a04      	ldr	r2, [sp, #16]
 8012052:	b9d8      	cbnz	r0, 801208c <_vfiprintf_r+0x12c>
 8012054:	06d1      	lsls	r1, r2, #27
 8012056:	bf44      	itt	mi
 8012058:	2320      	movmi	r3, #32
 801205a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801205e:	0713      	lsls	r3, r2, #28
 8012060:	bf44      	itt	mi
 8012062:	232b      	movmi	r3, #43	; 0x2b
 8012064:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012068:	f89a 3000 	ldrb.w	r3, [sl]
 801206c:	2b2a      	cmp	r3, #42	; 0x2a
 801206e:	d015      	beq.n	801209c <_vfiprintf_r+0x13c>
 8012070:	9a07      	ldr	r2, [sp, #28]
 8012072:	4654      	mov	r4, sl
 8012074:	2000      	movs	r0, #0
 8012076:	f04f 0c0a 	mov.w	ip, #10
 801207a:	4621      	mov	r1, r4
 801207c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012080:	3b30      	subs	r3, #48	; 0x30
 8012082:	2b09      	cmp	r3, #9
 8012084:	d94e      	bls.n	8012124 <_vfiprintf_r+0x1c4>
 8012086:	b1b0      	cbz	r0, 80120b6 <_vfiprintf_r+0x156>
 8012088:	9207      	str	r2, [sp, #28]
 801208a:	e014      	b.n	80120b6 <_vfiprintf_r+0x156>
 801208c:	eba0 0308 	sub.w	r3, r0, r8
 8012090:	fa09 f303 	lsl.w	r3, r9, r3
 8012094:	4313      	orrs	r3, r2
 8012096:	9304      	str	r3, [sp, #16]
 8012098:	46a2      	mov	sl, r4
 801209a:	e7d2      	b.n	8012042 <_vfiprintf_r+0xe2>
 801209c:	9b03      	ldr	r3, [sp, #12]
 801209e:	1d19      	adds	r1, r3, #4
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	9103      	str	r1, [sp, #12]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	bfbb      	ittet	lt
 80120a8:	425b      	neglt	r3, r3
 80120aa:	f042 0202 	orrlt.w	r2, r2, #2
 80120ae:	9307      	strge	r3, [sp, #28]
 80120b0:	9307      	strlt	r3, [sp, #28]
 80120b2:	bfb8      	it	lt
 80120b4:	9204      	strlt	r2, [sp, #16]
 80120b6:	7823      	ldrb	r3, [r4, #0]
 80120b8:	2b2e      	cmp	r3, #46	; 0x2e
 80120ba:	d10c      	bne.n	80120d6 <_vfiprintf_r+0x176>
 80120bc:	7863      	ldrb	r3, [r4, #1]
 80120be:	2b2a      	cmp	r3, #42	; 0x2a
 80120c0:	d135      	bne.n	801212e <_vfiprintf_r+0x1ce>
 80120c2:	9b03      	ldr	r3, [sp, #12]
 80120c4:	1d1a      	adds	r2, r3, #4
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	9203      	str	r2, [sp, #12]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	bfb8      	it	lt
 80120ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80120d2:	3402      	adds	r4, #2
 80120d4:	9305      	str	r3, [sp, #20]
 80120d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80121bc <_vfiprintf_r+0x25c>
 80120da:	7821      	ldrb	r1, [r4, #0]
 80120dc:	2203      	movs	r2, #3
 80120de:	4650      	mov	r0, sl
 80120e0:	f7ee f8f6 	bl	80002d0 <memchr>
 80120e4:	b140      	cbz	r0, 80120f8 <_vfiprintf_r+0x198>
 80120e6:	2340      	movs	r3, #64	; 0x40
 80120e8:	eba0 000a 	sub.w	r0, r0, sl
 80120ec:	fa03 f000 	lsl.w	r0, r3, r0
 80120f0:	9b04      	ldr	r3, [sp, #16]
 80120f2:	4303      	orrs	r3, r0
 80120f4:	3401      	adds	r4, #1
 80120f6:	9304      	str	r3, [sp, #16]
 80120f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120fc:	482c      	ldr	r0, [pc, #176]	; (80121b0 <_vfiprintf_r+0x250>)
 80120fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012102:	2206      	movs	r2, #6
 8012104:	f7ee f8e4 	bl	80002d0 <memchr>
 8012108:	2800      	cmp	r0, #0
 801210a:	d03f      	beq.n	801218c <_vfiprintf_r+0x22c>
 801210c:	4b29      	ldr	r3, [pc, #164]	; (80121b4 <_vfiprintf_r+0x254>)
 801210e:	bb1b      	cbnz	r3, 8012158 <_vfiprintf_r+0x1f8>
 8012110:	9b03      	ldr	r3, [sp, #12]
 8012112:	3307      	adds	r3, #7
 8012114:	f023 0307 	bic.w	r3, r3, #7
 8012118:	3308      	adds	r3, #8
 801211a:	9303      	str	r3, [sp, #12]
 801211c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801211e:	443b      	add	r3, r7
 8012120:	9309      	str	r3, [sp, #36]	; 0x24
 8012122:	e767      	b.n	8011ff4 <_vfiprintf_r+0x94>
 8012124:	fb0c 3202 	mla	r2, ip, r2, r3
 8012128:	460c      	mov	r4, r1
 801212a:	2001      	movs	r0, #1
 801212c:	e7a5      	b.n	801207a <_vfiprintf_r+0x11a>
 801212e:	2300      	movs	r3, #0
 8012130:	3401      	adds	r4, #1
 8012132:	9305      	str	r3, [sp, #20]
 8012134:	4619      	mov	r1, r3
 8012136:	f04f 0c0a 	mov.w	ip, #10
 801213a:	4620      	mov	r0, r4
 801213c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012140:	3a30      	subs	r2, #48	; 0x30
 8012142:	2a09      	cmp	r2, #9
 8012144:	d903      	bls.n	801214e <_vfiprintf_r+0x1ee>
 8012146:	2b00      	cmp	r3, #0
 8012148:	d0c5      	beq.n	80120d6 <_vfiprintf_r+0x176>
 801214a:	9105      	str	r1, [sp, #20]
 801214c:	e7c3      	b.n	80120d6 <_vfiprintf_r+0x176>
 801214e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012152:	4604      	mov	r4, r0
 8012154:	2301      	movs	r3, #1
 8012156:	e7f0      	b.n	801213a <_vfiprintf_r+0x1da>
 8012158:	ab03      	add	r3, sp, #12
 801215a:	9300      	str	r3, [sp, #0]
 801215c:	462a      	mov	r2, r5
 801215e:	4b16      	ldr	r3, [pc, #88]	; (80121b8 <_vfiprintf_r+0x258>)
 8012160:	a904      	add	r1, sp, #16
 8012162:	4630      	mov	r0, r6
 8012164:	f7fd fdfc 	bl	800fd60 <_printf_float>
 8012168:	4607      	mov	r7, r0
 801216a:	1c78      	adds	r0, r7, #1
 801216c:	d1d6      	bne.n	801211c <_vfiprintf_r+0x1bc>
 801216e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012170:	07d9      	lsls	r1, r3, #31
 8012172:	d405      	bmi.n	8012180 <_vfiprintf_r+0x220>
 8012174:	89ab      	ldrh	r3, [r5, #12]
 8012176:	059a      	lsls	r2, r3, #22
 8012178:	d402      	bmi.n	8012180 <_vfiprintf_r+0x220>
 801217a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801217c:	f000 faaf 	bl	80126de <__retarget_lock_release_recursive>
 8012180:	89ab      	ldrh	r3, [r5, #12]
 8012182:	065b      	lsls	r3, r3, #25
 8012184:	f53f af12 	bmi.w	8011fac <_vfiprintf_r+0x4c>
 8012188:	9809      	ldr	r0, [sp, #36]	; 0x24
 801218a:	e711      	b.n	8011fb0 <_vfiprintf_r+0x50>
 801218c:	ab03      	add	r3, sp, #12
 801218e:	9300      	str	r3, [sp, #0]
 8012190:	462a      	mov	r2, r5
 8012192:	4b09      	ldr	r3, [pc, #36]	; (80121b8 <_vfiprintf_r+0x258>)
 8012194:	a904      	add	r1, sp, #16
 8012196:	4630      	mov	r0, r6
 8012198:	f7fe f886 	bl	80102a8 <_printf_i>
 801219c:	e7e4      	b.n	8012168 <_vfiprintf_r+0x208>
 801219e:	bf00      	nop
 80121a0:	08013254 	.word	0x08013254
 80121a4:	08013274 	.word	0x08013274
 80121a8:	08013234 	.word	0x08013234
 80121ac:	080130dc 	.word	0x080130dc
 80121b0:	080130e6 	.word	0x080130e6
 80121b4:	0800fd61 	.word	0x0800fd61
 80121b8:	08011f3b 	.word	0x08011f3b
 80121bc:	080130e2 	.word	0x080130e2

080121c0 <__swbuf_r>:
 80121c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121c2:	460e      	mov	r6, r1
 80121c4:	4614      	mov	r4, r2
 80121c6:	4605      	mov	r5, r0
 80121c8:	b118      	cbz	r0, 80121d2 <__swbuf_r+0x12>
 80121ca:	6983      	ldr	r3, [r0, #24]
 80121cc:	b90b      	cbnz	r3, 80121d2 <__swbuf_r+0x12>
 80121ce:	f000 f9e7 	bl	80125a0 <__sinit>
 80121d2:	4b21      	ldr	r3, [pc, #132]	; (8012258 <__swbuf_r+0x98>)
 80121d4:	429c      	cmp	r4, r3
 80121d6:	d12b      	bne.n	8012230 <__swbuf_r+0x70>
 80121d8:	686c      	ldr	r4, [r5, #4]
 80121da:	69a3      	ldr	r3, [r4, #24]
 80121dc:	60a3      	str	r3, [r4, #8]
 80121de:	89a3      	ldrh	r3, [r4, #12]
 80121e0:	071a      	lsls	r2, r3, #28
 80121e2:	d52f      	bpl.n	8012244 <__swbuf_r+0x84>
 80121e4:	6923      	ldr	r3, [r4, #16]
 80121e6:	b36b      	cbz	r3, 8012244 <__swbuf_r+0x84>
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	6820      	ldr	r0, [r4, #0]
 80121ec:	1ac0      	subs	r0, r0, r3
 80121ee:	6963      	ldr	r3, [r4, #20]
 80121f0:	b2f6      	uxtb	r6, r6
 80121f2:	4283      	cmp	r3, r0
 80121f4:	4637      	mov	r7, r6
 80121f6:	dc04      	bgt.n	8012202 <__swbuf_r+0x42>
 80121f8:	4621      	mov	r1, r4
 80121fa:	4628      	mov	r0, r5
 80121fc:	f000 f93c 	bl	8012478 <_fflush_r>
 8012200:	bb30      	cbnz	r0, 8012250 <__swbuf_r+0x90>
 8012202:	68a3      	ldr	r3, [r4, #8]
 8012204:	3b01      	subs	r3, #1
 8012206:	60a3      	str	r3, [r4, #8]
 8012208:	6823      	ldr	r3, [r4, #0]
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	6022      	str	r2, [r4, #0]
 801220e:	701e      	strb	r6, [r3, #0]
 8012210:	6963      	ldr	r3, [r4, #20]
 8012212:	3001      	adds	r0, #1
 8012214:	4283      	cmp	r3, r0
 8012216:	d004      	beq.n	8012222 <__swbuf_r+0x62>
 8012218:	89a3      	ldrh	r3, [r4, #12]
 801221a:	07db      	lsls	r3, r3, #31
 801221c:	d506      	bpl.n	801222c <__swbuf_r+0x6c>
 801221e:	2e0a      	cmp	r6, #10
 8012220:	d104      	bne.n	801222c <__swbuf_r+0x6c>
 8012222:	4621      	mov	r1, r4
 8012224:	4628      	mov	r0, r5
 8012226:	f000 f927 	bl	8012478 <_fflush_r>
 801222a:	b988      	cbnz	r0, 8012250 <__swbuf_r+0x90>
 801222c:	4638      	mov	r0, r7
 801222e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012230:	4b0a      	ldr	r3, [pc, #40]	; (801225c <__swbuf_r+0x9c>)
 8012232:	429c      	cmp	r4, r3
 8012234:	d101      	bne.n	801223a <__swbuf_r+0x7a>
 8012236:	68ac      	ldr	r4, [r5, #8]
 8012238:	e7cf      	b.n	80121da <__swbuf_r+0x1a>
 801223a:	4b09      	ldr	r3, [pc, #36]	; (8012260 <__swbuf_r+0xa0>)
 801223c:	429c      	cmp	r4, r3
 801223e:	bf08      	it	eq
 8012240:	68ec      	ldreq	r4, [r5, #12]
 8012242:	e7ca      	b.n	80121da <__swbuf_r+0x1a>
 8012244:	4621      	mov	r1, r4
 8012246:	4628      	mov	r0, r5
 8012248:	f000 f81a 	bl	8012280 <__swsetup_r>
 801224c:	2800      	cmp	r0, #0
 801224e:	d0cb      	beq.n	80121e8 <__swbuf_r+0x28>
 8012250:	f04f 37ff 	mov.w	r7, #4294967295
 8012254:	e7ea      	b.n	801222c <__swbuf_r+0x6c>
 8012256:	bf00      	nop
 8012258:	08013254 	.word	0x08013254
 801225c:	08013274 	.word	0x08013274
 8012260:	08013234 	.word	0x08013234

08012264 <__ascii_wctomb>:
 8012264:	b149      	cbz	r1, 801227a <__ascii_wctomb+0x16>
 8012266:	2aff      	cmp	r2, #255	; 0xff
 8012268:	bf85      	ittet	hi
 801226a:	238a      	movhi	r3, #138	; 0x8a
 801226c:	6003      	strhi	r3, [r0, #0]
 801226e:	700a      	strbls	r2, [r1, #0]
 8012270:	f04f 30ff 	movhi.w	r0, #4294967295
 8012274:	bf98      	it	ls
 8012276:	2001      	movls	r0, #1
 8012278:	4770      	bx	lr
 801227a:	4608      	mov	r0, r1
 801227c:	4770      	bx	lr
	...

08012280 <__swsetup_r>:
 8012280:	4b32      	ldr	r3, [pc, #200]	; (801234c <__swsetup_r+0xcc>)
 8012282:	b570      	push	{r4, r5, r6, lr}
 8012284:	681d      	ldr	r5, [r3, #0]
 8012286:	4606      	mov	r6, r0
 8012288:	460c      	mov	r4, r1
 801228a:	b125      	cbz	r5, 8012296 <__swsetup_r+0x16>
 801228c:	69ab      	ldr	r3, [r5, #24]
 801228e:	b913      	cbnz	r3, 8012296 <__swsetup_r+0x16>
 8012290:	4628      	mov	r0, r5
 8012292:	f000 f985 	bl	80125a0 <__sinit>
 8012296:	4b2e      	ldr	r3, [pc, #184]	; (8012350 <__swsetup_r+0xd0>)
 8012298:	429c      	cmp	r4, r3
 801229a:	d10f      	bne.n	80122bc <__swsetup_r+0x3c>
 801229c:	686c      	ldr	r4, [r5, #4]
 801229e:	89a3      	ldrh	r3, [r4, #12]
 80122a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122a4:	0719      	lsls	r1, r3, #28
 80122a6:	d42c      	bmi.n	8012302 <__swsetup_r+0x82>
 80122a8:	06dd      	lsls	r5, r3, #27
 80122aa:	d411      	bmi.n	80122d0 <__swsetup_r+0x50>
 80122ac:	2309      	movs	r3, #9
 80122ae:	6033      	str	r3, [r6, #0]
 80122b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80122b4:	81a3      	strh	r3, [r4, #12]
 80122b6:	f04f 30ff 	mov.w	r0, #4294967295
 80122ba:	e03e      	b.n	801233a <__swsetup_r+0xba>
 80122bc:	4b25      	ldr	r3, [pc, #148]	; (8012354 <__swsetup_r+0xd4>)
 80122be:	429c      	cmp	r4, r3
 80122c0:	d101      	bne.n	80122c6 <__swsetup_r+0x46>
 80122c2:	68ac      	ldr	r4, [r5, #8]
 80122c4:	e7eb      	b.n	801229e <__swsetup_r+0x1e>
 80122c6:	4b24      	ldr	r3, [pc, #144]	; (8012358 <__swsetup_r+0xd8>)
 80122c8:	429c      	cmp	r4, r3
 80122ca:	bf08      	it	eq
 80122cc:	68ec      	ldreq	r4, [r5, #12]
 80122ce:	e7e6      	b.n	801229e <__swsetup_r+0x1e>
 80122d0:	0758      	lsls	r0, r3, #29
 80122d2:	d512      	bpl.n	80122fa <__swsetup_r+0x7a>
 80122d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122d6:	b141      	cbz	r1, 80122ea <__swsetup_r+0x6a>
 80122d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122dc:	4299      	cmp	r1, r3
 80122de:	d002      	beq.n	80122e6 <__swsetup_r+0x66>
 80122e0:	4630      	mov	r0, r6
 80122e2:	f7ff fb6f 	bl	80119c4 <_free_r>
 80122e6:	2300      	movs	r3, #0
 80122e8:	6363      	str	r3, [r4, #52]	; 0x34
 80122ea:	89a3      	ldrh	r3, [r4, #12]
 80122ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122f0:	81a3      	strh	r3, [r4, #12]
 80122f2:	2300      	movs	r3, #0
 80122f4:	6063      	str	r3, [r4, #4]
 80122f6:	6923      	ldr	r3, [r4, #16]
 80122f8:	6023      	str	r3, [r4, #0]
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	f043 0308 	orr.w	r3, r3, #8
 8012300:	81a3      	strh	r3, [r4, #12]
 8012302:	6923      	ldr	r3, [r4, #16]
 8012304:	b94b      	cbnz	r3, 801231a <__swsetup_r+0x9a>
 8012306:	89a3      	ldrh	r3, [r4, #12]
 8012308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801230c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012310:	d003      	beq.n	801231a <__swsetup_r+0x9a>
 8012312:	4621      	mov	r1, r4
 8012314:	4630      	mov	r0, r6
 8012316:	f000 fa07 	bl	8012728 <__smakebuf_r>
 801231a:	89a0      	ldrh	r0, [r4, #12]
 801231c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012320:	f010 0301 	ands.w	r3, r0, #1
 8012324:	d00a      	beq.n	801233c <__swsetup_r+0xbc>
 8012326:	2300      	movs	r3, #0
 8012328:	60a3      	str	r3, [r4, #8]
 801232a:	6963      	ldr	r3, [r4, #20]
 801232c:	425b      	negs	r3, r3
 801232e:	61a3      	str	r3, [r4, #24]
 8012330:	6923      	ldr	r3, [r4, #16]
 8012332:	b943      	cbnz	r3, 8012346 <__swsetup_r+0xc6>
 8012334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012338:	d1ba      	bne.n	80122b0 <__swsetup_r+0x30>
 801233a:	bd70      	pop	{r4, r5, r6, pc}
 801233c:	0781      	lsls	r1, r0, #30
 801233e:	bf58      	it	pl
 8012340:	6963      	ldrpl	r3, [r4, #20]
 8012342:	60a3      	str	r3, [r4, #8]
 8012344:	e7f4      	b.n	8012330 <__swsetup_r+0xb0>
 8012346:	2000      	movs	r0, #0
 8012348:	e7f7      	b.n	801233a <__swsetup_r+0xba>
 801234a:	bf00      	nop
 801234c:	20000034 	.word	0x20000034
 8012350:	08013254 	.word	0x08013254
 8012354:	08013274 	.word	0x08013274
 8012358:	08013234 	.word	0x08013234

0801235c <abort>:
 801235c:	b508      	push	{r3, lr}
 801235e:	2006      	movs	r0, #6
 8012360:	f000 fa52 	bl	8012808 <raise>
 8012364:	2001      	movs	r0, #1
 8012366:	f7f1 fd27 	bl	8003db8 <_exit>
	...

0801236c <__sflush_r>:
 801236c:	898a      	ldrh	r2, [r1, #12]
 801236e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012372:	4605      	mov	r5, r0
 8012374:	0710      	lsls	r0, r2, #28
 8012376:	460c      	mov	r4, r1
 8012378:	d458      	bmi.n	801242c <__sflush_r+0xc0>
 801237a:	684b      	ldr	r3, [r1, #4]
 801237c:	2b00      	cmp	r3, #0
 801237e:	dc05      	bgt.n	801238c <__sflush_r+0x20>
 8012380:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012382:	2b00      	cmp	r3, #0
 8012384:	dc02      	bgt.n	801238c <__sflush_r+0x20>
 8012386:	2000      	movs	r0, #0
 8012388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801238e:	2e00      	cmp	r6, #0
 8012390:	d0f9      	beq.n	8012386 <__sflush_r+0x1a>
 8012392:	2300      	movs	r3, #0
 8012394:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012398:	682f      	ldr	r7, [r5, #0]
 801239a:	602b      	str	r3, [r5, #0]
 801239c:	d032      	beq.n	8012404 <__sflush_r+0x98>
 801239e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80123a0:	89a3      	ldrh	r3, [r4, #12]
 80123a2:	075a      	lsls	r2, r3, #29
 80123a4:	d505      	bpl.n	80123b2 <__sflush_r+0x46>
 80123a6:	6863      	ldr	r3, [r4, #4]
 80123a8:	1ac0      	subs	r0, r0, r3
 80123aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80123ac:	b10b      	cbz	r3, 80123b2 <__sflush_r+0x46>
 80123ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80123b0:	1ac0      	subs	r0, r0, r3
 80123b2:	2300      	movs	r3, #0
 80123b4:	4602      	mov	r2, r0
 80123b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80123b8:	6a21      	ldr	r1, [r4, #32]
 80123ba:	4628      	mov	r0, r5
 80123bc:	47b0      	blx	r6
 80123be:	1c43      	adds	r3, r0, #1
 80123c0:	89a3      	ldrh	r3, [r4, #12]
 80123c2:	d106      	bne.n	80123d2 <__sflush_r+0x66>
 80123c4:	6829      	ldr	r1, [r5, #0]
 80123c6:	291d      	cmp	r1, #29
 80123c8:	d82c      	bhi.n	8012424 <__sflush_r+0xb8>
 80123ca:	4a2a      	ldr	r2, [pc, #168]	; (8012474 <__sflush_r+0x108>)
 80123cc:	40ca      	lsrs	r2, r1
 80123ce:	07d6      	lsls	r6, r2, #31
 80123d0:	d528      	bpl.n	8012424 <__sflush_r+0xb8>
 80123d2:	2200      	movs	r2, #0
 80123d4:	6062      	str	r2, [r4, #4]
 80123d6:	04d9      	lsls	r1, r3, #19
 80123d8:	6922      	ldr	r2, [r4, #16]
 80123da:	6022      	str	r2, [r4, #0]
 80123dc:	d504      	bpl.n	80123e8 <__sflush_r+0x7c>
 80123de:	1c42      	adds	r2, r0, #1
 80123e0:	d101      	bne.n	80123e6 <__sflush_r+0x7a>
 80123e2:	682b      	ldr	r3, [r5, #0]
 80123e4:	b903      	cbnz	r3, 80123e8 <__sflush_r+0x7c>
 80123e6:	6560      	str	r0, [r4, #84]	; 0x54
 80123e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123ea:	602f      	str	r7, [r5, #0]
 80123ec:	2900      	cmp	r1, #0
 80123ee:	d0ca      	beq.n	8012386 <__sflush_r+0x1a>
 80123f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123f4:	4299      	cmp	r1, r3
 80123f6:	d002      	beq.n	80123fe <__sflush_r+0x92>
 80123f8:	4628      	mov	r0, r5
 80123fa:	f7ff fae3 	bl	80119c4 <_free_r>
 80123fe:	2000      	movs	r0, #0
 8012400:	6360      	str	r0, [r4, #52]	; 0x34
 8012402:	e7c1      	b.n	8012388 <__sflush_r+0x1c>
 8012404:	6a21      	ldr	r1, [r4, #32]
 8012406:	2301      	movs	r3, #1
 8012408:	4628      	mov	r0, r5
 801240a:	47b0      	blx	r6
 801240c:	1c41      	adds	r1, r0, #1
 801240e:	d1c7      	bne.n	80123a0 <__sflush_r+0x34>
 8012410:	682b      	ldr	r3, [r5, #0]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d0c4      	beq.n	80123a0 <__sflush_r+0x34>
 8012416:	2b1d      	cmp	r3, #29
 8012418:	d001      	beq.n	801241e <__sflush_r+0xb2>
 801241a:	2b16      	cmp	r3, #22
 801241c:	d101      	bne.n	8012422 <__sflush_r+0xb6>
 801241e:	602f      	str	r7, [r5, #0]
 8012420:	e7b1      	b.n	8012386 <__sflush_r+0x1a>
 8012422:	89a3      	ldrh	r3, [r4, #12]
 8012424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012428:	81a3      	strh	r3, [r4, #12]
 801242a:	e7ad      	b.n	8012388 <__sflush_r+0x1c>
 801242c:	690f      	ldr	r7, [r1, #16]
 801242e:	2f00      	cmp	r7, #0
 8012430:	d0a9      	beq.n	8012386 <__sflush_r+0x1a>
 8012432:	0793      	lsls	r3, r2, #30
 8012434:	680e      	ldr	r6, [r1, #0]
 8012436:	bf08      	it	eq
 8012438:	694b      	ldreq	r3, [r1, #20]
 801243a:	600f      	str	r7, [r1, #0]
 801243c:	bf18      	it	ne
 801243e:	2300      	movne	r3, #0
 8012440:	eba6 0807 	sub.w	r8, r6, r7
 8012444:	608b      	str	r3, [r1, #8]
 8012446:	f1b8 0f00 	cmp.w	r8, #0
 801244a:	dd9c      	ble.n	8012386 <__sflush_r+0x1a>
 801244c:	6a21      	ldr	r1, [r4, #32]
 801244e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012450:	4643      	mov	r3, r8
 8012452:	463a      	mov	r2, r7
 8012454:	4628      	mov	r0, r5
 8012456:	47b0      	blx	r6
 8012458:	2800      	cmp	r0, #0
 801245a:	dc06      	bgt.n	801246a <__sflush_r+0xfe>
 801245c:	89a3      	ldrh	r3, [r4, #12]
 801245e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012462:	81a3      	strh	r3, [r4, #12]
 8012464:	f04f 30ff 	mov.w	r0, #4294967295
 8012468:	e78e      	b.n	8012388 <__sflush_r+0x1c>
 801246a:	4407      	add	r7, r0
 801246c:	eba8 0800 	sub.w	r8, r8, r0
 8012470:	e7e9      	b.n	8012446 <__sflush_r+0xda>
 8012472:	bf00      	nop
 8012474:	20400001 	.word	0x20400001

08012478 <_fflush_r>:
 8012478:	b538      	push	{r3, r4, r5, lr}
 801247a:	690b      	ldr	r3, [r1, #16]
 801247c:	4605      	mov	r5, r0
 801247e:	460c      	mov	r4, r1
 8012480:	b913      	cbnz	r3, 8012488 <_fflush_r+0x10>
 8012482:	2500      	movs	r5, #0
 8012484:	4628      	mov	r0, r5
 8012486:	bd38      	pop	{r3, r4, r5, pc}
 8012488:	b118      	cbz	r0, 8012492 <_fflush_r+0x1a>
 801248a:	6983      	ldr	r3, [r0, #24]
 801248c:	b90b      	cbnz	r3, 8012492 <_fflush_r+0x1a>
 801248e:	f000 f887 	bl	80125a0 <__sinit>
 8012492:	4b14      	ldr	r3, [pc, #80]	; (80124e4 <_fflush_r+0x6c>)
 8012494:	429c      	cmp	r4, r3
 8012496:	d11b      	bne.n	80124d0 <_fflush_r+0x58>
 8012498:	686c      	ldr	r4, [r5, #4]
 801249a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d0ef      	beq.n	8012482 <_fflush_r+0xa>
 80124a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80124a4:	07d0      	lsls	r0, r2, #31
 80124a6:	d404      	bmi.n	80124b2 <_fflush_r+0x3a>
 80124a8:	0599      	lsls	r1, r3, #22
 80124aa:	d402      	bmi.n	80124b2 <_fflush_r+0x3a>
 80124ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ae:	f000 f915 	bl	80126dc <__retarget_lock_acquire_recursive>
 80124b2:	4628      	mov	r0, r5
 80124b4:	4621      	mov	r1, r4
 80124b6:	f7ff ff59 	bl	801236c <__sflush_r>
 80124ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124bc:	07da      	lsls	r2, r3, #31
 80124be:	4605      	mov	r5, r0
 80124c0:	d4e0      	bmi.n	8012484 <_fflush_r+0xc>
 80124c2:	89a3      	ldrh	r3, [r4, #12]
 80124c4:	059b      	lsls	r3, r3, #22
 80124c6:	d4dd      	bmi.n	8012484 <_fflush_r+0xc>
 80124c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124ca:	f000 f908 	bl	80126de <__retarget_lock_release_recursive>
 80124ce:	e7d9      	b.n	8012484 <_fflush_r+0xc>
 80124d0:	4b05      	ldr	r3, [pc, #20]	; (80124e8 <_fflush_r+0x70>)
 80124d2:	429c      	cmp	r4, r3
 80124d4:	d101      	bne.n	80124da <_fflush_r+0x62>
 80124d6:	68ac      	ldr	r4, [r5, #8]
 80124d8:	e7df      	b.n	801249a <_fflush_r+0x22>
 80124da:	4b04      	ldr	r3, [pc, #16]	; (80124ec <_fflush_r+0x74>)
 80124dc:	429c      	cmp	r4, r3
 80124de:	bf08      	it	eq
 80124e0:	68ec      	ldreq	r4, [r5, #12]
 80124e2:	e7da      	b.n	801249a <_fflush_r+0x22>
 80124e4:	08013254 	.word	0x08013254
 80124e8:	08013274 	.word	0x08013274
 80124ec:	08013234 	.word	0x08013234

080124f0 <std>:
 80124f0:	2300      	movs	r3, #0
 80124f2:	b510      	push	{r4, lr}
 80124f4:	4604      	mov	r4, r0
 80124f6:	e9c0 3300 	strd	r3, r3, [r0]
 80124fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80124fe:	6083      	str	r3, [r0, #8]
 8012500:	8181      	strh	r1, [r0, #12]
 8012502:	6643      	str	r3, [r0, #100]	; 0x64
 8012504:	81c2      	strh	r2, [r0, #14]
 8012506:	6183      	str	r3, [r0, #24]
 8012508:	4619      	mov	r1, r3
 801250a:	2208      	movs	r2, #8
 801250c:	305c      	adds	r0, #92	; 0x5c
 801250e:	f7fd fb7f 	bl	800fc10 <memset>
 8012512:	4b05      	ldr	r3, [pc, #20]	; (8012528 <std+0x38>)
 8012514:	6263      	str	r3, [r4, #36]	; 0x24
 8012516:	4b05      	ldr	r3, [pc, #20]	; (801252c <std+0x3c>)
 8012518:	62a3      	str	r3, [r4, #40]	; 0x28
 801251a:	4b05      	ldr	r3, [pc, #20]	; (8012530 <std+0x40>)
 801251c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801251e:	4b05      	ldr	r3, [pc, #20]	; (8012534 <std+0x44>)
 8012520:	6224      	str	r4, [r4, #32]
 8012522:	6323      	str	r3, [r4, #48]	; 0x30
 8012524:	bd10      	pop	{r4, pc}
 8012526:	bf00      	nop
 8012528:	08012841 	.word	0x08012841
 801252c:	08012863 	.word	0x08012863
 8012530:	0801289b 	.word	0x0801289b
 8012534:	080128bf 	.word	0x080128bf

08012538 <_cleanup_r>:
 8012538:	4901      	ldr	r1, [pc, #4]	; (8012540 <_cleanup_r+0x8>)
 801253a:	f000 b8af 	b.w	801269c <_fwalk_reent>
 801253e:	bf00      	nop
 8012540:	08012479 	.word	0x08012479

08012544 <__sfmoreglue>:
 8012544:	b570      	push	{r4, r5, r6, lr}
 8012546:	1e4a      	subs	r2, r1, #1
 8012548:	2568      	movs	r5, #104	; 0x68
 801254a:	4355      	muls	r5, r2
 801254c:	460e      	mov	r6, r1
 801254e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012552:	f7ff fa87 	bl	8011a64 <_malloc_r>
 8012556:	4604      	mov	r4, r0
 8012558:	b140      	cbz	r0, 801256c <__sfmoreglue+0x28>
 801255a:	2100      	movs	r1, #0
 801255c:	e9c0 1600 	strd	r1, r6, [r0]
 8012560:	300c      	adds	r0, #12
 8012562:	60a0      	str	r0, [r4, #8]
 8012564:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012568:	f7fd fb52 	bl	800fc10 <memset>
 801256c:	4620      	mov	r0, r4
 801256e:	bd70      	pop	{r4, r5, r6, pc}

08012570 <__sfp_lock_acquire>:
 8012570:	4801      	ldr	r0, [pc, #4]	; (8012578 <__sfp_lock_acquire+0x8>)
 8012572:	f000 b8b3 	b.w	80126dc <__retarget_lock_acquire_recursive>
 8012576:	bf00      	nop
 8012578:	2001ad28 	.word	0x2001ad28

0801257c <__sfp_lock_release>:
 801257c:	4801      	ldr	r0, [pc, #4]	; (8012584 <__sfp_lock_release+0x8>)
 801257e:	f000 b8ae 	b.w	80126de <__retarget_lock_release_recursive>
 8012582:	bf00      	nop
 8012584:	2001ad28 	.word	0x2001ad28

08012588 <__sinit_lock_acquire>:
 8012588:	4801      	ldr	r0, [pc, #4]	; (8012590 <__sinit_lock_acquire+0x8>)
 801258a:	f000 b8a7 	b.w	80126dc <__retarget_lock_acquire_recursive>
 801258e:	bf00      	nop
 8012590:	2001ad23 	.word	0x2001ad23

08012594 <__sinit_lock_release>:
 8012594:	4801      	ldr	r0, [pc, #4]	; (801259c <__sinit_lock_release+0x8>)
 8012596:	f000 b8a2 	b.w	80126de <__retarget_lock_release_recursive>
 801259a:	bf00      	nop
 801259c:	2001ad23 	.word	0x2001ad23

080125a0 <__sinit>:
 80125a0:	b510      	push	{r4, lr}
 80125a2:	4604      	mov	r4, r0
 80125a4:	f7ff fff0 	bl	8012588 <__sinit_lock_acquire>
 80125a8:	69a3      	ldr	r3, [r4, #24]
 80125aa:	b11b      	cbz	r3, 80125b4 <__sinit+0x14>
 80125ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80125b0:	f7ff bff0 	b.w	8012594 <__sinit_lock_release>
 80125b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80125b8:	6523      	str	r3, [r4, #80]	; 0x50
 80125ba:	4b13      	ldr	r3, [pc, #76]	; (8012608 <__sinit+0x68>)
 80125bc:	4a13      	ldr	r2, [pc, #76]	; (801260c <__sinit+0x6c>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80125c2:	42a3      	cmp	r3, r4
 80125c4:	bf04      	itt	eq
 80125c6:	2301      	moveq	r3, #1
 80125c8:	61a3      	streq	r3, [r4, #24]
 80125ca:	4620      	mov	r0, r4
 80125cc:	f000 f820 	bl	8012610 <__sfp>
 80125d0:	6060      	str	r0, [r4, #4]
 80125d2:	4620      	mov	r0, r4
 80125d4:	f000 f81c 	bl	8012610 <__sfp>
 80125d8:	60a0      	str	r0, [r4, #8]
 80125da:	4620      	mov	r0, r4
 80125dc:	f000 f818 	bl	8012610 <__sfp>
 80125e0:	2200      	movs	r2, #0
 80125e2:	60e0      	str	r0, [r4, #12]
 80125e4:	2104      	movs	r1, #4
 80125e6:	6860      	ldr	r0, [r4, #4]
 80125e8:	f7ff ff82 	bl	80124f0 <std>
 80125ec:	68a0      	ldr	r0, [r4, #8]
 80125ee:	2201      	movs	r2, #1
 80125f0:	2109      	movs	r1, #9
 80125f2:	f7ff ff7d 	bl	80124f0 <std>
 80125f6:	68e0      	ldr	r0, [r4, #12]
 80125f8:	2202      	movs	r2, #2
 80125fa:	2112      	movs	r1, #18
 80125fc:	f7ff ff78 	bl	80124f0 <std>
 8012600:	2301      	movs	r3, #1
 8012602:	61a3      	str	r3, [r4, #24]
 8012604:	e7d2      	b.n	80125ac <__sinit+0xc>
 8012606:	bf00      	nop
 8012608:	08012eb0 	.word	0x08012eb0
 801260c:	08012539 	.word	0x08012539

08012610 <__sfp>:
 8012610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012612:	4607      	mov	r7, r0
 8012614:	f7ff ffac 	bl	8012570 <__sfp_lock_acquire>
 8012618:	4b1e      	ldr	r3, [pc, #120]	; (8012694 <__sfp+0x84>)
 801261a:	681e      	ldr	r6, [r3, #0]
 801261c:	69b3      	ldr	r3, [r6, #24]
 801261e:	b913      	cbnz	r3, 8012626 <__sfp+0x16>
 8012620:	4630      	mov	r0, r6
 8012622:	f7ff ffbd 	bl	80125a0 <__sinit>
 8012626:	3648      	adds	r6, #72	; 0x48
 8012628:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801262c:	3b01      	subs	r3, #1
 801262e:	d503      	bpl.n	8012638 <__sfp+0x28>
 8012630:	6833      	ldr	r3, [r6, #0]
 8012632:	b30b      	cbz	r3, 8012678 <__sfp+0x68>
 8012634:	6836      	ldr	r6, [r6, #0]
 8012636:	e7f7      	b.n	8012628 <__sfp+0x18>
 8012638:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801263c:	b9d5      	cbnz	r5, 8012674 <__sfp+0x64>
 801263e:	4b16      	ldr	r3, [pc, #88]	; (8012698 <__sfp+0x88>)
 8012640:	60e3      	str	r3, [r4, #12]
 8012642:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012646:	6665      	str	r5, [r4, #100]	; 0x64
 8012648:	f000 f847 	bl	80126da <__retarget_lock_init_recursive>
 801264c:	f7ff ff96 	bl	801257c <__sfp_lock_release>
 8012650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012658:	6025      	str	r5, [r4, #0]
 801265a:	61a5      	str	r5, [r4, #24]
 801265c:	2208      	movs	r2, #8
 801265e:	4629      	mov	r1, r5
 8012660:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012664:	f7fd fad4 	bl	800fc10 <memset>
 8012668:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801266c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012670:	4620      	mov	r0, r4
 8012672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012674:	3468      	adds	r4, #104	; 0x68
 8012676:	e7d9      	b.n	801262c <__sfp+0x1c>
 8012678:	2104      	movs	r1, #4
 801267a:	4638      	mov	r0, r7
 801267c:	f7ff ff62 	bl	8012544 <__sfmoreglue>
 8012680:	4604      	mov	r4, r0
 8012682:	6030      	str	r0, [r6, #0]
 8012684:	2800      	cmp	r0, #0
 8012686:	d1d5      	bne.n	8012634 <__sfp+0x24>
 8012688:	f7ff ff78 	bl	801257c <__sfp_lock_release>
 801268c:	230c      	movs	r3, #12
 801268e:	603b      	str	r3, [r7, #0]
 8012690:	e7ee      	b.n	8012670 <__sfp+0x60>
 8012692:	bf00      	nop
 8012694:	08012eb0 	.word	0x08012eb0
 8012698:	ffff0001 	.word	0xffff0001

0801269c <_fwalk_reent>:
 801269c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126a0:	4606      	mov	r6, r0
 80126a2:	4688      	mov	r8, r1
 80126a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80126a8:	2700      	movs	r7, #0
 80126aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80126ae:	f1b9 0901 	subs.w	r9, r9, #1
 80126b2:	d505      	bpl.n	80126c0 <_fwalk_reent+0x24>
 80126b4:	6824      	ldr	r4, [r4, #0]
 80126b6:	2c00      	cmp	r4, #0
 80126b8:	d1f7      	bne.n	80126aa <_fwalk_reent+0xe>
 80126ba:	4638      	mov	r0, r7
 80126bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126c0:	89ab      	ldrh	r3, [r5, #12]
 80126c2:	2b01      	cmp	r3, #1
 80126c4:	d907      	bls.n	80126d6 <_fwalk_reent+0x3a>
 80126c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80126ca:	3301      	adds	r3, #1
 80126cc:	d003      	beq.n	80126d6 <_fwalk_reent+0x3a>
 80126ce:	4629      	mov	r1, r5
 80126d0:	4630      	mov	r0, r6
 80126d2:	47c0      	blx	r8
 80126d4:	4307      	orrs	r7, r0
 80126d6:	3568      	adds	r5, #104	; 0x68
 80126d8:	e7e9      	b.n	80126ae <_fwalk_reent+0x12>

080126da <__retarget_lock_init_recursive>:
 80126da:	4770      	bx	lr

080126dc <__retarget_lock_acquire_recursive>:
 80126dc:	4770      	bx	lr

080126de <__retarget_lock_release_recursive>:
 80126de:	4770      	bx	lr

080126e0 <__swhatbuf_r>:
 80126e0:	b570      	push	{r4, r5, r6, lr}
 80126e2:	460e      	mov	r6, r1
 80126e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126e8:	2900      	cmp	r1, #0
 80126ea:	b096      	sub	sp, #88	; 0x58
 80126ec:	4614      	mov	r4, r2
 80126ee:	461d      	mov	r5, r3
 80126f0:	da07      	bge.n	8012702 <__swhatbuf_r+0x22>
 80126f2:	2300      	movs	r3, #0
 80126f4:	602b      	str	r3, [r5, #0]
 80126f6:	89b3      	ldrh	r3, [r6, #12]
 80126f8:	061a      	lsls	r2, r3, #24
 80126fa:	d410      	bmi.n	801271e <__swhatbuf_r+0x3e>
 80126fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012700:	e00e      	b.n	8012720 <__swhatbuf_r+0x40>
 8012702:	466a      	mov	r2, sp
 8012704:	f000 f8f0 	bl	80128e8 <_fstat_r>
 8012708:	2800      	cmp	r0, #0
 801270a:	dbf2      	blt.n	80126f2 <__swhatbuf_r+0x12>
 801270c:	9a01      	ldr	r2, [sp, #4]
 801270e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012712:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012716:	425a      	negs	r2, r3
 8012718:	415a      	adcs	r2, r3
 801271a:	602a      	str	r2, [r5, #0]
 801271c:	e7ee      	b.n	80126fc <__swhatbuf_r+0x1c>
 801271e:	2340      	movs	r3, #64	; 0x40
 8012720:	2000      	movs	r0, #0
 8012722:	6023      	str	r3, [r4, #0]
 8012724:	b016      	add	sp, #88	; 0x58
 8012726:	bd70      	pop	{r4, r5, r6, pc}

08012728 <__smakebuf_r>:
 8012728:	898b      	ldrh	r3, [r1, #12]
 801272a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801272c:	079d      	lsls	r5, r3, #30
 801272e:	4606      	mov	r6, r0
 8012730:	460c      	mov	r4, r1
 8012732:	d507      	bpl.n	8012744 <__smakebuf_r+0x1c>
 8012734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012738:	6023      	str	r3, [r4, #0]
 801273a:	6123      	str	r3, [r4, #16]
 801273c:	2301      	movs	r3, #1
 801273e:	6163      	str	r3, [r4, #20]
 8012740:	b002      	add	sp, #8
 8012742:	bd70      	pop	{r4, r5, r6, pc}
 8012744:	ab01      	add	r3, sp, #4
 8012746:	466a      	mov	r2, sp
 8012748:	f7ff ffca 	bl	80126e0 <__swhatbuf_r>
 801274c:	9900      	ldr	r1, [sp, #0]
 801274e:	4605      	mov	r5, r0
 8012750:	4630      	mov	r0, r6
 8012752:	f7ff f987 	bl	8011a64 <_malloc_r>
 8012756:	b948      	cbnz	r0, 801276c <__smakebuf_r+0x44>
 8012758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801275c:	059a      	lsls	r2, r3, #22
 801275e:	d4ef      	bmi.n	8012740 <__smakebuf_r+0x18>
 8012760:	f023 0303 	bic.w	r3, r3, #3
 8012764:	f043 0302 	orr.w	r3, r3, #2
 8012768:	81a3      	strh	r3, [r4, #12]
 801276a:	e7e3      	b.n	8012734 <__smakebuf_r+0xc>
 801276c:	4b0d      	ldr	r3, [pc, #52]	; (80127a4 <__smakebuf_r+0x7c>)
 801276e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012770:	89a3      	ldrh	r3, [r4, #12]
 8012772:	6020      	str	r0, [r4, #0]
 8012774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012778:	81a3      	strh	r3, [r4, #12]
 801277a:	9b00      	ldr	r3, [sp, #0]
 801277c:	6163      	str	r3, [r4, #20]
 801277e:	9b01      	ldr	r3, [sp, #4]
 8012780:	6120      	str	r0, [r4, #16]
 8012782:	b15b      	cbz	r3, 801279c <__smakebuf_r+0x74>
 8012784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012788:	4630      	mov	r0, r6
 801278a:	f000 f8bf 	bl	801290c <_isatty_r>
 801278e:	b128      	cbz	r0, 801279c <__smakebuf_r+0x74>
 8012790:	89a3      	ldrh	r3, [r4, #12]
 8012792:	f023 0303 	bic.w	r3, r3, #3
 8012796:	f043 0301 	orr.w	r3, r3, #1
 801279a:	81a3      	strh	r3, [r4, #12]
 801279c:	89a0      	ldrh	r0, [r4, #12]
 801279e:	4305      	orrs	r5, r0
 80127a0:	81a5      	strh	r5, [r4, #12]
 80127a2:	e7cd      	b.n	8012740 <__smakebuf_r+0x18>
 80127a4:	08012539 	.word	0x08012539

080127a8 <_malloc_usable_size_r>:
 80127a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127ac:	1f18      	subs	r0, r3, #4
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	bfbc      	itt	lt
 80127b2:	580b      	ldrlt	r3, [r1, r0]
 80127b4:	18c0      	addlt	r0, r0, r3
 80127b6:	4770      	bx	lr

080127b8 <_raise_r>:
 80127b8:	291f      	cmp	r1, #31
 80127ba:	b538      	push	{r3, r4, r5, lr}
 80127bc:	4604      	mov	r4, r0
 80127be:	460d      	mov	r5, r1
 80127c0:	d904      	bls.n	80127cc <_raise_r+0x14>
 80127c2:	2316      	movs	r3, #22
 80127c4:	6003      	str	r3, [r0, #0]
 80127c6:	f04f 30ff 	mov.w	r0, #4294967295
 80127ca:	bd38      	pop	{r3, r4, r5, pc}
 80127cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80127ce:	b112      	cbz	r2, 80127d6 <_raise_r+0x1e>
 80127d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80127d4:	b94b      	cbnz	r3, 80127ea <_raise_r+0x32>
 80127d6:	4620      	mov	r0, r4
 80127d8:	f000 f830 	bl	801283c <_getpid_r>
 80127dc:	462a      	mov	r2, r5
 80127de:	4601      	mov	r1, r0
 80127e0:	4620      	mov	r0, r4
 80127e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127e6:	f000 b817 	b.w	8012818 <_kill_r>
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d00a      	beq.n	8012804 <_raise_r+0x4c>
 80127ee:	1c59      	adds	r1, r3, #1
 80127f0:	d103      	bne.n	80127fa <_raise_r+0x42>
 80127f2:	2316      	movs	r3, #22
 80127f4:	6003      	str	r3, [r0, #0]
 80127f6:	2001      	movs	r0, #1
 80127f8:	e7e7      	b.n	80127ca <_raise_r+0x12>
 80127fa:	2400      	movs	r4, #0
 80127fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012800:	4628      	mov	r0, r5
 8012802:	4798      	blx	r3
 8012804:	2000      	movs	r0, #0
 8012806:	e7e0      	b.n	80127ca <_raise_r+0x12>

08012808 <raise>:
 8012808:	4b02      	ldr	r3, [pc, #8]	; (8012814 <raise+0xc>)
 801280a:	4601      	mov	r1, r0
 801280c:	6818      	ldr	r0, [r3, #0]
 801280e:	f7ff bfd3 	b.w	80127b8 <_raise_r>
 8012812:	bf00      	nop
 8012814:	20000034 	.word	0x20000034

08012818 <_kill_r>:
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	4d07      	ldr	r5, [pc, #28]	; (8012838 <_kill_r+0x20>)
 801281c:	2300      	movs	r3, #0
 801281e:	4604      	mov	r4, r0
 8012820:	4608      	mov	r0, r1
 8012822:	4611      	mov	r1, r2
 8012824:	602b      	str	r3, [r5, #0]
 8012826:	f7f1 fab7 	bl	8003d98 <_kill>
 801282a:	1c43      	adds	r3, r0, #1
 801282c:	d102      	bne.n	8012834 <_kill_r+0x1c>
 801282e:	682b      	ldr	r3, [r5, #0]
 8012830:	b103      	cbz	r3, 8012834 <_kill_r+0x1c>
 8012832:	6023      	str	r3, [r4, #0]
 8012834:	bd38      	pop	{r3, r4, r5, pc}
 8012836:	bf00      	nop
 8012838:	2001ad1c 	.word	0x2001ad1c

0801283c <_getpid_r>:
 801283c:	f7f1 baa4 	b.w	8003d88 <_getpid>

08012840 <__sread>:
 8012840:	b510      	push	{r4, lr}
 8012842:	460c      	mov	r4, r1
 8012844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012848:	f000 f882 	bl	8012950 <_read_r>
 801284c:	2800      	cmp	r0, #0
 801284e:	bfab      	itete	ge
 8012850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012852:	89a3      	ldrhlt	r3, [r4, #12]
 8012854:	181b      	addge	r3, r3, r0
 8012856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801285a:	bfac      	ite	ge
 801285c:	6563      	strge	r3, [r4, #84]	; 0x54
 801285e:	81a3      	strhlt	r3, [r4, #12]
 8012860:	bd10      	pop	{r4, pc}

08012862 <__swrite>:
 8012862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012866:	461f      	mov	r7, r3
 8012868:	898b      	ldrh	r3, [r1, #12]
 801286a:	05db      	lsls	r3, r3, #23
 801286c:	4605      	mov	r5, r0
 801286e:	460c      	mov	r4, r1
 8012870:	4616      	mov	r6, r2
 8012872:	d505      	bpl.n	8012880 <__swrite+0x1e>
 8012874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012878:	2302      	movs	r3, #2
 801287a:	2200      	movs	r2, #0
 801287c:	f000 f856 	bl	801292c <_lseek_r>
 8012880:	89a3      	ldrh	r3, [r4, #12]
 8012882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801288a:	81a3      	strh	r3, [r4, #12]
 801288c:	4632      	mov	r2, r6
 801288e:	463b      	mov	r3, r7
 8012890:	4628      	mov	r0, r5
 8012892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012896:	f7fd b963 	b.w	800fb60 <_write_r>

0801289a <__sseek>:
 801289a:	b510      	push	{r4, lr}
 801289c:	460c      	mov	r4, r1
 801289e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128a2:	f000 f843 	bl	801292c <_lseek_r>
 80128a6:	1c43      	adds	r3, r0, #1
 80128a8:	89a3      	ldrh	r3, [r4, #12]
 80128aa:	bf15      	itete	ne
 80128ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80128ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80128b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80128b6:	81a3      	strheq	r3, [r4, #12]
 80128b8:	bf18      	it	ne
 80128ba:	81a3      	strhne	r3, [r4, #12]
 80128bc:	bd10      	pop	{r4, pc}

080128be <__sclose>:
 80128be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128c2:	f000 b801 	b.w	80128c8 <_close_r>
	...

080128c8 <_close_r>:
 80128c8:	b538      	push	{r3, r4, r5, lr}
 80128ca:	4d06      	ldr	r5, [pc, #24]	; (80128e4 <_close_r+0x1c>)
 80128cc:	2300      	movs	r3, #0
 80128ce:	4604      	mov	r4, r0
 80128d0:	4608      	mov	r0, r1
 80128d2:	602b      	str	r3, [r5, #0]
 80128d4:	f7f1 fa97 	bl	8003e06 <_close>
 80128d8:	1c43      	adds	r3, r0, #1
 80128da:	d102      	bne.n	80128e2 <_close_r+0x1a>
 80128dc:	682b      	ldr	r3, [r5, #0]
 80128de:	b103      	cbz	r3, 80128e2 <_close_r+0x1a>
 80128e0:	6023      	str	r3, [r4, #0]
 80128e2:	bd38      	pop	{r3, r4, r5, pc}
 80128e4:	2001ad1c 	.word	0x2001ad1c

080128e8 <_fstat_r>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4d07      	ldr	r5, [pc, #28]	; (8012908 <_fstat_r+0x20>)
 80128ec:	2300      	movs	r3, #0
 80128ee:	4604      	mov	r4, r0
 80128f0:	4608      	mov	r0, r1
 80128f2:	4611      	mov	r1, r2
 80128f4:	602b      	str	r3, [r5, #0]
 80128f6:	f7f1 fa92 	bl	8003e1e <_fstat>
 80128fa:	1c43      	adds	r3, r0, #1
 80128fc:	d102      	bne.n	8012904 <_fstat_r+0x1c>
 80128fe:	682b      	ldr	r3, [r5, #0]
 8012900:	b103      	cbz	r3, 8012904 <_fstat_r+0x1c>
 8012902:	6023      	str	r3, [r4, #0]
 8012904:	bd38      	pop	{r3, r4, r5, pc}
 8012906:	bf00      	nop
 8012908:	2001ad1c 	.word	0x2001ad1c

0801290c <_isatty_r>:
 801290c:	b538      	push	{r3, r4, r5, lr}
 801290e:	4d06      	ldr	r5, [pc, #24]	; (8012928 <_isatty_r+0x1c>)
 8012910:	2300      	movs	r3, #0
 8012912:	4604      	mov	r4, r0
 8012914:	4608      	mov	r0, r1
 8012916:	602b      	str	r3, [r5, #0]
 8012918:	f7f1 fa91 	bl	8003e3e <_isatty>
 801291c:	1c43      	adds	r3, r0, #1
 801291e:	d102      	bne.n	8012926 <_isatty_r+0x1a>
 8012920:	682b      	ldr	r3, [r5, #0]
 8012922:	b103      	cbz	r3, 8012926 <_isatty_r+0x1a>
 8012924:	6023      	str	r3, [r4, #0]
 8012926:	bd38      	pop	{r3, r4, r5, pc}
 8012928:	2001ad1c 	.word	0x2001ad1c

0801292c <_lseek_r>:
 801292c:	b538      	push	{r3, r4, r5, lr}
 801292e:	4d07      	ldr	r5, [pc, #28]	; (801294c <_lseek_r+0x20>)
 8012930:	4604      	mov	r4, r0
 8012932:	4608      	mov	r0, r1
 8012934:	4611      	mov	r1, r2
 8012936:	2200      	movs	r2, #0
 8012938:	602a      	str	r2, [r5, #0]
 801293a:	461a      	mov	r2, r3
 801293c:	f7f1 fa8a 	bl	8003e54 <_lseek>
 8012940:	1c43      	adds	r3, r0, #1
 8012942:	d102      	bne.n	801294a <_lseek_r+0x1e>
 8012944:	682b      	ldr	r3, [r5, #0]
 8012946:	b103      	cbz	r3, 801294a <_lseek_r+0x1e>
 8012948:	6023      	str	r3, [r4, #0]
 801294a:	bd38      	pop	{r3, r4, r5, pc}
 801294c:	2001ad1c 	.word	0x2001ad1c

08012950 <_read_r>:
 8012950:	b538      	push	{r3, r4, r5, lr}
 8012952:	4d07      	ldr	r5, [pc, #28]	; (8012970 <_read_r+0x20>)
 8012954:	4604      	mov	r4, r0
 8012956:	4608      	mov	r0, r1
 8012958:	4611      	mov	r1, r2
 801295a:	2200      	movs	r2, #0
 801295c:	602a      	str	r2, [r5, #0]
 801295e:	461a      	mov	r2, r3
 8012960:	f7f1 fa34 	bl	8003dcc <_read>
 8012964:	1c43      	adds	r3, r0, #1
 8012966:	d102      	bne.n	801296e <_read_r+0x1e>
 8012968:	682b      	ldr	r3, [r5, #0]
 801296a:	b103      	cbz	r3, 801296e <_read_r+0x1e>
 801296c:	6023      	str	r3, [r4, #0]
 801296e:	bd38      	pop	{r3, r4, r5, pc}
 8012970:	2001ad1c 	.word	0x2001ad1c

08012974 <_init>:
 8012974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012976:	bf00      	nop
 8012978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801297a:	bc08      	pop	{r3}
 801297c:	469e      	mov	lr, r3
 801297e:	4770      	bx	lr

08012980 <_fini>:
 8012980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012982:	bf00      	nop
 8012984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012986:	bc08      	pop	{r3}
 8012988:	469e      	mov	lr, r3
 801298a:	4770      	bx	lr
